[
	{
		"name": "code-narrator.config.js",
		"path": "code-narrator.config.js",
		"folderPath": "./",
		"fileContent": "const JenkyllGenerator = require(\"./src/documentation/plugins/generators/Docusaurus/JenkyllGenerator\");\r\n\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot:true,\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"__tests__/**/**\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    builders: [\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n        {\r\n            type: \"README\",\r\n            template:\"README\",\r\n            name: \"ReadMe\",\r\n            args : {\r\n                entryFileContent:\"content(./src/cli.ts)\"\r\n            },\r\n            files : [\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath:[\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_howto\",\r\n            name: \"How to create HowTo\",\r\n            files: [\r\n                {\r\n                    path: \"code-narrator.config.js\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_use_cli\",\r\n            name: \"Use CLI\",\r\n            files: [\r\n                {\r\n                    path: \"src/cli.ts\"\r\n                },\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath: [\"$.repository\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_content_to_long\",\r\n            name: \"Content to long\",\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_custom_builder\",\r\n            name: \"Create your own custom builder\",\r\n            files : [\r\n                {\r\n                    path: 'code-narrator.config.js',\r\n                    extract : 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                },\r\n                {\r\n                    path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                    extract: 'how code parses content(...) and extract()'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type:\"README\",\r\n            template:\"overview_readme\",\r\n            name:\"README\",\r\n            path:\"howto\",\r\n            files : [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ]\r\n        }\r\n    ],\r\n    generatorPlugin : [\r\n        JenkyllGenerator\r\n    ],\r\n    sitemap : {\r\n        enable : true,\r\n        url : 'https://ingig.github.io/code-narrator/'\r\n    },\r\n    rootFileName: 'index.html'\r\n\r\n};\r\n\r\nmodule.exports = config;",
		"documentation": "Here's a detailed description of the `code-narrator.config.js` file and its purpose in the application:\n\nThe `code-narrator.config.js` file is a configuration file for the Code Narrator application. It contains various settings and configurations that are used by the application to generate documentation for your project. The file exports a `config` object with the following properties:\n\n- `entry_file`: The entry point file for the application (e.g., `./dist/src/App.js`).\n- `cli_file`: The command-line interface file for the application (e.g., `./dist/src/cli.js`).\n- `project_name`: The name of the project (e.g., `code-narrator`).\n- `config_files`: An array of configuration files used by the application (e.g., `[\"code-narrator.config.js\"]`).\n- `readmeRoot`: A boolean value indicating whether the README file should be generated at the root level of the project.\n- `repository_url`: The URL of the project's repository (e.g., `https://github.com/ingig/code-narrator`).\n- `project_file`: The main project file (e.g., `package.json`).\n- `source_path`: The path to the source code (e.g., `src`).\n- `documentation_path`: The path to the documentation folder (e.g., `docs`).\n- `test_path`: The path to the test folder (e.g., `__tests__`).\n- `include`: An array of file patterns to include in the documentation generation process.\n- `builders`: An array of builder objects that define how the documentation should be generated.\n- `generatorPlugin`: An array of generator plugins used by the application (e.g., `[JenkyllGenerator]`).\n- `sitemap`: An object containing sitemap configuration settings.\n- `rootFileName`: The name of the root file for the generated documentation (e.g., `index.html`).\n\nTo retrieve a value from the config file, you can use the following example:\n\n```javascript\nconst config = require(\"./code-narrator.config.js\");\n\nconsole.log(config.entry_file); // Output: \"./dist/src/App.js\"\n```\n\nPlease note that I have replaced any sensitive information with `*****`.",
		"isFolder": false,
		"updated": "2023-04-15T09:49:17.841Z",
		"sidebar_position": 0,
		"sidebar_label": "Code-narrator.config.js",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration/",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "These are the app-specific config files called code-narrator.config.js.\r\nWhen you use code-narrator in your project, you need set these configurations correctly to match your project.\r\nGive me a detailed description of them, and what their purpose is in the application if you can decide.\r\nGive example on how to retrieve from the config file\r\n###\r\nconst JenkyllGenerator = require(\"./src/documentation/plugins/generators/Docusaurus/JenkyllGenerator\");\r\n\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot:true,\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"__tests__/**/**\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    builders: [\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n        {\r\n            type: \"README\",\r\n            template:\"README\",\r\n            name: \"ReadMe\",\r\n            args : {\r\n                entryFileContent:\"content(./src/cli.ts)\"\r\n            },\r\n            files : [\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath:[\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_howto\",\r\n            name: \"How to create HowTo\",\r\n            files: [\r\n                {\r\n                    path: \"code-narrator.config.js\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_use_cli\",\r\n            name: \"Use CLI\",\r\n            files: [\r\n                {\r\n                    path: \"src/cli.ts\"\r\n                },\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath: [\"$.repository\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_content_to_long\",\r\n            name: \"Content to long\",\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_custom_builder\",\r\n            name: \"Create your own custom builder\",\r\n            files : [\r\n                {\r\n                    path: 'code-narrator.config.js',\r\n                    extract : 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                },\r\n                {\r\n                    path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                    extract: 'how code parses content(...) and extract()'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type:\"README\",\r\n            template:\"overview_readme\",\r\n            name:\"README\",\r\n            path:\"howto\",\r\n            files : [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ]\r\n        }\r\n    ],\r\n    generatorPlugin : [\r\n        JenkyllGenerator\r\n    ],\r\n    sitemap : {\r\n        enable : true,\r\n        url : 'https://ingig.github.io/code-narrator/'\r\n    },\r\n    rootFileName: 'index.html'\r\n\r\n};\r\n\r\nmodule.exports = config;\r\n###"
			}
		],
		"id": "code-narrator.config.js",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "Configuration",
		"path": "Configuration",
		"folderPath": "./Configuration",
		"fileContent": "",
		"documentation": "The `code-narrator.config.js` file is an app-specific configuration file for the Code Narrator application. It contains various settings and configurations that determine how the application behaves and generates documentation.\n\nThe purpose of this configuration file is to allow users to customize the behavior of the Code Narrator application according to their specific needs. It includes settings for entry files, CLI files, project names, repository URLs, source paths, documentation paths, test paths, and more.\n\nHere's an example of usage for the app-specific configs:\n\n```javascript\nconst config = {\n    entry_file: \"./dist/src/App.js\",\n    cli_file: \"./dist/src/cli.js\",\n    project_name: \"code-narrator\",\n    config_files: [\n        \"code-narrator.config.js\"\n    ],\n    // ... other configurations\n};\n\nmodule.exports = config;\n```\n\nIn this example, the `config` object contains various settings for the Code Narrator application, such as the entry file, CLI file, project name, and a list of configuration files. The `config` object is then exported as a module, making it available for use in other parts of the application.\n\nAs for the other configuration files, I do not recognize them, so I cannot provide any information about them.",
		"isFolder": true,
		"updated": "2023-04-15T19:00:24.308Z",
		"sidebar_position": 3,
		"sidebar_label": "Configuration",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "This is (or are) the app-specific config file(s) for code-narrator.\r\nGive me a detailed description, and what their purpose is in the application if you can decide.\r\nGive an example of usage for the app-specific configs\r\n###\r\ncode-narrator.config.js\r\n###\r\n\r\nHere is the content of the app specific config file(s)\r\n###\r\n--- Start code-narrator.config.js ---\n            const JenkyllGenerator = require(\"./src/documentation/plugins/generators/JekyllGenerator\");\r\n\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot: true,\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"__tests__/**/**\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    builders: [\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            sidebarPosition: 2,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n        {\r\n            type: \"README\",\r\n            sidebarPosition: 1,\r\n            template: \"README\",\r\n            name: \"ReadMe\",\r\n            args: {\r\n                entryFileContent: \"content(./src/cli.ts)\"\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    JSONPath: [\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"How To\",\r\n            path: \"howto\",\r\n            files: [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_howto\",\r\n                    name: \"How to create HowTo\",\r\n                    files: [\r\n                        {\r\n                            path: \"code-narrator.config.js\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_use_cli\",\r\n                    name: \"Use CLI\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/cli.ts\"\r\n                        },\r\n                        {\r\n                            path: \"package.json\",\r\n                            JSONPath: [\"$.repository\"]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_content_to_long\",\r\n                    name: \"Content to long\",\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_custom_builder\",\r\n                    name: \"Create your own custom builder\",\r\n                    files: [\r\n                        {\r\n                            path: 'code-narrator.config.js',\r\n                            extract: 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                        },\r\n                        {\r\n                            path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                            extract: 'how code parses content(...) and extract:'\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n\r\n\r\n    ],\r\n    generatorPlugin: [\r\n        JenkyllGenerator\r\n    ],\r\n    sitemap: {\r\n        enable: true,\r\n        url: 'https://ingig.github.io/code-narrator/'\r\n    },\r\n    rootFileName: 'index.html'\r\n\r\n};\r\n\r\nmodule.exports = config;\n            --- End code-narrator.config.js ---\n            \r\n###\r\n\r\nThese are other configuration files, give short general information about each of them, but only if you recognize them.\r\nIf you do not recognize them, then don't mention the config\r\n###\r\n\r\n###\r\n"
			}
		],
		"id": "Configuration",
		"lastTouch": "2023-04-15T19:05:19.493Z",
		"data": {
			"appSpecificConfigFiles": [
				"code-narrator.config.js"
			],
			"configFiles": [],
			"has_children": true
		}
	},
	{
		"name": "App.ts",
		"path": "src\\App.ts",
		"folderPath": "src",
		"fileContent": "import DocumentationBuilder from \"./documentation/DocumentationBuilder\";\r\nimport DocumentationCache from \"./documentation/DocumentationCache\";\r\nimport DocumentationGenerator from \"./documentation/DocumentationGenerator\";\r\nimport IProjectDocumentedSettings from \"./model/IProjectDocumentedSettings\";\r\nimport ConfigHelper from \"./config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\n\r\n/*\r\nAbout code-narrator\r\nThis application is installed with \"npm i code-narrator\", and executed either by npm run start or by using cli.\r\nWhen starting it will load up the configuration and cached documentation.\r\nThen it will go through the project code, reading the file & folder structure\r\nif the file or folder does not exist in the cache or the file has changed since last cached\r\ncode-narrator will send the code to GPT and ask for documentation in an .md format.\r\nWhen it receives the documentation, it writes it to the cache.\r\nWhen all files and folders have been parsed, then code-narrator creates the documentation from the cache\r\n\r\nThere are few rules to follow\r\n- Write description about the project in the project file (e.g. package.json)\r\n- If GPT generates wrong documentation, the code is probably not clear for humans either. Try adjusting code or adding one line comment to make code clearer\r\n- You can use :::tip or :::danger in you comments in your code files.\r\n */\r\nexport default class App {\r\n    static StartTime = new Date();\r\n    public async run(config? : Partial<ICodeNarratorConfig>) {\r\n        await ConfigHelper.load(config);\r\n        DocumentationCache.load();\r\n\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n\r\n\r\n        let generator = new DocumentationGenerator();\r\n        generator.make();\r\n\r\n        console.log('Done generating documents')\r\n    }\r\n}\r\n",
		"documentation": "# App.ts\n\nThe `App.ts` file is a part of the code-narrator application, which is responsible for generating documentation for a project using GPT. This file contains the main class `App` that orchestrates the process of loading configuration, caching documentation, building documentation, and generating the final documentation output.\n\n## Table of Contents\n\n- [Class: App](#class-app)\n  - [Method: run](#method-run)\n- [Usage](#usage)\n- [Tips and Cautions](#tips-and-cautions)\n\n## Class: App\n\nThe `App` class is the main class that handles the documentation generation process. It has a static property `StartTime` and a public method `run`.\n\n### Method: run\n\nThe `run` method is an asynchronous method that takes an optional parameter `config` of type `Partial<ICodeNarratorConfig>`. This method is responsible for executing the following steps:\n\n1. Load the configuration using `ConfigHelper.load(config)`.\n2. Load the cached documentation using `DocumentationCache.load()`.\n3. Create a new instance of `DocumentationBuilder` and call its `build` method to build the documentation.\n4. Create a new instance of `DocumentationGenerator` and call its `make` method to generate the final documentation output.\n5. Log a message to the console indicating that the document generation is complete.\n\n## Usage\n\nTo use the `App` class, you need to create a new instance and call its `run` method with an optional configuration object. Here's an example:\n\n```javascript\nimport App from \"./App\";\n\nconst app = new App();\napp.run();\n```\n\n## Tips and Cautions\n\n- Write a description of the project in the project file (e.g., `package.json`).\n- If GPT generates incorrect documentation, the code is probably not clear for humans either. Try adjusting the code or adding a one-line comment to make the code clearer.\n- You can use `:::tip` or `:::danger` in your comments in your code files.\n\nFor example:\n\n```javascript\n// :::tip\n// This is a helpful tip.\n// :::\n\n// :::danger\n// This is a cautionary note.\n// :::\n```\n\nWhen the documentation is generated, these comments will be formatted as follows:\n\n:::tip\nThis is a helpful tip.\n:::\n\n:::danger\nThis is a cautionary note.\n:::",
		"isFolder": false,
		"updated": "2023-04-14T14:55:29.466Z",
		"sidebar_position": 0,
		"sidebar_label": "App.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"App.ts\"\r\nThe file name is: App.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport DocumentationBuilder from \"./documentation/DocumentationBuilder\";\r\nimport DocumentationCache from \"./documentation/DocumentationCache\";\r\nimport DocumentationGenerator from \"./documentation/DocumentationGenerator\";\r\nimport IProjectDocumentedSettings from \"./model/IProjectDocumentedSettings\";\r\nimport ConfigHelper from \"./config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\n\r\n/*\r\nAbout code-narrator\r\nThis application is installed with \"npm i code-narrator\", and executed either by npm run start or by using cli.\r\nWhen starting it will load up the configuration and cached documentation.\r\nThen it will go through the project code, reading the file & folder structure\r\nif the file or folder does not exist in the cache or the file has changed since last cached\r\ncode-narrator will send the code to GPT and ask for documentation in an .md format.\r\nWhen it receives the documentation, it writes it to the cache.\r\nWhen all files and folders have been parsed, then code-narrator creates the documentation from the cache\r\n\r\nThere are few rules to follow\r\n- Write description about the project in the project file (e.g. package.json)\r\n- If GPT generates wrong documentation, the code is probably not clear for humans either. Try adjusting code or adding one line comment to make code clearer\r\n- You can use :::tip or :::danger in you comments in your code files.\r\n */\r\nexport default class App {\r\n    static StartTime = new Date();\r\n    public async run(config? : Partial<ICodeNarratorConfig>) {\r\n        await ConfigHelper.load(config);\r\n        DocumentationCache.load();\r\n\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n\r\n\r\n        let generator = new DocumentationGenerator();\r\n        generator.make();\r\n\r\n        console.log('Done generating documents')\r\n    }\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "src\\App.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "cli.ts",
		"path": "src\\cli.ts",
		"folderPath": "src",
		"fileContent": "#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});",
		"documentation": "# cli.ts\n\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [getArgv](#getargv)\n  - [getConfig](#getconfig)\n- [Code Example](#code-example)\n\n## Usage\n\nTo use the CLI, run the following command in your terminal:\n\n```bash\n$ code-narrator [options]\n```\n\n## Methods\n\n### getArgv\n\nThis method is responsible for parsing command-line arguments using the `yargs` library. It returns an object containing the parsed arguments.\n\n### getConfig\n\nThis method takes the parsed command-line arguments as input and returns a user configuration object. It reads the configuration file specified by the user, validates it, and merges it with the default configuration.\n\n#### Parameters\n\n- `argv`: An object containing the parsed command-line arguments.\n\n## Code Example\n\nBelow is the content of the `cli.ts` file:\n\n```javascript\n#!/usr/bin/env node\n\nimport App from \"./App\";\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\nimport fs from \"fs\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport * as process from \"process\";\nimport CliHelper from \"./utils/CliHelper\";\n\n(async () => {\n\n    let cliHelper = new CliHelper()\n    const argv = await cliHelper.getArgv();\n    let userConfig = await cliHelper.getConfig(argv);\n\n    console.log('Starting code-narrator')\n\n    let app = new App();\n    await app.run(userConfig);\n\n})().catch((e: any) => {\n    console.error(e);\n});\n```\n\nIn this file, an instance of `CliHelper` is created, and its `getArgv` and `getConfig` methods are used to obtain the command-line arguments and user configuration, respectively. The main `App` class is then instantiated and executed with the user configuration.",
		"isFolder": false,
		"updated": "2023-04-14T14:56:52.453Z",
		"sidebar_position": 1,
		"sidebar_label": "cli.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"cli.ts\"\r\nThe file name is: cli.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});\r\n###\r\n"
			}
		],
		"id": "src\\cli.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "ConfigGenerator.ts",
		"path": "src\\config\\ConfigGenerator.ts",
		"folderPath": "src\\config",
		"fileContent": "import ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FolderStructure from \"../utils/FolderStructure\";\r\nimport OpenAIRepository from \"../repositories/OpenAIRepository\";\r\nimport Helper from \"../utils/Helper\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport * as process from \"process\";\r\n\r\nexport default class ConfigGenerator {\r\n\r\n    public static async generate(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<Partial<ICodeNarratorConfig>> {\r\n        console.log('Understanding project and auto generating code-narrator.config.js')\r\n        let config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n\r\n        let question = `Following is the folder structure. \r\n        Determine the type of project this is, code language and framework. \r\n        From that define for the project file, source path (where code is located), documentation path, test folder path\r\n        Return as json\r\n        {\r\n        project_file: string,\r\n        source_path: string,\r\n        documentation_path: string\r\n        test_path: string\r\n        }\r\n         Folders and files in root folder are\r\n        ###\r\n        ${foldersAndFiles}\r\n        `\r\n        let openAiRepository = new OpenAIRepository();\r\n        let response = await openAiRepository.queryQuestions([question]);\r\n        let jsons = Helper.getJsons(response.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error('Could not determine the project. You should set the config when calling ConfigHelper.load')\r\n        }\r\n\r\n        let json = jsons[0];\r\n        config.project_file = json.project_file ?? config.project_file;\r\n        config.source_path = json.source_path ?? config.source_path;\r\n        config.documentation_path = this.getDocPath(config, json);\r\n        config.test_path = json.test_path ?? config.test_path;\r\n\r\n        let projectFile = FileStructure.getContent(config.project_file)\r\n        let projectDetailQuestion = `Following is the project file (${config.project_file}). \r\nFrom the file determine the project name, entry file, cli file, repository url.\r\n        DO NOT makeup value for JSON property        \r\n        \r\n        ### project file starts ###\r\n        ${projectFile}\r\n        ### project file ends ###       \r\n         \r\n        Now that you know the project name, try to identify app-specific config files from the file list.\r\n        This does NOT include project config files(e.g. package.json) or configs for dependencies. \r\n        The app-specific config file should be something like project_name.config or project_name.json. \r\n        Do not include folders and DO NOT makeup value for JSON property\r\n           \r\n        ### folders and files starts ###\r\n        ${foldersAndFiles}\r\n        ### folders and files ends ###\r\n        \r\n        Return json \r\n        {\r\n        project_name: string,\r\n        entry_file: string,\r\n        cli_file: string,\r\n        config_files: string[]\r\n        repository_url : string\r\n        }\r\n        `\r\n        let projectDetailAnswer = await openAiRepository.queryQuestions([projectDetailQuestion]);\r\n\r\n        jsons = Helper.getJsons(projectDetailAnswer.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error(`Could not get project info. GPT answer:\r\n            ${projectDetailAnswer.answer}`)\r\n        }\r\n        json = jsons[0];\r\n        config.entry_file = json.entry_file ?? config.entry_file;\r\n        config.cli_file = json.cli_file ?? config.cli_file;\r\n        config.project_name = json.project_name ?? config.project_name;\r\n        config.config_files = json.config_files ?? config.config_files;\r\n        config.repository_url = json.repository_url ?? config.repository_url\r\n        config.include = [...config.config_files, config.source_path + \"/**/*\"]\r\n\r\n        let defaultConfig = {\r\n            entry_file: config.entry_file,\r\n            cli_file: config.cli_file,\r\n            project_name: config.project_name,\r\n            config_files: config.config_files,\r\n            repository_url: config.repository_url,\r\n            project_file: config.project_file,\r\n            source_path: config.source_path,\r\n            documentation_path: config.documentation_path,\r\n            test_path: config.test_path,\r\n            gptModel: config.gptModel,\r\n            include: config.include,\r\n            exclude: config.exclude\r\n        }\r\n        fs.writeFileSync(path.join(process.cwd(), 'code-narrator.json'), JSON.stringify(defaultConfig))\r\n\r\n        let questions = {\r\n            question1: question,\r\n            question2: projectDetailQuestion\r\n        }\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator'))\r\n        }\r\n\r\n        fs.writeFileSync(path.join(process.cwd(), '.code-narrator/config_questions.json'), JSON.stringify(questions))\r\n        return config;\r\n    }\r\n\r\n\r\n    private static getDocPath(config: ICodeNarratorConfig, json: any) {\r\n        if (json.documentation_path?.indexOf('.') != -1) return config.documentation_path;\r\n        return json.documentation_path ?? config.documentation_path\r\n    }\r\n}",
		"documentation": "# ConfigGenerator.ts\n\nThis document provides an in-depth explanation of the `ConfigGenerator.ts` file, which is a TypeScript code file. The file contains a class named `ConfigGenerator` that is responsible for generating a configuration object for the Code Narrator project. The configuration object is based on the project's folder structure, project file, and other relevant information.\n\n## Table of Contents\n\n- [Class: ConfigGenerator](#class-configgenerator)\n  - [Method: generate](#method-generate)\n  - [Method: getDocPath](#method-getdocpath)\n\n## Class: ConfigGenerator\n\nThe `ConfigGenerator` class is responsible for generating a configuration object for the Code Narrator project. It has two methods: `generate` and `getDocPath`.\n\n### Method: generate\n\nThe `generate` method is an asynchronous static method that takes an optional `projectConfig` parameter of type `Partial<ICodeNarratorConfig>` and returns a `Promise<Partial<ICodeNarratorConfig>>`. The method generates a configuration object based on the project's folder structure, project file, and other relevant information.\n\n#### Parameters\n\n- `projectConfig` (Optional): A partial configuration object of type `Partial<ICodeNarratorConfig>`.\n\n#### Example\n\n```typescript\nconst generatedConfig = await ConfigGenerator.generate(projectConfig);\n```\n\n### Method: getDocPath\n\nThe `getDocPath` method is a private static method that takes two parameters: `config` and `json`. It returns the documentation path for the project.\n\n#### Parameters\n\n- `config`: An object of type `ICodeNarratorConfig` representing the current configuration.\n- `json`: An object containing the JSON data extracted from the GPT-3 response.\n\n#### Example\n\n```typescript\nconst documentationPath = ConfigGenerator.getDocPath(config, json);\n```\n\n## Usage\n\nTo use the `ConfigGenerator` class, you can import it and call the `generate` method with an optional `projectConfig` parameter. The method will return a configuration object based on the project's folder structure, project file, and other relevant information.\n\n```typescript\nimport ConfigGenerator from \"./ConfigGenerator\";\n\nconst projectConfig = {\n  // Your partial configuration object\n};\n\nconst generatedConfig = await ConfigGenerator.generate(projectConfig);\n```\n\nThe `generate` method will analyze the project's folder structure and project file to determine the project type, code language, framework, and other relevant information. It will then generate a configuration object with the appropriate values for the project file, source path, documentation path, and test folder path.\n\nIf the method cannot determine the project's information, it will throw an error, and you should set the configuration manually when calling `ConfigHelper.load`.",
		"isFolder": false,
		"updated": "2023-04-14T14:58:32.524Z",
		"sidebar_position": 0,
		"sidebar_label": "ConfigGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigGenerator.ts\"\r\nThe file name is: ConfigGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FolderStructure from \"../utils/FolderStructure\";\r\nimport OpenAIRepository from \"../repositories/OpenAIRepository\";\r\nimport Helper from \"../utils/Helper\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport * as process from \"process\";\r\n\r\nexport default class ConfigGenerator {\r\n\r\n    public static async generate(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<Partial<ICodeNarratorConfig>> {\r\n        console.log('Understanding project and auto generating code-narrator.config.js')\r\n        let config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n\r\n        let question = `Following is the folder structure. \r\n        Determine the type of project this is, code language and framework. \r\n        From that define for the project file, source path (where code is located), documentation path, test folder path\r\n        Return as json\r\n        {\r\n        project_file: string,\r\n        source_path: string,\r\n        documentation_path: string\r\n        test_path: string\r\n        }\r\n         Folders and files in root folder are\r\n        ###\r\n        ${foldersAndFiles}\r\n        `\r\n        let openAiRepository = new OpenAIRepository();\r\n        let response = await openAiRepository.queryQuestions([question]);\r\n        let jsons = Helper.getJsons(response.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error('Could not determine the project. You should set the config when calling ConfigHelper.load')\r\n        }\r\n\r\n        let json = jsons[0];\r\n        config.project_file = json.project_file ?? config.project_file;\r\n        config.source_path = json.source_path ?? config.source_path;\r\n        config.documentation_path = this.getDocPath(config, json);\r\n        config.test_path = json.test_path ?? config.test_path;\r\n\r\n        let projectFile = FileStructure.getContent(config.project_file)\r\n        let projectDetailQuestion = `Following is the project file (${config.project_file}). \r\nFrom the file determine the project name, entry file, cli file, repository url.\r\n        DO NOT makeup value for JSON property        \r\n        \r\n        ### project file starts ###\r\n        ${projectFile}\r\n        ### project file ends ###       \r\n         \r\n        Now that you know the project name, try to identify app-specific config files from the file list.\r\n        This does NOT include project config files(e.g. package.json) or configs for dependencies. \r\n        The app-specific config file should be something like project_name.config or project_name.json. \r\n        Do not include folders and DO NOT makeup value for JSON property\r\n           \r\n        ### folders and files starts ###\r\n        ${foldersAndFiles}\r\n        ### folders and files ends ###\r\n        \r\n        Return json \r\n        {\r\n        project_name: string,\r\n        entry_file: string,\r\n        cli_file: string,\r\n        config_files: string[]\r\n        repository_url : string\r\n        }\r\n        `\r\n        let projectDetailAnswer = await openAiRepository.queryQuestions([projectDetailQuestion]);\r\n\r\n        jsons = Helper.getJsons(projectDetailAnswer.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error(`Could not get project info. GPT answer:\r\n            ${projectDetailAnswer.answer}`)\r\n        }\r\n        json = jsons[0];\r\n        config.entry_file = json.entry_file ?? config.entry_file;\r\n        config.cli_file = json.cli_file ?? config.cli_file;\r\n        config.project_name = json.project_name ?? config.project_name;\r\n        config.config_files = json.config_files ?? config.config_files;\r\n        config.repository_url = json.repository_url ?? config.repository_url\r\n        config.include = [...config.config_files, config.source_path + \"/**/*\"]\r\n\r\n        let defaultConfig = {\r\n            entry_file: config.entry_file,\r\n            cli_file: config.cli_file,\r\n            project_name: config.project_name,\r\n            config_files: config.config_files,\r\n            repository_url: config.repository_url,\r\n            project_file: config.project_file,\r\n            source_path: config.source_path,\r\n            documentation_path: config.documentation_path,\r\n            test_path: config.test_path,\r\n            gptModel: config.gptModel,\r\n            include: config.include,\r\n            exclude: config.exclude\r\n        }\r\n        fs.writeFileSync(path.join(process.cwd(), 'code-narrator.json'), JSON.stringify(defaultConfig))\r\n\r\n        let questions = {\r\n            question1: question,\r\n            question2: projectDetailQuestion\r\n        }\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator'))\r\n        }\r\n\r\n        fs.writeFileSync(path.join(process.cwd(), '.code-narrator/config_questions.json'), JSON.stringify(questions))\r\n        return config;\r\n    }\r\n\r\n\r\n    private static getDocPath(config: ICodeNarratorConfig, json: any) {\r\n        if (json.documentation_path?.indexOf('.') != -1) return config.documentation_path;\r\n        return json.documentation_path ?? config.documentation_path\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ConfigGenerator.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "ConfigHelper.ts",
		"path": "src\\config\\ConfigHelper.ts",
		"folderPath": "src\\config",
		"fileContent": "import * as dotnet from \"dotenv\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigGenerator from \"./ConfigGenerator\";\r\n\r\n/*\r\nref: ICodeNarratorConfig.ts\r\n */\r\nexport default class ConfigHelper {\r\n    static env: any;\r\n    static OpenAiKey : string;\r\n    static DocumentingProject: any;\r\n    static BuilderPlugins: any[] = [];\r\n    static DocumentationType = 'md';\r\n    static DocumentExtension = '.md';\r\n    static CacheFilePath = '.code-narrator/cache.json';\r\n    static config: ICodeNarratorConfig;\r\n\r\n    public static async load(projectConfig: Partial<ICodeNarratorConfig> = {}) {\r\n        dotnet.config()\r\n        ConfigHelper.env = process.env;\r\n        if (!ConfigHelper.env['OPENAI_API_KEY']) {\r\n            console.error('Missing OPENAI_API_KEY in .env file. Make sure to create .env file in your root and include OPENAI_API_KEY=Your_OpenAI_Key')\r\n            throw new Error('Missing OpenAI API key')\r\n        }\r\n        ConfigHelper.OpenAiKey = ConfigHelper.env['OPENAI_API_KEY']\r\n        this.config = DefaultSettings.get();\r\n\r\n        if (!projectConfig.project_file) {\r\n            projectConfig = await ConfigGenerator.generate(projectConfig);\r\n        }\r\n        this.config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n\r\n        if (!this.config.exclude.includes(`*${this.config.document_file_extension}`)) {\r\n            this.config.exclude.push(`*${this.config.document_file_extension}`)\r\n        }\r\n\r\n        ConfigHelper.DocumentingProject = this.config.documentation_path;\r\n        ConfigHelper.BuilderPlugins = this.config.builderPlugins;\r\n        ConfigHelper.DocumentExtension = this.config.document_file_extension ?? '.md';\r\n        ConfigHelper.DocumentationType = this.config.documentation_type ?? 'md'\r\n        if (ConfigHelper.DocumentExtension.indexOf('.') != 0) ConfigHelper.DocumentExtension = '.' + ConfigHelper.DocumentExtension;\r\n\r\n        ConfigHelper.CacheFilePath = this.config.cache_file ?? '.code-narrator/cache.json';\r\n    }\r\n\r\n\r\n}",
		"documentation": "# ConfigHelper.ts\n\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\n\n## Table of Contents\n\n- [Class: ConfigHelper](#class-confighelper)\n  - [Static Properties](#static-properties)\n  - [Method: load](#method-load)\n- [Examples](#examples)\n\n## Class: ConfigHelper\n\nThe `ConfigHelper` class is the main class in this module, and it provides several static properties and a `load` method for managing the project configuration.\n\n### Static Properties\n\n- `env`: An object containing the environment variables.\n- `OpenAiKey`: A string representing the OpenAI API key.\n- `DocumentingProject`: An object representing the project being documented.\n- `BuilderPlugins`: An array of builder plugins.\n- `DocumentationType`: A string representing the documentation type (default: 'md').\n- `DocumentExtension`: A string representing the document file extension (default: '.md').\n- `CacheFilePath`: A string representing the cache file path (default: '.code-narrator/cache.json').\n- `config`: An instance of the `ICodeNarratorConfig` interface.\n\n### Method: load\n\nThe `load` method is an asynchronous static method that takes an optional `projectConfig` parameter of type `Partial<ICodeNarratorConfig>`. This method is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\n\n#### Parameters\n\n- `projectConfig`: An optional object of type `Partial<ICodeNarratorConfig>` representing the project configuration.\n\n## Examples\n\nHere are some examples of how to use the `ConfigHelper` class:\n\n### Loading the Configuration\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n})();\n```\n\n### Accessing the OpenAI API Key\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.OpenAiKey);\n})();\n```\n\n### Accessing the Documenting Project\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.DocumentingProject);\n})();\n```\n\n### Accessing the Builder Plugins\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.BuilderPlugins);\n})();\n```\n\n### Accessing the Documentation Type\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.DocumentationType);\n})();\n```\n\n### Accessing the Document Extension\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.DocumentExtension);\n})();\n```\n\n### Accessing the Cache File Path\n\n```typescript\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load();\n  console.log(ConfigHelper.CacheFilePath);\n})();\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:00:24.038Z",
		"sidebar_position": 1,
		"sidebar_label": "ConfigHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigHelper.ts\"\r\nThe file name is: ConfigHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport * as dotnet from \"dotenv\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigGenerator from \"./ConfigGenerator\";\r\n\r\n/*\r\nref: ICodeNarratorConfig.ts\r\n */\r\nexport default class ConfigHelper {\r\n    static env: any;\r\n    static OpenAiKey : string;\r\n    static DocumentingProject: any;\r\n    static BuilderPlugins: any[] = [];\r\n    static DocumentationType = 'md';\r\n    static DocumentExtension = '.md';\r\n    static CacheFilePath = '.code-narrator/cache.json';\r\n    static config: ICodeNarratorConfig;\r\n\r\n    public static async load(projectConfig: Partial<ICodeNarratorConfig> = {}) {\r\n        dotnet.config()\r\n        ConfigHelper.env = process.env;\r\n        if (!ConfigHelper.env['OPENAI_API_KEY']) {\r\n            console.error('Missing OPENAI_API_KEY in .env file. Make sure to create .env file in your root and include OPENAI_API_KEY=Your_OpenAI_Key')\r\n            throw new Error('Missing OpenAI API key')\r\n        }\r\n        ConfigHelper.OpenAiKey = ConfigHelper.env['OPENAI_API_KEY']\r\n        this.config = DefaultSettings.get();\r\n\r\n        if (!projectConfig.project_file) {\r\n            projectConfig = await ConfigGenerator.generate(projectConfig);\r\n        }\r\n        this.config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n\r\n        if (!this.config.exclude.includes(`*${this.config.document_file_extension}`)) {\r\n            this.config.exclude.push(`*${this.config.document_file_extension}`)\r\n        }\r\n\r\n        ConfigHelper.DocumentingProject = this.config.documentation_path;\r\n        ConfigHelper.BuilderPlugins = this.config.builderPlugins;\r\n        ConfigHelper.DocumentExtension = this.config.document_file_extension ?? '.md';\r\n        ConfigHelper.DocumentationType = this.config.documentation_type ?? 'md'\r\n        if (ConfigHelper.DocumentExtension.indexOf('.') != 0) ConfigHelper.DocumentExtension = '.' + ConfigHelper.DocumentExtension;\r\n\r\n        ConfigHelper.CacheFilePath = this.config.cache_file ?? '.code-narrator/cache.json';\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\config\\ConfigHelper.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "DefaultSettings.ts",
		"path": "src\\config\\DefaultSettings.ts",
		"folderPath": "src\\config",
		"fileContent": "import ConfigurationBuilder from \"../documentation/plugins/builders/Configuration/ConfigurationBuilder\";\r\nimport FilesBuilder from \"../documentation/plugins/builders/Files/FilesBuilder\";\r\nimport FoldersBuilder from \"../documentation/plugins/builders/Folders/FoldersBuilder\";\r\nimport UserDefinedBuilder from \"../documentation/plugins/builders/UserDefined/UserDefinedBuilder\";\r\nimport DocusaurusGenerator from \"../documentation/plugins/generators/Docusaurus/DocusaurusGenerator\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport HowToBuilder from \"../documentation/plugins/builders/Howto/HowToBuilder\";\r\n\r\nexport default class DefaultSettings {\r\n\r\n    public static get() {\r\n\r\n        return {\r\n            config_files: [\"code-narrator.config.ts\"],\r\n            project_file: \"package.json\",//if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n            entry_file: \"./src/App.ts\",\r\n            cli_file: \"./src/cli.ts\",\r\n            project_path: \"./\",\r\n            source_path: \"./src\",\r\n            documentation_path: \"./docs\",\r\n            test_path: \"./test\",\r\n            exclude: this.getFilesToExclude(),\r\n            readmeRoot: true,\r\n            repository_url : \"https://github.com/ingig/code-narrator\",\r\n\r\n            //Order of plugins matter, ConfigurationGenerator runs first to get overview of the project.\r\n            builderPlugins: [\r\n                ConfigurationBuilder, FilesBuilder, FoldersBuilder, UserDefinedBuilder,\r\n                HowToBuilder\r\n            ],\r\n            gptSystemCommands: [\r\n                'Act as a documentation expert for software',\r\n                'If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly',\r\n                `Return your answer in {DocumentationType} format`,\r\n                `If you notice any secret information, replace it with ***** in your response`\r\n            ],\r\n            documentation_type: 'md', //What format should be generated, e.g. md, sphinx\r\n            document_file_extension: \".md\",\r\n            rootFileName : 'README.md',\r\n            cache_file: '.code-narrator/cache.json', //location of the cache file. :::warning '.code-narrator/cache.json' should be committed into git.\r\n            gptModel : 'gpt-4'\r\n        } as ICodeNarratorConfig\r\n    }\r\n\r\n    private static getFilesToExclude() {\r\n        let gitIgnore = FileStructure.getContent(path.join(process.cwd(), '.gitignore')).trim().split('\\n');\r\n        gitIgnore = gitIgnore.map(item => item.trim())\r\n        let defaults = ['/node_modules', '.env', '/.idea', '/.git',\r\n            '.gitignore', '/.code-narrator', '/dist', '/build', 'package-lock.json']\r\n\r\n        const uniqueArray = [...new Set([...gitIgnore, ...defaults])];\r\n        return uniqueArray;\r\n    }\r\n}",
		"documentation": "# DefaultSettings.ts\n\nThis is a TypeScript code file that defines the `DefaultSettings` class. The class is responsible for providing default settings for the Code Narrator application. It includes various configurations, such as file paths, plugin settings, and GPT model settings.\n\n## Usage\n\nTo use the `DefaultSettings` class, simply import it and call the `get()` method to retrieve the default settings.\n\n```typescript\nimport DefaultSettings from \"./DefaultSettings\";\n\nconst settings = DefaultSettings.get();\n```\n\n## Methods\n\n### get()\n\nThis method returns an object containing the default settings for the Code Narrator application.\n\n```typescript\npublic static get(): ICodeNarratorConfig\n```\n\n#### Returns\n\nAn object of type `ICodeNarratorConfig` containing the default settings.\n\n### getFilesToExclude()\n\nThis private method returns an array of file paths and patterns that should be excluded from the documentation process.\n\n```typescript\nprivate static getFilesToExclude(): string[]\n```\n\n#### Returns\n\nAn array of strings containing file paths and patterns to exclude.\n\n## Configuration\n\nThe `DefaultSettings` class provides the following default settings:\n\n- `config_files`: An array of configuration file names.\n- `project_file`: The main project file name.\n- `entry_file`: The entry point file for the application.\n- `cli_file`: The command-line interface file for the application.\n- `project_path`: The root path of the project.\n- `source_path`: The path to the source code.\n- `documentation_path`: The path to the documentation files.\n- `test_path`: The path to the test files.\n- `exclude`: An array of file paths and patterns to exclude from the documentation process.\n- `readmeRoot`: A boolean indicating whether to include a README file at the root of the documentation.\n- `repository_url`: The URL of the project's repository.\n- `builderPlugins`: An array of builder plugins to use for generating documentation.\n- `gptSystemCommands`: An array of GPT system commands for generating documentation.\n- `documentation_type`: The format of the generated documentation (e.g., 'md' for Markdown).\n- `document_file_extension`: The file extension for the generated documentation files.\n- `rootFileName`: The file name for the root documentation file.\n- `cache_file`: The path to the cache file. :::warning The cache file should be committed to the Git repository.\n- `gptModel`: The GPT model to use for generating documentation (e.g., 'gpt-4').\n\n## Technical Concepts\n\n### ICodeNarratorConfig\n\n`ICodeNarratorConfig` is an interface that defines the structure of the configuration object used by the Code Narrator application. It includes properties for file paths, plugin settings, and GPT model settings.\n\n### FileStructure\n\n`FileStructure` is a utility class that provides methods for working with the file system, such as reading and writing files.\n\n### Builder Plugins\n\nBuilder plugins are classes that are responsible for generating documentation for specific aspects of a project, such as configuration files, source code files, and user-defined content. The `DefaultSettings` class includes a default set of builder plugins:\n\n- `ConfigurationBuilder`\n- `FilesBuilder`\n- `FoldersBuilder`\n- `UserDefinedBuilder`\n- `HowToBuilder`\n\n### GPT System Commands\n\nGPT system commands are instructions that guide the GPT model in generating documentation. The `DefaultSettings` class includes a default set of GPT system commands:\n\n- 'Act as a documentation expert for software'\n- 'If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly'\n- 'Return your answer in {DocumentationType} format'\n- 'If you notice any secret information, replace it with ***** in your response'",
		"isFolder": false,
		"updated": "2023-04-15T08:57:31.743Z",
		"sidebar_position": 2,
		"sidebar_label": "DefaultSettings.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DefaultSettings.ts\"\r\nThe file name is: DefaultSettings.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ConfigurationBuilder from \"../documentation/plugins/builders/Configuration/ConfigurationBuilder\";\r\nimport FilesBuilder from \"../documentation/plugins/builders/Files/FilesBuilder\";\r\nimport FoldersBuilder from \"../documentation/plugins/builders/Folders/FoldersBuilder\";\r\nimport UserDefinedBuilder from \"../documentation/plugins/builders/UserDefined/UserDefinedBuilder\";\r\nimport DocusaurusGenerator from \"../documentation/plugins/generators/Docusaurus/DocusaurusGenerator\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport HowToBuilder from \"../documentation/plugins/builders/Howto/HowToBuilder\";\r\n\r\nexport default class DefaultSettings {\r\n\r\n    public static get() {\r\n\r\n        return {\r\n            config_files: [\"code-narrator.config.ts\"],\r\n            project_file: \"package.json\",//if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n            entry_file: \"./src/App.ts\",\r\n            cli_file: \"./src/cli.ts\",\r\n            project_path: \"./\",\r\n            source_path: \"./src\",\r\n            documentation_path: \"./docs\",\r\n            test_path: \"./test\",\r\n            exclude: this.getFilesToExclude(),\r\n            readmeRoot: true,\r\n            repository_url : \"https://github.com/ingig/code-narrator\",\r\n\r\n            //Order of plugins matter, ConfigurationGenerator runs first to get overview of the project.\r\n            builderPlugins: [\r\n                ConfigurationBuilder, FilesBuilder, FoldersBuilder, UserDefinedBuilder,\r\n                HowToBuilder\r\n            ],\r\n            gptSystemCommands: [\r\n                'Act as a documentation expert for software',\r\n                'If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly',\r\n                `Return your answer in {DocumentationType} format`,\r\n                `If you notice any secret information, replace it with ***** in your response`\r\n            ],\r\n            documentation_type: 'md', //What format should be generated, e.g. md, sphinx\r\n            document_file_extension: \".md\",\r\n            rootFileName : 'README.md',\r\n            cache_file: '.code-narrator/cache.json', //location of the cache file. :::warning '.code-narrator/cache.json' should be committed into git.\r\n            gptModel : 'gpt-4'\r\n        } as ICodeNarratorConfig\r\n    }\r\n\r\n    private static getFilesToExclude() {\r\n        let gitIgnore = FileStructure.getContent(path.join(process.cwd(), '.gitignore')).trim().split('\\n');\r\n        gitIgnore = gitIgnore.map(item => item.trim())\r\n        let defaults = ['/node_modules', '.env', '/.idea', '/.git',\r\n            '.gitignore', '/.code-narrator', '/dist', '/build', 'package-lock.json']\r\n\r\n        const uniqueArray = [...new Set([...gitIgnore, ...defaults])];\r\n        return uniqueArray;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\DefaultSettings.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "IBuilder.ts",
		"path": "src\\config\\IBuilder.ts",
		"folderPath": "src\\config",
		"fileContent": "export default interface IBuilder {\r\n    type: BuilderType\r\n    name: string;\r\n    title: string;\r\n    template: string;\r\n    args: any;\r\n    files: IFile[];\r\n    path : string;\r\n    sidebarPosition: number;\r\n    sidebarLabel: string;\r\n}\r\ntype BuilderType = 'howto' | 'README' | 'custom';\r\n\r\nexport interface IFile {\r\n    path: string;\r\n    JSONPath: string[];\r\n    extract : string[];\r\n}\r\n\r\nexport interface ISitemap {\r\n    enable : boolean;\r\n    url : string;\r\n}",
		"documentation": "# IBuilder.ts\n\nThis TypeScript file defines the `IBuilder` interface, which is used to represent a builder object in the application. The file also includes the `BuilderType` type definition, and two additional interfaces: `IFile` and `ISitemap`.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [IBuilder Interface](#ibuilder-interface)\n- [BuilderType Type](#buildertype-type)\n- [IFile Interface](#ifile-interface)\n- [ISitemap Interface](#isitemap-interface)\n\n## Overview\n\nThe `IBuilder` interface is designed to provide a structure for builder objects, which are used to generate documentation or other content based on templates and input data. The `BuilderType` type is used to specify the type of builder, while the `IFile` and `ISitemap` interfaces define the structure of file and sitemap objects, respectively.\n\n## IBuilder Interface\n\nThe `IBuilder` interface contains the following properties:\n\n- `type`: The type of the builder, represented by the `BuilderType` type.\n- `name`: A unique string identifier for the builder.\n- `title`: A human-readable string title for the builder.\n- `template`: A string representing the template file used by the builder.\n- `args`: An object containing any additional arguments required by the builder.\n- `files`: An array of `IFile` objects representing the files associated with the builder.\n- `path`: A string representing the output path for the generated content.\n- `sidebarPosition`: A number representing the position of the builder in the sidebar.\n- `sidebarLabel`: A string representing the label for the builder in the sidebar.\n\n## BuilderType Type\n\nThe `BuilderType` type is a union type that can take one of the following values:\n\n- `'howto'`: Represents a how-to guide builder.\n- `'README'`: Represents a README file builder.\n- `'custom'`: Represents a custom builder.\n\n## IFile Interface\n\nThe `IFile` interface contains the following properties:\n\n- `path`: A string representing the file path.\n- `JSONPath`: An array of strings representing the JSON path to the data used by the builder.\n- `extract`: An array of strings representing the properties to be extracted from the data.\n\n## ISitemap Interface\n\nThe `ISitemap` interface contains the following properties:\n\n- `enable`: A boolean value indicating whether the sitemap feature is enabled.\n- `url`: A string representing the URL of the sitemap.\n\n### Example Usage\n\n```typescript\nimport IBuilder, { IFile, ISitemap } from './IBuilder';\n\nconst builder: IBuilder = {\n  type: 'howto',\n  name: 'exampleBuilder',\n  title: 'Example Builder',\n  template: 'exampleTemplate.html',\n  args: { exampleArg: 'value' },\n  files: [\n    {\n      path: 'exampleFile.json',\n      JSONPath: ['data', 'example'],\n      extract: ['property1', 'property2'],\n    },\n  ],\n  path: 'output/',\n  sidebarPosition: 1,\n  sidebarLabel: 'Example',\n};\n\nconst sitemap: ISitemap = {\n  enable: true,\n  url: 'https://example.com/sitemap.xml',\n};\n```",
		"isFolder": false,
		"updated": "2023-04-15T09:13:50.307Z",
		"sidebar_position": 3,
		"sidebar_label": "IBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"IBuilder.ts\"\r\nThe file name is: IBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default interface IBuilder {\r\n    type: BuilderType\r\n    name: string;\r\n    title: string;\r\n    template: string;\r\n    args: any;\r\n    files: IFile[];\r\n    path : string;\r\n    sidebarPosition: number;\r\n    sidebarLabel: string;\r\n}\r\ntype BuilderType = 'howto' | 'README' | 'custom';\r\n\r\nexport interface IFile {\r\n    path: string;\r\n    JSONPath: string[];\r\n    extract : string[];\r\n}\r\n\r\nexport interface ISitemap {\r\n    enable : boolean;\r\n    url : string;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\IBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "ICodeNarratorConfig.ts",
		"path": "src\\config\\ICodeNarratorConfig.ts",
		"folderPath": "src\\config",
		"fileContent": "import IBuilder, {ISitemap} from \"./IBuilder\";\r\n\r\nexport default interface ICodeNarratorConfig {\r\n    project_name : string;\r\n    repository_url : string;\r\n    project_file: string;\r\n    config_files: string[]; //if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n    entry_file: string;\r\n    cli_file: string;\r\n    project_path: string;\r\n    source_path: string;\r\n    documentation_path: string;\r\n    test_path: string;\r\n    exclude : string[];\r\n    readmeRoot: boolean;\r\n    builderPlugins: any[]\r\n    generatorPlugin: any[]\r\n    gptSystemCommands: string[]\r\n    documentation_type: string\r\n    document_file_extension: string\r\n    rootFileName : string;\r\n    cache_file: string;\r\n    gptModel : string;\r\n    builders : IBuilder[]\r\n    include : string[];\r\n    sitemap : ISitemap;\r\n}",
		"documentation": "# ICodeNarratorConfig.ts\n\nThis TypeScript file defines the `ICodeNarratorConfig` interface, which is used to configure the Code Narrator application. The interface contains various properties that are essential for setting up and customizing the behavior of the application.\n\n## Interface Properties\n\nThe `ICodeNarratorConfig` interface contains the following properties:\n\n- `project_name: string`: The name of the project.\n- `repository_url: string`: The URL of the project's repository.\n- `project_file: string`: The main project file.\n- `config_files: string[]`: An array of configuration files for the application (e.g., \"code-narrator.config.ts\").\n- `entry_file: string`: The entry point file for the application.\n- `cli_file: string`: The command-line interface file for the application.\n- `project_path: string`: The path to the project directory.\n- `source_path: string`: The path to the source code directory.\n- `documentation_path: string`: The path to the documentation directory.\n- `test_path: string`: The path to the test directory.\n- `exclude: string[]`: An array of file patterns to exclude from the documentation generation process.\n- `readmeRoot: boolean`: A flag indicating whether to include the README file at the root of the documentation.\n- `builderPlugins: any[]`: An array of builder plugins to use for generating the documentation.\n- `generatorPlugin: any[]`: An array of generator plugins to use for generating the documentation.\n- `gptSystemCommands: string[]`: An array of GPT system commands to use for generating the documentation.\n- `documentation_type: string`: The type of documentation to generate (e.g., \"md\" for Markdown).\n- `document_file_extension: string`: The file extension for the generated documentation files.\n- `rootFileName: string`: The name of the root file for the documentation.\n- `cache_file: string`: The cache file used for storing intermediate results during documentation generation.\n- `gptModel: string`: The GPT model to use for generating the documentation.\n- `builders: IBuilder[]`: An array of builder instances to use for generating the documentation.\n- `include: string[]`: An array of file patterns to include in the documentation generation process.\n- `sitemap: ISitemap`: The sitemap configuration for the generated documentation.\n\n## Usage Example\n\nTo use the `ICodeNarratorConfig` interface, you can create a configuration object that implements the interface and provide it to the Code Narrator application. Here's an example:\n\n```typescript\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\n\nconst config: ICodeNarratorConfig = {\n  project_name: \"My Project\",\n  repository_url: \"https://github.com/user/my-project\",\n  project_file: \"my-project.ts\",\n  config_files: [\"code-narrator.config.ts\"],\n  entry_file: \"index.ts\",\n  cli_file: \"cli.ts\",\n  project_path: \"/path/to/my-project\",\n  source_path: \"/path/to/my-project/src\",\n  documentation_path: \"/path/to/my-project/docs\",\n  test_path: \"/path/to/my-project/test\",\n  exclude: [\"**/*.spec.ts\"],\n  readmeRoot: true,\n  builderPlugins: [],\n  generatorPlugin: [],\n  gptSystemCommands: [],\n  documentation_type: \"md\",\n  document_file_extension: \".md\",\n  rootFileName: \"README.md\",\n  cache_file: \".cache\",\n  gptModel: \"gpt-3\",\n  builders: [],\n  include: [\"**/*.ts\"],\n  sitemap: {\n    include: [\"**/*.md\"],\n    exclude: [\"**/node_modules/**\"],\n  },\n};\n\n// Pass the config object to the Code Narrator application\n```\n\nThis example demonstrates how to create a configuration object that implements the `ICodeNarratorConfig` interface and provides the necessary properties for the Code Narrator application to generate documentation for a TypeScript project.",
		"isFolder": false,
		"updated": "2023-04-15T09:15:45.215Z",
		"sidebar_position": 4,
		"sidebar_label": "ICodeNarratorConfig.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ICodeNarratorConfig.ts\"\r\nThe file name is: ICodeNarratorConfig.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport IBuilder, {ISitemap} from \"./IBuilder\";\r\n\r\nexport default interface ICodeNarratorConfig {\r\n    project_name : string;\r\n    repository_url : string;\r\n    project_file: string;\r\n    config_files: string[]; //if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n    entry_file: string;\r\n    cli_file: string;\r\n    project_path: string;\r\n    source_path: string;\r\n    documentation_path: string;\r\n    test_path: string;\r\n    exclude : string[];\r\n    readmeRoot: boolean;\r\n    builderPlugins: any[]\r\n    generatorPlugin: any[]\r\n    gptSystemCommands: string[]\r\n    documentation_type: string\r\n    document_file_extension: string\r\n    rootFileName : string;\r\n    cache_file: string;\r\n    gptModel : string;\r\n    builders : IBuilder[]\r\n    include : string[];\r\n    sitemap : ISitemap;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ICodeNarratorConfig.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "Document.ts",
		"path": "src\\documentation\\Document.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport Helper from \"../utils/Helper\";\r\nimport * as path from 'path';\r\n\r\nexport default class Document {\r\n\r\n    id : string;\r\n    name = '';\r\n    path = '';\r\n    folderPath = '';\r\n    fileContent = '';\r\n    documentation = '';\r\n    isFolder = false;\r\n    updated : Date = new Date();\r\n    sidebar_position? : number = undefined;\r\n    sidebar_label? : string = undefined;\r\n    init = false;\r\n    postInit = false;\r\n    generator: string = '';\r\n    saveToPath = '';\r\n    data : any;\r\n    documentation_type = 'md'\r\n    question = '';\r\n    requestMessages : any[] = [];\r\n    lastTouch : Date;\r\n\r\n    constructor(name: string, filePath: string, folderPath : string, updated : Date, sidebar_position? : number, sidebar_label? : string) {\r\n        this.name = name;\r\n        let project_path = process.cwd()\r\n        this.path = path.relative(project_path, filePath);\r\n        this.saveToPath = this.path;\r\n        this.id = (this.path) ? Document.getId(this.path) : Document.getId(name);\r\n        this.folderPath = folderPath;\r\n        this.isFolder = (filePath == folderPath);\r\n        this.updated = updated;\r\n        this.sidebar_position = sidebar_position;\r\n        this.sidebar_label = sidebar_label ?? Helper.upperFirstLetter(name);\r\n        if (!this.isFolder && fs.existsSync(filePath)) {\r\n            this.fileContent = fs.readFileSync(filePath).toString();\r\n        }\r\n        this.lastTouch = new Date();\r\n    }\r\n\r\n    public static getId(path: string) {\r\n        return path;\r\n    }\r\n\r\n\r\n}",
		"documentation": "# Document.ts\n\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Constructor](#constructor)\n- [Methods](#methods)\n  - [getId](#getid)\n\n## Class Definition\n\nThe `Document` class has the following properties:\n\n- `id`: A unique identifier for the document.\n- `name`: The name of the document.\n- `path`: The relative path of the document.\n- `folderPath`: The path of the folder containing the document.\n- `fileContent`: The content of the document file.\n- `documentation`: The documentation associated with the document.\n- `isFolder`: A boolean indicating if the document is a folder.\n- `updated`: A `Date` object representing the last update time of the document.\n- `sidebar_position`: An optional number representing the position of the document in the sidebar.\n- `sidebar_label`: An optional string representing the label of the document in the sidebar.\n- `init`: A boolean indicating if the document has been initialized.\n- `postInit`: A boolean indicating if the document has been post-initialized.\n- `generator`: A string representing the generator used for the document.\n- `saveToPath`: The path where the document should be saved.\n- `data`: Any additional data associated with the document.\n- `documentation_type`: The type of documentation, default is 'md'.\n- `question`: A string representing a question related to the document.\n- `requestMessages`: An array of request messages.\n- `lastTouch`: A `Date` object representing the last time the document was touched.\n\n## Constructor\n\nThe constructor of the `Document` class takes the following parameters:\n\n- `name`: The name of the document.\n- `filePath`: The path of the document file.\n- `folderPath`: The path of the folder containing the document.\n- `updated`: A `Date` object representing the last update time of the document.\n- `sidebar_position?`: An optional number representing the position of the document in the sidebar.\n- `sidebar_label?`: An optional string representing the label of the document in the sidebar.\n\nThe constructor initializes the properties of the `Document` class and reads the file content if the document is not a folder and the file exists.\n\n## Methods\n\n### getId\n\nThe `getId` method is a static method that takes a `path` parameter and returns the path as the unique identifier for the document.\n\n```typescript\npublic static getId(path: string) {\n    return path;\n}\n```\n\nUsage:\n\n```typescript\nconst documentId = Document.getId(\"path/to/document\");\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:08:16.963Z",
		"sidebar_position": 0,
		"sidebar_label": "Document.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Document.ts\"\r\nThe file name is: Document.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport Helper from \"../utils/Helper\";\r\nimport * as path from 'path';\r\n\r\nexport default class Document {\r\n\r\n    id : string;\r\n    name = '';\r\n    path = '';\r\n    folderPath = '';\r\n    fileContent = '';\r\n    documentation = '';\r\n    isFolder = false;\r\n    updated : Date = new Date();\r\n    sidebar_position? : number = undefined;\r\n    sidebar_label? : string = undefined;\r\n    init = false;\r\n    postInit = false;\r\n    generator: string = '';\r\n    saveToPath = '';\r\n    data : any;\r\n    documentation_type = 'md'\r\n    question = '';\r\n    requestMessages : any[] = [];\r\n    lastTouch : Date;\r\n\r\n    constructor(name: string, filePath: string, folderPath : string, updated : Date, sidebar_position? : number, sidebar_label? : string) {\r\n        this.name = name;\r\n        let project_path = process.cwd()\r\n        this.path = path.relative(project_path, filePath);\r\n        this.saveToPath = this.path;\r\n        this.id = (this.path) ? Document.getId(this.path) : Document.getId(name);\r\n        this.folderPath = folderPath;\r\n        this.isFolder = (filePath == folderPath);\r\n        this.updated = updated;\r\n        this.sidebar_position = sidebar_position;\r\n        this.sidebar_label = sidebar_label ?? Helper.upperFirstLetter(name);\r\n        if (!this.isFolder && fs.existsSync(filePath)) {\r\n            this.fileContent = fs.readFileSync(filePath).toString();\r\n        }\r\n        this.lastTouch = new Date();\r\n    }\r\n\r\n    public static getId(path: string) {\r\n        return path;\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\Document.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationBuilder.ts",
		"path": "src\\documentation\\DocumentationBuilder.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import OpenAIRepository from \"../repositories/OpenAIRepository\";\r\nimport BaseBuilder from \"./plugins/builders/BaseBuilder\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\n\r\nexport default class DocumentationBuilder {\r\n    openAIRepository: OpenAIRepository;\r\n    projectPath : string;\r\n    constructor() {\r\n        this.openAIRepository = new OpenAIRepository();\r\n        this.projectPath = __dirname;\r\n    }\r\n\r\n    public async build() {\r\n        let plugins = ConfigHelper.BuilderPlugins;\r\n        for (let i=0;i<plugins.length;i++) {\r\n            let generator = new plugins[i]() as BaseBuilder;\r\n            await generator.generate();\r\n        }\r\n    }\r\n\r\n}",
		"documentation": "# DocumentationBuilder.ts\n\nThis is a TypeScript code file that defines a class called `DocumentationBuilder`. The purpose of this class is to generate documentation for a project using various builder plugins. The class imports necessary dependencies and manages the process of building documentation using the specified plugins.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n  - [build](#build)\n- [Parameters](#parameters)\n\n## Class Description\n\nThe `DocumentationBuilder` class is responsible for generating documentation for a project. It uses the `OpenAIRepository` to interact with the OpenAI API and fetch relevant information. The class also imports `BaseBuilder` as a base class for the builder plugins and uses `ConfigHelper` to access the configuration settings.\n\n## Examples\n\nTo use the `DocumentationBuilder` class, you can create an instance and call the `build` method:\n\n```typescript\nimport DocumentationBuilder from \"./DocumentationBuilder\";\n\nconst docBuilder = new DocumentationBuilder();\ndocBuilder.build();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method initializes the `DocumentationBuilder` instance. It sets up the `openAIRepository` and `projectPath` properties.\n\n```typescript\nconstructor() {\n    this.openAIRepository = new OpenAIRepository();\n    this.projectPath = __dirname;\n}\n```\n\n### build\n\nThe `build` method is an asynchronous method that iterates through the configured builder plugins and generates documentation using each plugin. It creates an instance of each plugin and calls the `generate` method on it.\n\n```typescript\npublic async build() {\n    let plugins = ConfigHelper.BuilderPlugins;\n    for (let i=0;i<plugins.length;i++) {\n        let generator = new plugins[i]() as BaseBuilder;\n        await generator.generate();\n    }\n}\n```\n\n## Parameters\n\nThere are no parameters in the methods of the `DocumentationBuilder` class. However, the class has two properties:\n\n- `openAIRepository`: An instance of the `OpenAIRepository` class, which is used to interact with the OpenAI API.\n- `projectPath`: A string representing the path of the project directory.",
		"isFolder": false,
		"updated": "2023-04-14T15:09:36.884Z",
		"sidebar_position": 1,
		"sidebar_label": "DocumentationBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationBuilder.ts\"\r\nThe file name is: DocumentationBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport OpenAIRepository from \"../repositories/OpenAIRepository\";\r\nimport BaseBuilder from \"./plugins/builders/BaseBuilder\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\n\r\nexport default class DocumentationBuilder {\r\n    openAIRepository: OpenAIRepository;\r\n    projectPath : string;\r\n    constructor() {\r\n        this.openAIRepository = new OpenAIRepository();\r\n        this.projectPath = __dirname;\r\n    }\r\n\r\n    public async build() {\r\n        let plugins = ConfigHelper.BuilderPlugins;\r\n        for (let i=0;i<plugins.length;i++) {\r\n            let generator = new plugins[i]() as BaseBuilder;\r\n            await generator.generate();\r\n        }\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationCache.ts",
		"path": "src\\documentation\\DocumentationCache.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport Document from \"../documentation/Document\";\r\nimport path from \"path\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\n\r\n/*\r\n:::danger Make sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\r\n */\r\nexport default class DocumentationCache {\r\n\r\n    static Documents : Document[] | null = null;\r\n\r\n    private constructor() {\r\n        if (fs.existsSync(ConfigHelper.CacheFilePath)) {\r\n            let str = fs.readFileSync(ConfigHelper.CacheFilePath).toString();\r\n            DocumentationCache.Documents = JSON.parse(str) as Document[];\r\n        } else {\r\n            console.log(`dirname:${path.dirname(ConfigHelper.CacheFilePath)}`)\r\n            fs.mkdirSync(path.dirname(ConfigHelper.CacheFilePath), {recursive: true})\r\n            fs.writeFileSync(ConfigHelper.CacheFilePath, \"[]\");\r\n            DocumentationCache.Documents = [];\r\n        }\r\n    }\r\n\r\n    public static load() {\r\n        new DocumentationCache();\r\n    }\r\n    public static getIndex(id : string) : number {\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].id == id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public static get(path: string) : Document | undefined {\r\n        let id = Document.getId(path);\r\n        let idx = this.getIndex(id);\r\n        if (!DocumentationCache.Documents || idx == -1) return;\r\n\r\n        let doc = DocumentationCache.Documents[idx];\r\n        doc.lastTouch = App.StartTime;\r\n        DocumentationCache.set(doc);\r\n        return doc;\r\n    }\r\n    static remove(document : Document) {\r\n        let idx = DocumentationCache.getIndex(Document.getId(document.path))\r\n        if (idx != -1 && DocumentationCache.Documents) {\r\n            delete DocumentationCache.Documents[idx];\r\n        }\r\n        let docPath = ConfigHelper.config.documentation_path;\r\n        let filePath = path.join(docPath, document.path);\r\n        if (fs.existsSync(filePath)) {\r\n            fs.rmSync(filePath)\r\n        }\r\n\r\n    }\r\n\r\n    static set(document: Document) {\r\n        let idx = this.getIndex(document.id);\r\n        if (idx == -1) {\r\n            DocumentationCache.Documents?.push(document);\r\n        } else {\r\n            DocumentationCache.Documents![idx] = document;\r\n        }\r\n        let content = JSON.stringify(DocumentationCache.Documents, null,'\\t');\r\n\r\n        fs.writeFileSync(ConfigHelper.CacheFilePath, content);\r\n    }\r\n\r\n    static getByFolderPath(path: string) {\r\n        let suggestions : Document[] = [];\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].folderPath == path) {\r\n                suggestions.push(DocumentationCache.Documents[i])\r\n            }\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n    static getProjectInfo() {\r\n\r\n    }\r\n}",
		"documentation": "# DocumentationCache.ts\n\nThis is a TypeScript code file that provides a class named `DocumentationCache`. The class is responsible for managing a cache of `Document` objects, which represent documentation files. The cache is stored in a JSON file, and the class provides methods for loading, getting, setting, and removing documents from the cache.\n\n## Usage\n\nTo use the `DocumentationCache` class, first call the `load()` method to initialize the cache. Then, you can use the `get()`, `set()`, `remove()`, and `getByFolderPath()` methods to interact with the cache.\n\n## Methods\n\n### load()\n\nThis static method initializes the `DocumentationCache` by reading the cache file from disk and parsing its contents into an array of `Document` objects. If the cache file does not exist, it creates an empty cache file.\n\n### getIndex(id: string): number\n\nThis static method takes a document ID as a parameter and returns the index of the document with the given ID in the cache. If the document is not found, it returns -1.\n\n### get(path: string): Document | undefined\n\nThis static method takes a file path as a parameter and returns the `Document` object associated with the given path. If the document is not found in the cache, it returns `undefined`.\n\n### remove(document: Document)\n\nThis static method takes a `Document` object as a parameter and removes it from the cache. It also deletes the corresponding documentation file from the file system.\n\n### set(document: Document)\n\nThis static method takes a `Document` object as a parameter and adds or updates it in the cache. The cache file is then updated with the new contents.\n\n### getByFolderPath(path: string)\n\nThis static method takes a folder path as a parameter and returns an array of `Document` objects that are located within the specified folder.\n\n### getProjectInfo()\n\nThis static method is currently empty and does not perform any actions.\n\n## Caution\n\n:::danger\nMake sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\n:::",
		"isFolder": false,
		"updated": "2023-04-14T15:10:47.408Z",
		"sidebar_position": 2,
		"sidebar_label": "DocumentationCache.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationCache.ts\"\r\nThe file name is: DocumentationCache.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport Document from \"../documentation/Document\";\r\nimport path from \"path\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\n\r\n/*\r\n:::danger Make sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\r\n */\r\nexport default class DocumentationCache {\r\n\r\n    static Documents : Document[] | null = null;\r\n\r\n    private constructor() {\r\n        if (fs.existsSync(ConfigHelper.CacheFilePath)) {\r\n            let str = fs.readFileSync(ConfigHelper.CacheFilePath).toString();\r\n            DocumentationCache.Documents = JSON.parse(str) as Document[];\r\n        } else {\r\n            console.log(`dirname:${path.dirname(ConfigHelper.CacheFilePath)}`)\r\n            fs.mkdirSync(path.dirname(ConfigHelper.CacheFilePath), {recursive: true})\r\n            fs.writeFileSync(ConfigHelper.CacheFilePath, \"[]\");\r\n            DocumentationCache.Documents = [];\r\n        }\r\n    }\r\n\r\n    public static load() {\r\n        new DocumentationCache();\r\n    }\r\n    public static getIndex(id : string) : number {\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].id == id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public static get(path: string) : Document | undefined {\r\n        let id = Document.getId(path);\r\n        let idx = this.getIndex(id);\r\n        if (!DocumentationCache.Documents || idx == -1) return;\r\n\r\n        let doc = DocumentationCache.Documents[idx];\r\n        doc.lastTouch = App.StartTime;\r\n        DocumentationCache.set(doc);\r\n        return doc;\r\n    }\r\n    static remove(document : Document) {\r\n        let idx = DocumentationCache.getIndex(Document.getId(document.path))\r\n        if (idx != -1 && DocumentationCache.Documents) {\r\n            delete DocumentationCache.Documents[idx];\r\n        }\r\n        let docPath = ConfigHelper.config.documentation_path;\r\n        let filePath = path.join(docPath, document.path);\r\n        if (fs.existsSync(filePath)) {\r\n            fs.rmSync(filePath)\r\n        }\r\n\r\n    }\r\n\r\n    static set(document: Document) {\r\n        let idx = this.getIndex(document.id);\r\n        if (idx == -1) {\r\n            DocumentationCache.Documents?.push(document);\r\n        } else {\r\n            DocumentationCache.Documents![idx] = document;\r\n        }\r\n        let content = JSON.stringify(DocumentationCache.Documents, null,'\\t');\r\n\r\n        fs.writeFileSync(ConfigHelper.CacheFilePath, content);\r\n    }\r\n\r\n    static getByFolderPath(path: string) {\r\n        let suggestions : Document[] = [];\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].folderPath == path) {\r\n                suggestions.push(DocumentationCache.Documents[i])\r\n            }\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n    static getProjectInfo() {\r\n\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationCache.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationGenerator.ts",
		"path": "src\\documentation\\DocumentationGenerator.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport DocumentationCache from \"./DocumentationCache\";\r\nimport path from \"path\";\r\nimport BaseGenerator from \"./plugins/generators/BaseGenerator\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport App from \"../App\";\r\n\r\nexport default class DocumentationGenerator {\r\n\r\n    public make() {\r\n        let documents = DocumentationCache.Documents;\r\n        if (!documents) return;\r\n\r\n        let config = ConfigHelper.config;\r\n        if (config.readmeRoot) {\r\n            let document = DocumentationCache.get('README');\r\n            if (document) {\r\n                fs.writeFileSync(path.join(config.project_path, 'README.md'), document.documentation);\r\n            }\r\n        }\r\n        let project_path = process.cwd();\r\n\r\n\r\n        let plugins = config.generatorPlugin;\r\n        for (let i = 0; i < documents.length; i++) {\r\n            let document = documents[i]\r\n            if (!document) continue;\r\n\r\n            for (let i = 0; i < plugins.length; i++) {\r\n                let tmp = new plugins[i].default() as BaseGenerator;\r\n                tmp.process(document)\r\n            }\r\n\r\n            let folderPath = document.folderPath.replace(project_path, '');\r\n            if (folderPath == '.\\\\' || folderPath == './') folderPath = ''\r\n            let fileName = documents[i].name;\r\n            if (fileName.toLowerCase() == 'readme') fileName = ConfigHelper.config.rootFileName;\r\n\r\n            let filePath = path.join(config.documentation_path, documents[i].saveToPath, fileName + ConfigHelper.config.document_file_extension);\r\n            if (document.lastTouch < App.StartTime) {\r\n                fs.rmSync(filePath)\r\n                DocumentationCache.remove(document);\r\n                continue;\r\n            }\r\n\r\n            fs.mkdirSync(path.join(config.documentation_path, documents[i].saveToPath), {recursive: true})\r\n            fs.writeFileSync(filePath, document.documentation);\r\n        }\r\n\r\n        if (ConfigHelper.config.sitemap.enable) {\r\n            let url = ConfigHelper.config.sitemap.url;\r\n            let sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n`\r\n            for (let i = 0; i < documents.length; i++) {\r\n                let document = documents[i]\r\n                if (!document) continue;\r\n\r\n                let path = (document.path.indexOf('.') != -1) ? document.path : document.path + '/' + ConfigHelper.config.rootFileName;\r\n                path = path.replaceAll('\\\\', '/');\r\n                path += ConfigHelper.config.document_file_extension;\r\n                sitemap += `<url>\r\n      <loc>${url}${path}</loc>\r\n      <lastmod>${document.updated}</lastmod>\r\n   </url>`\r\n            }\r\n            sitemap += `</urlset>`;\r\n            fs.writeFileSync(path.join(ConfigHelper.config.documentation_path, 'sitemap.xml'), sitemap);\r\n        }\r\n\r\n    }\r\n}",
		"documentation": "# DocumentationGenerator.ts\n\nThis is a TypeScript code file that contains the `DocumentationGenerator` class. This class is responsible for generating documentation files based on the documents stored in the `DocumentationCache`. It also supports generating a sitemap for the documentation.\n\n## Usage\n\nTo use the `DocumentationGenerator` class, you need to import it and create a new instance. Then, call the `make()` method to generate the documentation files.\n\n```typescript\nimport DocumentationGenerator from \"./DocumentationGenerator\";\n\nconst generator = new DocumentationGenerator();\ngenerator.make();\n```\n\n## Class: DocumentationGenerator\n\n### Method: make()\n\nThis method generates the documentation files based on the documents stored in the `DocumentationCache`. It also supports generating a sitemap for the documentation.\n\n#### Parameters\n\nNone.\n\n#### Example\n\n```typescript\nconst generator = new DocumentationGenerator();\ngenerator.make();\n```\n\n## Technical Concepts\n\n### DocumentationCache\n\n`DocumentationCache` is a class that stores the documents that need to be generated. It provides methods to add, get, and remove documents from the cache.\n\n### BaseGenerator\n\n`BaseGenerator` is an abstract class that defines the interface for generator plugins. Generator plugins are responsible for processing the documents and generating the output files.\n\n### ConfigHelper\n\n`ConfigHelper` is a class that provides access to the configuration settings for the application. It reads the configuration from a JSON file and provides methods to access the values.\n\n### App\n\n`App` is the main class of the application. It initializes the `DocumentationGenerator` and other components and starts the generation process.\n\n## File Structure\n\nThe generated documentation files are saved in the `documentation_path` specified in the configuration. The file structure is as follows:\n\n- `README.md`: The main documentation file, generated if `readmeRoot` is set to `true` in the configuration.\n- `documentation_path`:\n  - `documents[i].saveToPath`: The folder path for each document.\n    - `fileName + ConfigHelper.config.document_file_extension`: The file name for each document, with the appropriate file extension.\n  - `sitemap.xml`: The sitemap file, generated if `ConfigHelper.config.sitemap.enable` is set to `true`.\n\n## Sitemap Generation\n\nIf the `ConfigHelper.config.sitemap.enable` is set to `true`, the `make()` method will generate a sitemap file named `sitemap.xml` in the `documentation_path`. The sitemap file will contain the URLs for all the generated documentation files.",
		"isFolder": false,
		"updated": "2023-04-15T09:37:21.397Z",
		"sidebar_position": 3,
		"sidebar_label": "DocumentationGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationGenerator.ts\"\r\nThe file name is: DocumentationGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"./DocumentationCache\";\r\nimport path from \"path\";\r\nimport BaseGenerator from \"./plugins/generators/BaseGenerator\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport App from \"../App\";\r\n\r\nexport default class DocumentationGenerator {\r\n\r\n    public make() {\r\n        let documents = DocumentationCache.Documents;\r\n        if (!documents) return;\r\n\r\n        let config = ConfigHelper.config;\r\n        if (config.readmeRoot) {\r\n            let document = DocumentationCache.get('README');\r\n            if (document) {\r\n                fs.writeFileSync(path.join(config.project_path, 'README.md'), document.documentation);\r\n            }\r\n        }\r\n        let project_path = process.cwd();\r\n\r\n\r\n        let plugins = config.generatorPlugin;\r\n        for (let i = 0; i < documents.length; i++) {\r\n            let document = documents[i]\r\n            if (!document) continue;\r\n\r\n            for (let i = 0; i < plugins.length; i++) {\r\n                let tmp = new plugins[i].default() as BaseGenerator;\r\n                tmp.process(document)\r\n            }\r\n\r\n            let folderPath = document.folderPath.replace(project_path, '');\r\n            if (folderPath == '.\\\\' || folderPath == './') folderPath = ''\r\n            let fileName = documents[i].name;\r\n            if (fileName.toLowerCase() == 'readme') fileName = ConfigHelper.config.rootFileName;\r\n\r\n            let filePath = path.join(config.documentation_path, documents[i].saveToPath, fileName + ConfigHelper.config.document_file_extension);\r\n            if (document.lastTouch < App.StartTime) {\r\n                fs.rmSync(filePath)\r\n                DocumentationCache.remove(document);\r\n                continue;\r\n            }\r\n\r\n            fs.mkdirSync(path.join(config.documentation_path, documents[i].saveToPath), {recursive: true})\r\n            fs.writeFileSync(filePath, document.documentation);\r\n        }\r\n\r\n        if (ConfigHelper.config.sitemap.enable) {\r\n            let url = ConfigHelper.config.sitemap.url;\r\n            let sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n`\r\n            for (let i = 0; i < documents.length; i++) {\r\n                let document = documents[i]\r\n                if (!document) continue;\r\n\r\n                let path = (document.path.indexOf('.') != -1) ? document.path : document.path + '/' + ConfigHelper.config.rootFileName;\r\n                path = path.replaceAll('\\\\', '/');\r\n                path += ConfigHelper.config.document_file_extension;\r\n                sitemap += `<url>\r\n      <loc>${url}${path}</loc>\r\n      <lastmod>${document.updated}</lastmod>\r\n   </url>`\r\n            }\r\n            sitemap += `</urlset>`;\r\n            fs.writeFileSync(path.join(ConfigHelper.config.documentation_path, 'sitemap.xml'), sitemap);\r\n        }\r\n\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationGenerator.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "GenerateOptions.ts",
		"path": "src\\documentation\\plugins\\GenerateOptions.ts",
		"folderPath": "src\\documentation\\plugins",
		"fileContent": "\r\nexport interface GenerateOptions {\r\n    args?: any\r\n    template?: string;\r\n    name: string;\r\n    pathToFile: string\r\n    folderPath: string\r\n    sidebarPosition?: number\r\n    sidebarLabel?: string\r\n    saveToPath?: string;\r\n    data?: any;\r\n    assistantMessages? : string[]\r\n}",
		"documentation": "# GenerateOptions.ts\n\n## Overview\n\nThis TypeScript file defines an interface called `GenerateOptions`. The interface is used to specify the options for generating content based on a template. It includes various properties that can be used to customize the generation process, such as the template to use, the name of the generated content, the path to the file, and more.\n\n## Interface: GenerateOptions\n\nThe `GenerateOptions` interface contains the following properties:\n\n### args\n\n- Type: `any`\n- Optional\n\nThis property represents any additional arguments that may be required during the generation process.\n\n### template\n\n- Type: `string`\n- Optional\n\nThis property specifies the template to be used for generating the content. The template should be a string containing placeholders for the data to be inserted.\n\n### name\n\n- Type: `string`\n\nThis property represents the name of the generated content.\n\n### pathToFile\n\n- Type: `string`\n\nThis property specifies the path to the file where the generated content will be saved.\n\n### folderPath\n\n- Type: `string`\n\nThis property represents the path to the folder where the generated content will be stored.\n\n### sidebarPosition\n\n- Type: `number`\n- Optional\n\nThis property specifies the position of the generated content in the sidebar, if applicable.\n\n### sidebarLabel\n\n- Type: `string`\n- Optional\n\nThis property represents the label to be displayed for the generated content in the sidebar, if applicable.\n\n### saveToPath\n\n- Type: `string`\n- Optional\n\nThis property specifies the path where the generated content will be saved. If not provided, the content will be saved to the `pathToFile` property.\n\n### data\n\n- Type: `any`\n- Optional\n\nThis property represents the data to be used for generating the content. The data should be in a format that can be inserted into the template placeholders.\n\n### assistantMessages\n\n- Type: `string[]`\n- Optional\n\nThis property is an array of strings containing messages from the assistant during the generation process.\n\n## Usage\n\nTo use the `GenerateOptions` interface, you can create an object that implements the interface and pass it to a function that generates content based on the provided options. Here's an example:\n\n```typescript\nimport { GenerateOptions } from './GenerateOptions';\n\nconst options: GenerateOptions = {\n  template: 'Hello, {{name}}!',\n  name: 'greeting',\n  pathToFile: './greetings.txt',\n  folderPath: './greetings',\n  data: { name: 'John Doe' },\n};\n\nfunction generateContent(options: GenerateOptions) {\n  // Implementation for generating content based on the provided options\n}\n\ngenerateContent(options);\n```\n\nIn this example, the `generateContent` function would use the provided `options` object to generate a greeting message based on the specified template and save it to the specified file and folder.",
		"isFolder": false,
		"updated": "2023-04-14T15:13:44.911Z",
		"sidebar_position": 0,
		"sidebar_label": "GenerateOptions.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"GenerateOptions.ts\"\r\nThe file name is: GenerateOptions.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n\r\nexport interface GenerateOptions {\r\n    args?: any\r\n    template?: string;\r\n    name: string;\r\n    pathToFile: string\r\n    folderPath: string\r\n    sidebarPosition?: number\r\n    sidebarLabel?: string\r\n    saveToPath?: string;\r\n    data?: any;\r\n    assistantMessages? : string[]\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\GenerateOptions.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "plugins"
		}
	},
	{
		"name": "BaseBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\BaseBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders",
		"fileContent": "import OpenAIRepository from \"../../../repositories/OpenAIRepository\";\r\nimport Document from \"../../Document\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\nimport {Liquid} from \"liquidjs\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {GenerateOptions} from \"../GenerateOptions\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"../../../config/ICodeNarratorConfig\";\r\nimport * as process from \"process\";\r\nimport OpenAIResponse from \"../../../model/OpenAIResponse\";\r\n\r\n/*\r\nThis is the Base class for Builder plugins. Builder plugins are used to generate questions for GPT\r\nand then parse the response and loading it into the document object that is later cached.\r\n */\r\nexport default abstract class BaseBuilder {\r\n    openAIRepository: OpenAIRepository;\r\n    generator: string;\r\n    config: ICodeNarratorConfig;\r\n\r\n    protected constructor(generator: string) {\r\n        this.openAIRepository = new OpenAIRepository();\r\n        this.generator = generator;\r\n        this.config = ConfigHelper.config;\r\n    }\r\n\r\n    abstract generate(): any;\r\n\r\n    abstract render(document: Document): Promise<string>;\r\n\r\n    public async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<OpenAIResponse> {\r\n        const engine = new Liquid({\r\n            extname: '.liquid'\r\n        });\r\n        if (!args.projectName) {\r\n            args.projectName = ConfigHelper.config.project_name;\r\n        }\r\n        if (!args.fileName && name) {\r\n            args.fileName = name\r\n        }\r\n\r\n        let template_path = path.join(__dirname, `${this.generator}/${template}`);\r\n        if (this.generator == 'UserDefined') {\r\n            template_path = path.join(process.cwd(), template);\r\n        }\r\n        if (!fs.existsSync(template_path + '.liquid')) {\r\n            throw new Error(`Cannot find path ${template_path}`)\r\n        }\r\n        let question = await engine.renderFile(template_path, args)\r\n\r\n        console.log(`Asking about ${name} using template ${template} for builder ${this.generator}`)\r\n        let response = await this.openAIRepository.queryQuestions([question!], 0, ConfigHelper.config.gptModel, assistantMessages);\r\n        console.log(`Received answer for ${name}`)\r\n        return response;\r\n    }\r\n\r\n    public async generateDocumentation({\r\n                                           args = {},\r\n                                           template = 'gpt_question',\r\n                                           name,\r\n                                           pathToFile,\r\n                                           folderPath,\r\n                                           sidebarPosition,\r\n                                           assistantMessages,\r\n                                           sidebarLabel, saveToPath, data\r\n                                       }: GenerateOptions) {\r\n\r\n        let response = await this.getAnswer(name, args, template, assistantMessages)\r\n        let document = new Document(name, pathToFile, folderPath, new Date(), sidebarPosition, sidebarLabel)\r\n        document.documentation = response.answer;\r\n        document.requestMessages = response.requestMessages;\r\n        document.documentation_type = ConfigHelper.DocumentationType;\r\n        document.generator = this.generator;\r\n        document.saveToPath = (saveToPath) ? saveToPath : path.dirname(pathToFile);\r\n        document.data = data;\r\n        return document;\r\n    }\r\n\r\n    /*\r\n        This is where the magic happens. Retrieve the question from liquid file, input the args, ask GPT, create the document and store it in cache\r\n    */\r\n    public async generateDocumentationAndCache({\r\n                                                   args = {},\r\n                                                   template = 'gpt_question',\r\n                                                   name,\r\n                                                   pathToFile,\r\n                                                   folderPath,\r\n                                                   sidebarPosition,\r\n                                                   sidebarLabel,\r\n                                                   saveToPath,\r\n                                                   assistantMessages,\r\n                                                   data\r\n                                               }: GenerateOptions) {\r\n        let document = await this.generateDocumentation({\r\n            args,\r\n            template,\r\n            name,\r\n            pathToFile,\r\n            folderPath,\r\n            sidebarPosition,\r\n            assistantMessages,\r\n            sidebarLabel, saveToPath, data\r\n        })\r\n        DocumentationCache.set(document);\r\n    }\r\n\r\n    public hasChanged(document?: Document) {\r\n        if (!document) return true;\r\n\r\n        let project_path = process.cwd();\r\n        let filePath = path.join(project_path, document.path);\r\n        if (!fs.existsSync(filePath)) {\r\n            DocumentationCache.remove(document)\r\n            return false;\r\n        }\r\n        if (document.documentation_type && document.documentation_type != ConfigHelper.DocumentationType) return true;\r\n\r\n        let stats = fs.statSync(filePath);\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n    }\r\n}",
		"documentation": "# BaseBuilder.ts\n\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a `Document` object that is later cached.\n\n## Table of Contents\n\n- [Description](#description)\n- [Usage](#usage)\n- [Methods](#methods)\n  - [generate](#generate)\n  - [render](#render)\n  - [getAnswer](#getanswer)\n  - [generateDocumentation](#generatedocumentation)\n  - [generateDocumentationAndCache](#generatedocumentationandcache)\n  - [hasChanged](#haschanged)\n\n## Description\n\nThe `BaseBuilder` class provides a foundation for creating Builder plugins that interact with GPT and manage the generation and caching of documentation. It includes methods for generating questions, rendering documents, and managing the cache.\n\n## Usage\n\nTo use the `BaseBuilder` class, you need to create a new class that extends it and implement the abstract methods `generate()` and `render(document: Document)`.\n\n```typescript\nimport BaseBuilder from \"./BaseBuilder\";\nimport Document from \"../../Document\";\n\nclass CustomBuilder extends BaseBuilder {\n  constructor() {\n    super(\"CustomGenerator\");\n  }\n\n  generate() {\n    // Your custom implementation here\n  }\n\n  async render(document: Document): Promise<string> {\n    // Your custom implementation here\n  }\n}\n```\n\n## Methods\n\n### generate\n\nThis abstract method should be implemented in the derived class to generate the required data.\n\n```typescript\nabstract generate(): any;\n```\n\n### render\n\nThis abstract method should be implemented in the derived class to render the given `Document` object.\n\n```typescript\nabstract render(document: Document): Promise<string>;\n```\n\n### getAnswer\n\nThis method retrieves an answer from GPT using the provided name, arguments, and template.\n\n```typescript\npublic async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<OpenAIResponse>;\n```\n\n### generateDocumentation\n\nThis method generates a `Document` object with the provided options.\n\n```typescript\npublic async generateDocumentation(options: GenerateOptions): Promise<Document>;\n```\n\n### generateDocumentationAndCache\n\nThis method generates a `Document` object with the provided options and caches it.\n\n```typescript\npublic async generateDocumentationAndCache(options: GenerateOptions): Promise<void>;\n```\n\n### hasChanged\n\nThis method checks if the given `Document` object has changed since it was last updated.\n\n```typescript\npublic hasChanged(document?: Document): boolean;\n```\n\n## Example\n\n```typescript\nimport BaseBuilder from \"./BaseBuilder\";\nimport Document from \"../../Document\";\n\nclass CustomBuilder extends BaseBuilder {\n  constructor() {\n    super(\"CustomGenerator\");\n  }\n\n  generate() {\n    // Your custom implementation here\n  }\n\n  async render(document: Document): Promise<string> {\n    // Your custom implementation here\n  }\n}\n\nconst customBuilder = new CustomBuilder();\nconst generatedDocument = await customBuilder.generateDocumentation({\n  name: \"example\",\n  pathToFile: \"path/to/file\",\n  folderPath: \"path/to/folder\",\n  sidebarPosition: 1,\n  sidebarLabel: \"Example\",\n});\n\nconsole.log(generatedDocument);\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:15:43.233Z",
		"sidebar_position": 0,
		"sidebar_label": "BaseBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BaseBuilder.ts\"\r\nThe file name is: BaseBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport OpenAIRepository from \"../../../repositories/OpenAIRepository\";\r\nimport Document from \"../../Document\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\nimport {Liquid} from \"liquidjs\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {GenerateOptions} from \"../GenerateOptions\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"../../../config/ICodeNarratorConfig\";\r\nimport * as process from \"process\";\r\nimport OpenAIResponse from \"../../../model/OpenAIResponse\";\r\n\r\n/*\r\nThis is the Base class for Builder plugins. Builder plugins are used to generate questions for GPT\r\nand then parse the response and loading it into the document object that is later cached.\r\n */\r\nexport default abstract class BaseBuilder {\r\n    openAIRepository: OpenAIRepository;\r\n    generator: string;\r\n    config: ICodeNarratorConfig;\r\n\r\n    protected constructor(generator: string) {\r\n        this.openAIRepository = new OpenAIRepository();\r\n        this.generator = generator;\r\n        this.config = ConfigHelper.config;\r\n    }\r\n\r\n    abstract generate(): any;\r\n\r\n    abstract render(document: Document): Promise<string>;\r\n\r\n    public async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<OpenAIResponse> {\r\n        const engine = new Liquid({\r\n            extname: '.liquid'\r\n        });\r\n        if (!args.projectName) {\r\n            args.projectName = ConfigHelper.config.project_name;\r\n        }\r\n        if (!args.fileName && name) {\r\n            args.fileName = name\r\n        }\r\n\r\n        let template_path = path.join(__dirname, `${this.generator}/${template}`);\r\n        if (this.generator == 'UserDefined') {\r\n            template_path = path.join(process.cwd(), template);\r\n        }\r\n        if (!fs.existsSync(template_path + '.liquid')) {\r\n            throw new Error(`Cannot find path ${template_path}`)\r\n        }\r\n        let question = await engine.renderFile(template_path, args)\r\n\r\n        console.log(`Asking about ${name} using template ${template} for builder ${this.generator}`)\r\n        let response = await this.openAIRepository.queryQuestions([question!], 0, ConfigHelper.config.gptModel, assistantMessages);\r\n        console.log(`Received answer for ${name}`)\r\n        return response;\r\n    }\r\n\r\n    public async generateDocumentation({\r\n                                           args = {},\r\n                                           template = 'gpt_question',\r\n                                           name,\r\n                                           pathToFile,\r\n                                           folderPath,\r\n                                           sidebarPosition,\r\n                                           assistantMessages,\r\n                                           sidebarLabel, saveToPath, data\r\n                                       }: GenerateOptions) {\r\n\r\n        let response = await this.getAnswer(name, args, template, assistantMessages)\r\n        let document = new Document(name, pathToFile, folderPath, new Date(), sidebarPosition, sidebarLabel)\r\n        document.documentation = response.answer;\r\n        document.requestMessages = response.requestMessages;\r\n        document.documentation_type = ConfigHelper.DocumentationType;\r\n        document.generator = this.generator;\r\n        document.saveToPath = (saveToPath) ? saveToPath : path.dirname(pathToFile);\r\n        document.data = data;\r\n        return document;\r\n    }\r\n\r\n    /*\r\n        This is where the magic happens. Retrieve the question from liquid file, input the args, ask GPT, create the document and store it in cache\r\n    */\r\n    public async generateDocumentationAndCache({\r\n                                                   args = {},\r\n                                                   template = 'gpt_question',\r\n                                                   name,\r\n                                                   pathToFile,\r\n                                                   folderPath,\r\n                                                   sidebarPosition,\r\n                                                   sidebarLabel,\r\n                                                   saveToPath,\r\n                                                   assistantMessages,\r\n                                                   data\r\n                                               }: GenerateOptions) {\r\n        let document = await this.generateDocumentation({\r\n            args,\r\n            template,\r\n            name,\r\n            pathToFile,\r\n            folderPath,\r\n            sidebarPosition,\r\n            assistantMessages,\r\n            sidebarLabel, saveToPath, data\r\n        })\r\n        DocumentationCache.set(document);\r\n    }\r\n\r\n    public hasChanged(document?: Document) {\r\n        if (!document) return true;\r\n\r\n        let project_path = process.cwd();\r\n        let filePath = path.join(project_path, document.path);\r\n        if (!fs.existsSync(filePath)) {\r\n            DocumentationCache.remove(document)\r\n            return false;\r\n        }\r\n        if (document.documentation_type && document.documentation_type != ConfigHelper.DocumentationType) return true;\r\n\r\n        let stats = fs.statSync(filePath);\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\BaseBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "builders"
		}
	},
	{
		"name": "ConfigurationBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Configuration\\ConfigurationBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\nexport default class ConfigurationBuilder extends BaseBuilder {\r\n\r\n    configFiles: string[] = []\r\n    appSpecificConfigFiles: string[] = []\r\n    updateSummary = false;\r\n\r\n    constructor() {\r\n        super('Configuration');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        if (ConfigHelper.config.config_files.length == 0) return;\r\n\r\n        await this.prepareSummary();\r\n        await this.generateAppConfigFiles();\r\n        await this.generateGeneralConfigFiles();\r\n        await this.generateSummary();\r\n    }\r\n\r\n    private async prepareSummary() {\r\n        let document = DocumentationCache.get('Configuration');\r\n        if (document) {\r\n\r\n            if (document.data && this.appSpecificConfigAndCacheSameSize(document)) {\r\n                if (document.data.appSpecificConfigFiles) this.appSpecificConfigFiles = document.data.appSpecificConfigFiles;\r\n                if (document.data.configFiles) this.configFiles = document.data.configFiles;\r\n            }\r\n        }\r\n\r\n        if (document && !this.haveConfigFilesChanged()) {\r\n            return;\r\n        }\r\n        this.updateSummary = true;\r\n        let config = ConfigHelper.config;\r\n        let appName = config.project_name;\r\n        let listOfFilesAndFolders = '';\r\n        let project_path = process.cwd();\r\n        let files = FolderStructure.getFiles(project_path, 0);\r\n\r\n        let configPath = path.join(project_path, 'config');\r\n        if (FolderStructure.exists(configPath)) {\r\n            let configFiles = FolderStructure.getFiles(configPath, 0);\r\n            configFiles.forEach(configFile => {\r\n                files.push(configFile);\r\n            })\r\n        }\r\n        files.forEach(file => {\r\n            if (file.path.indexOf('/config') != -1) {\r\n                listOfFilesAndFolders += 'config/' + file.name + '\\n';\r\n            } else {\r\n                listOfFilesAndFolders += file.name + '\\n'\r\n            }\r\n        })\r\n\r\n        let response = await super.getAnswer('Configuration', {appName, listOfFilesAndFolders}, 'what_are_config_files');\r\n        let jsons = Helper.getJsons(response.answer)\r\n        if (jsons.length > 0) {\r\n            let fileResults = jsons[0];\r\n            this.appSpecificConfigFiles = [];\r\n            this.configFiles = [];\r\n\r\n            fileResults.forEach((file: any) => {\r\n                if (file.isAppSpecific) {\r\n                    this.appSpecificConfigFiles.push(file.path);\r\n                } else if (file.isConfig) {\r\n                    this.configFiles.push(file.path)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    private async generateSummary() {\r\n        if (!this.updateSummary) {\r\n            return;\r\n        }\r\n\r\n        let data: any = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles,\r\n            configFiles: this.configFiles\r\n        }\r\n\r\n        let appSpecificConfigContent = '';\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            appSpecificConfigContent += `--- Start ${this.appSpecificConfigFiles[0]} ---\r\n            ${FileStructure.getContent(this.appSpecificConfigFiles[0])}\r\n            --- End ${this.appSpecificConfigFiles[0]} ---\r\n            `\r\n        }\r\n\r\n        let args = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles.join('\\n'),\r\n            appSpecificConfigContent,\r\n            configFiles: this.configFiles.join('\\n')\r\n        }\r\n        await super.generateDocumentationAndCache({\r\n                args: args, name: 'Configuration', saveToPath:'./Configuration', pathToFile: './Configuration', folderPath: './Configuration', sidebarPosition: 3, data: data\r\n            }\r\n\r\n        )\r\n    }\r\n\r\n    private haveConfigFilesChanged() {\r\n        let needsUpdate = false;\r\n        if (this.appSpecificConfigFiles.length != ConfigHelper.config.config_files.length) return true;\r\n\r\n        for (let i=0;i<this.appSpecificConfigFiles.length;i++) {\r\n            let configDoc = DocumentationCache.get(this.appSpecificConfigFiles[i]);\r\n            if (this.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.appSpecificConfigFiles.length;\r\n            }\r\n        }\r\n\r\n        for (let i=0;!needsUpdate && i<this.configFiles.length;i++) {\r\n            let configDoc = DocumentationCache.get(this.configFiles[i]);\r\n            if (this.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configFiles.length;\r\n            }\r\n        }\r\n        return needsUpdate;\r\n    }\r\n\r\n    private async generateAppConfigFiles() {\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.appSpecificConfigFiles[i])\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.updateSummary = true;\r\n            let content = FileStructure.getContent(this.appSpecificConfigFiles[i])\r\n            if (content == '') continue;\r\n\r\n            let args = {configFile: content, fileName : this.appSpecificConfigFiles[i]}\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'app_config',\r\n                    name: this.appSpecificConfigFiles[i],\r\n                    pathToFile: './' + this.appSpecificConfigFiles[i],\r\n                    folderPath: './',\r\n                    sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    private async generateGeneralConfigFiles() {\r\n        for (let i = 0; i < this.configFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configFiles[i])\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configFiles[i])\r\n            let args = {configFile: content}\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'general_config',\r\n                    name: this.configFiles[i], pathToFile: './' + this.configFiles[i], folderPath: './', sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private appSpecificConfigAndCacheSameSize(document: Document) {\r\n        if (!document.data) return false;\r\n        return (document.data.appSpecificConfigFiles?.length == ConfigHelper.config.config_files.length)\r\n    }\r\n}",
		"documentation": "# ConfigurationBuilder.ts\n\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that defines a class named `ConfigurationBuilder`. This class is responsible for generating and managing configuration files for an application. It extends the `BaseBuilder` class and provides methods for generating, updating, and rendering configuration files.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Methods](#methods)\n  - [generate](#generate)\n  - [prepareSummary](#preparesummary)\n  - [generateAppConfigFiles](#generateappconfigfiles)\n  - [generateGeneralConfigFiles](#generategeneralconfigfiles)\n  - [generateSummary](#generatesummary)\n  - [haveConfigFilesChanged](#haveconfigfileschanged)\n  - [render](#render)\n  - [appSpecificConfigAndCacheSameSize](#appspecificconfigandcachesamesize)\n\n## Class Description\n\nThe `ConfigurationBuilder` class is responsible for managing the configuration files of an application.",
		"isFolder": false,
		"updated": "2023-04-14T15:16:19.549Z",
		"sidebar_position": 0,
		"sidebar_label": "ConfigurationBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigurationBuilder.ts\"\r\nThe file name is: ConfigurationBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\nexport default class ConfigurationBuilder extends BaseBuilder {\r\n\r\n    configFiles: string[] = []\r\n    appSpecificConfigFiles: string[] = []\r\n    updateSummary = false;\r\n\r\n    constructor() {\r\n        super('Configuration');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        if (ConfigHelper.config.config_files.length == 0) return;\r\n\r\n        await this.prepareSummary();\r\n        await this.generateAppConfigFiles();\r\n        await this.generateGeneralConfigFiles();\r\n        await this.generateSummary();\r\n    }\r\n\r\n    private async prepareSummary() {\r\n        let document = DocumentationCache.get('Configuration');\r\n        if (document) {\r\n\r\n            if (document.data && this.appSpecificConfigAndCacheSameSize(document)) {\r\n                if (document.data.appSpecificConfigFiles) this.appSpecificConfigFiles = document.data.appSpecificConfigFiles;\r\n                if (document.data.configFiles) this.configFiles = document.data.configFiles;\r\n            }\r\n        }\r\n\r\n        if (document && !this.haveConfigFilesChanged()) {\r\n            return;\r\n        }\r\n        this.updateSummary = true;\r\n        let config = ConfigHelper.config;\r\n        let appName = config.project_name;\r\n        let listOfFilesAndFolders = '';\r\n        let project_path = process.cwd();\r\n        let files = FolderStructure.getFiles(project_path, 0);\r\n\r\n        let configPath = path.join(project_path, 'config');\r\n        if (FolderStructure.exists(configPath)) {\r\n            let configFiles = FolderStructure.getFiles(configPath, 0);\r\n            configFiles.forEach(configFile => {\r\n                files.push(configFile);\r\n            })\r\n        }\r\n        files.forEach(file => {\r\n            if (file.path.indexOf('/config') != -1) {\r\n                listOfFilesAndFolders += 'config/' + file.name + '\\n';\r\n            } else {\r\n                listOfFilesAndFolders += file.name + '\\n'\r\n            }\r\n        })\r\n\r\n        let response = await super.getAnswer('Configuration', {appName, listOfFilesAndFolders}, 'what_are_config_files');\r\n        let jsons = Helper.getJsons(response.answer)\r\n        if (jsons.length > 0) {\r\n            let fileResults = jsons[0];\r\n            this.appSpecificConfigFiles = [];\r\n            this.configFiles = [];\r\n\r\n            fileResults.forEach((file: any) => {\r\n                if (file.isAppSpecific) {\r\n                    this.appSpecificConfigFiles.push(file.path);\r\n                } else if (file.isConfig) {\r\n                    this.configFiles.push(file.path)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    private async generateSummary() {\r\n        if (!this.updateSummary) {\r\n            return;\r\n        }\r\n\r\n        let data: any = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles,\r\n            configFiles: this.configFiles\r\n        }\r\n\r\n        let appSpecificConfigContent = '';\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            appSpecificConfigContent += `--- Start ${this.appSpecificConfigFiles[0]} ---\r\n            ${FileStructure.getContent(this.appSpecificConfigFiles[0])}\r\n            --- End ${this.appSpecificConfigFiles[0]} ---\r\n            `\r\n        }\r\n\r\n        let args = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles.join('\\n'),\r\n            appSpecificConfigContent,\r\n            configFiles: this.configFiles.join('\\n')\r\n        }\r\n        await super.generateDocumentationAndCache({\r\n                args: args, name: 'Configuration', saveToPath:'./Configuration', pathToFile: './Configuration', folderPath: './Configuration', sidebarPosition: 3, data: data\r\n            }\r\n\r\n        )\r\n    }\r\n\r\n    private haveConfigFilesChanged() {\r\n        let needsUpdate = false;\r\n        if (this.appSpecificConfigFiles.length != ConfigHelper.config.config_files.length) return true;\r\n\r\n        for (let i=0;i<this.appSpecificConfigFiles.length;i++) {\r\n            let configDoc = DocumentationCache.get(this.appSpecificConfigFiles[i]);\r\n            if (this.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.appSpecificConfigFiles.length;\r\n            }\r\n        }\r\n\r\n        for (let i=0;!needsUpdate && i<this.configFiles.length;i++) {\r\n            let configDoc = DocumentationCache.get(this.configFiles[i]);\r\n            if (this.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configFiles.length;\r\n            }\r\n        }\r\n        return needsUpdate;\r\n    }\r\n\r\n    private async generateAppConfigFiles() {\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.appSpecificConfigFiles[i])\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.updateSummary = true;\r\n            let content = FileStructure.getContent(this.appSpecificConfigFiles[i])\r\n            if (content == '') continue;\r\n\r\n            let args = {configFile: content, fileName : this.appSpecificConfigFiles[i]}\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'app_config',\r\n                    name: this.appSpecificConfigFiles[i],\r\n                    pathToFile: './' + this.appSpecificConfigFiles[i],\r\n                    folderPath: './',\r\n                    sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    private async generateGeneralConfigFiles() {\r\n        for (let i = 0; i < this.configFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configFiles[i])\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configFiles[i])\r\n            let args = {configFile: content}\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'general_config',\r\n                    name: this.configFiles[i], pathToFile: './' + this.configFiles[i], folderPath: './', sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private appSpecificConfigAndCacheSameSize(document: Document) {\r\n        if (!document.data) return false;\r\n        return (document.data.appSpecificConfigFiles?.length == ConfigHelper.config.config_files.length)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration\\ConfigurationBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "FilesBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Files\\FilesBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Files",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Ignore from \"ignore\";\r\n\r\n\r\nexport default class FilesBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('Files');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder);\r\n    }\r\n\r\n    public async render(document: Document) {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    public async queryForFolder(folder: FolderStructure) {\r\n        this.cleanDeletedFilesFromCache(folder);\r\n\r\n        let files = folder.files;\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.shouldDocument(file)) {\r\n                continue;\r\n            }\r\n\r\n            let document = DocumentationCache.get(file.path)\r\n            if (document && document.generator != \"Files\") continue;\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            let fileName = file.name;\r\n            let fileContent = FileStructure.getContent(file.path);\r\n\r\n            let assistantMessages = [];\r\n            let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n            let match;\r\n            while ((match = regex.exec(fileContent)) !== null) {\r\n                let content = FileStructure.getContent(match[1]);\r\n                let assistantFiles = 'These files might help with documentation.'\r\n                if (content != '') {\r\n                    assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n                }\r\n                assistantMessages.push(assistantFiles)\r\n            }\r\n\r\n            let args = {fileName, fileContent}\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: args,\r\n                name: fileName,\r\n                pathToFile: file.path,\r\n                folderPath: folder.path,\r\n                sidebarPosition: i,\r\n                sidebarLabel: fileName,\r\n                assistantMessages:assistantMessages\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private cleanDeletedFilesFromCache(folder: FolderStructure) {\r\n        let cachedFiles = DocumentationCache.getByFolderPath(folder.path);\r\n        for (let i=0;i<cachedFiles.length;i++) {\r\n            if (cachedFiles[i].isFolder) continue;\r\n\r\n            let fileExists = false;\r\n            for (let b=0;b<folder.files.length;b++) {\r\n                if (cachedFiles[i].path == folder.files[b].path) {\r\n                    b = folder.files.length;\r\n                    fileExists = true;\r\n                }\r\n            }\r\n            if (!fileExists) {\r\n                console.warn(`Remove file ${cachedFiles[i].path} from cache`)\r\n                //DocumentationCache.remove(cachedFiles[i]);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private shouldDocument(file: FileStructure) {\r\n        if (!this.config.include) return true;\r\n\r\n        const ignore = Ignore();\r\n        const includePatterns = ConfigHelper.config.include\r\n        ignore.add(includePatterns);\r\n        return ignore.ignores(file.path);\r\n    }\r\n}",
		"documentation": "# FilesBuilder.ts\n\nThe `FilesBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating and rendering documentation for files in a project structure. It also handles querying folders, cleaning deleted files from the cache, and determining if a file should be documented.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Methods](#methods)\n  - [generate](#generate)\n  - [render](#render)\n  - [queryForFolder](#queryforfolder)\n  - [cleanDeletedFilesFromCache](#cleandeletedfilesfromcache)\n  - [shouldDocument](#shoulddocument)\n\n## Class Definition\n\n```typescript\nexport default class FilesBuilder extends BaseBuilder {\n    ...\n}\n```\n\n## Methods\n\n### generate\n\n```typescript\npublic async generate(): Promise<void>\n```\n\nThis method generates the documentation for the files in the project structure. It creates a new `ProjectStructure` instance, retrieves the folder structure, and then queries the folder for documentation.\n\n### render\n\n```typescript\npublic async render(document: Document): Promise<string>\n```\n\nThis method renders the documentation for a given `Document` instance. It returns the documentation as a string.\n\n### queryForFolder\n\n```typescript\npublic async queryForFolder(folder: FolderStructure): Promise<void>\n```\n\nThis method recursively queries a given folder and its subfolders for documentation. It cleans deleted files from the cache, iterates through the files in the folder, and generates documentation for each file if it should be documented.\n\n### cleanDeletedFilesFromCache\n\n```typescript\nprivate cleanDeletedFilesFromCache(folder: FolderStructure): void\n```\n\nThis method cleans deleted files from the `DocumentationCache` by checking if the cached files still exist in the folder structure. If a file does not exist, it is removed from the cache.\n\n### shouldDocument\n\n```typescript\nprivate shouldDocument(file: FileStructure): boolean\n```\n\nThis method determines if a given file should be documented based on the `include` configuration. If the `include` configuration is not set, all files are considered for documentation. If the `include` configuration is set, the method checks if the file path is ignored by the include patterns. If the file path is ignored, the file should be documented.\n\n## Usage\n\nTo use the `FilesBuilder` class, you can create a new instance and call the `generate` method to generate documentation for the files in the project structure.\n\n```typescript\nconst filesBuilder = new FilesBuilder();\nawait filesBuilder.generate();\n```\n\nTo render the documentation for a specific `Document` instance, you can call the `render` method.\n\n```typescript\nconst document = new Document(...);\nconst documentation = await filesBuilder.render(document);\n```\n\nTo query a specific folder for documentation, you can call the `queryForFolder` method.\n\n```typescript\nconst folder = new FolderStructure(...);\nawait filesBuilder.queryForFolder(folder);\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:18:01.322Z",
		"sidebar_position": 0,
		"sidebar_label": "FilesBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Files",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FilesBuilder.ts\"\r\nThe file name is: FilesBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Ignore from \"ignore\";\r\n\r\n\r\nexport default class FilesBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('Files');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder);\r\n    }\r\n\r\n    public async render(document: Document) {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    public async queryForFolder(folder: FolderStructure) {\r\n        this.cleanDeletedFilesFromCache(folder);\r\n\r\n        let files = folder.files;\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.shouldDocument(file)) {\r\n                continue;\r\n            }\r\n\r\n            let document = DocumentationCache.get(file.path)\r\n            if (document && document.generator != \"Files\") continue;\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            let fileName = file.name;\r\n            let fileContent = FileStructure.getContent(file.path);\r\n\r\n            let assistantMessages = [];\r\n            let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n            let match;\r\n            while ((match = regex.exec(fileContent)) !== null) {\r\n                let content = FileStructure.getContent(match[1]);\r\n                let assistantFiles = 'These files might help with documentation.'\r\n                if (content != '') {\r\n                    assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n                }\r\n                assistantMessages.push(assistantFiles)\r\n            }\r\n\r\n            let args = {fileName, fileContent}\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: args,\r\n                name: fileName,\r\n                pathToFile: file.path,\r\n                folderPath: folder.path,\r\n                sidebarPosition: i,\r\n                sidebarLabel: fileName,\r\n                assistantMessages:assistantMessages\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private cleanDeletedFilesFromCache(folder: FolderStructure) {\r\n        let cachedFiles = DocumentationCache.getByFolderPath(folder.path);\r\n        for (let i=0;i<cachedFiles.length;i++) {\r\n            if (cachedFiles[i].isFolder) continue;\r\n\r\n            let fileExists = false;\r\n            for (let b=0;b<folder.files.length;b++) {\r\n                if (cachedFiles[i].path == folder.files[b].path) {\r\n                    b = folder.files.length;\r\n                    fileExists = true;\r\n                }\r\n            }\r\n            if (!fileExists) {\r\n                console.warn(`Remove file ${cachedFiles[i].path} from cache`)\r\n                //DocumentationCache.remove(cachedFiles[i]);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private shouldDocument(file: FileStructure) {\r\n        if (!this.config.include) return true;\r\n\r\n        const ignore = Ignore();\r\n        const includePatterns = ConfigHelper.config.include\r\n        ignore.add(includePatterns);\r\n        return ignore.ignores(file.path);\r\n    }\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Files\\FilesBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "Files"
		}
	},
	{
		"name": "FoldersBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Folders",
		"fileContent": "import Document from \"../../../Document\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../Base/../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\n\r\nexport default class FoldersBuilder extends BaseBuilder {\r\n\r\n    constructor() {\r\n        super('Folders');\r\n    }\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder, 30);\r\n    }\r\n\r\n    public async queryForFolder(folder: FolderStructure, position: number) {\r\n        //start on the last folder, so we can later build summary of each folder\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i], i+30);\r\n        }\r\n        let folderName =folder.name;\r\n        if (folder.name == '') {\r\n            return;\r\n        }\r\n\r\n        let document = DocumentationCache.get(folder.path);\r\n        if (!document) {\r\n            let fileAndFolderInfo: any = [];\r\n            folder.files.map(file => {\r\n                fileAndFolderInfo.push({\r\n                    name: file.name,\r\n                    path: file.path,\r\n                    fileOrFolder: 'file',\r\n                    summary: this.getFileSummary(file)\r\n                })\r\n            })\r\n            folder.folders.map((folder) => {\r\n                fileAndFolderInfo.push({\r\n                    name: folder.name,\r\n                    path: folder.path,\r\n                    fileOrFolder: 'folder',\r\n                    summary: this.getFolderSummary(folder)\r\n                })\r\n            })\r\n\r\n            let args = {\r\n                folderName,\r\n                repositoryUrl: ConfigHelper.config.repository_url,\r\n                path: folder.path.replaceAll('\\\\', '/'),\r\n                fileAndFolderInfo: JSON.stringify(fileAndFolderInfo)\r\n            }\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    name: \"README\",\r\n                    pathToFile: folder.path,\r\n                    folderPath: folder.path,\r\n                    saveToPath : folder.path,\r\n                    sidebarPosition: position,\r\n                    sidebarLabel : folderName\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private getFileSummary(file: FileStructure) {\r\n        let cache = DocumentationCache.get(file.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        if (cache.documentation.length> 350) {\r\n            return cache.documentation.substring(0, 350) + '...';\r\n        }\r\n\r\n        return cache.documentation;\r\n\r\n    }\r\n\r\n\r\n    private getFolderSummary(folder: FolderStructure) {\r\n        let cache = DocumentationCache.get(folder.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n\r\n}",
		"documentation": "# FoldersBuilder.ts\n\nThis is a TypeScript code file that defines a `FoldersBuilder` class, which is responsible for generating documentation for a folder structure in a project. The class extends the `BaseBuilder` class and provides methods to generate, query, and render documentation for folders and files within the project.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Methods](#methods)\n  - [generate](#generate)\n  - [queryForFolder](#queryForFolder)\n  - [render](#render)\n  - [getFileSummary](#getFileSummary)\n  - [getFolderSummary](#getFolderSummary)\n\n## Class Definition\n\n```typescript\nexport default class FoldersBuilder extends BaseBuilder {\n    ...\n}\n```\n\nThe `FoldersBuilder` class extends the `BaseBuilder` class and provides additional methods for generating and rendering documentation for a folder structure.\n\n## Methods\n\n### generate\n\n```typescript\npublic async generate(): Promise<void>\n```\n\nThis method generates the documentation for the project's folder structure. It creates a new `ProjectStructure` instance, retrieves the folder structure, and then queries for each folder in the structure.\n\n### queryForFolder\n\n```typescript\npublic async queryForFolder(folder: FolderStructure, position: number): Promise<void>\n```\n\nThis method takes a `FolderStructure` object and a `position` number as parameters. It recursively queries for each subfolder in the given folder and generates documentation for the files and folders within it. The documentation is then cached using the `DocumentationCache` class.\n\n### render\n\n```typescript\npublic async render(document: Document): Promise<string>\n```\n\nThis method takes a `Document` object as a parameter and returns the documentation as a string.\n\n### getFileSummary\n\n```typescript\nprivate getFileSummary(file: FileStructure): string\n```\n\nThis method takes a `FileStructure` object as a parameter and returns a summary of the file's documentation. It retrieves the cached documentation for the file and extracts a summary using a regular expression.\n\n### getFolderSummary\n\n```typescript\nprivate getFolderSummary(folder: FolderStructure): string\n```\n\nThis method takes a `FolderStructure` object as a parameter and returns a summary of the folder's documentation. It retrieves the cached documentation for the folder and extracts a summary using a regular expression.",
		"isFolder": false,
		"updated": "2023-04-14T15:19:24.905Z",
		"sidebar_position": 0,
		"sidebar_label": "FoldersBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Folders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FoldersBuilder.ts\"\r\nThe file name is: FoldersBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../Base/../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\n\r\nexport default class FoldersBuilder extends BaseBuilder {\r\n\r\n    constructor() {\r\n        super('Folders');\r\n    }\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder, 30);\r\n    }\r\n\r\n    public async queryForFolder(folder: FolderStructure, position: number) {\r\n        //start on the last folder, so we can later build summary of each folder\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i], i+30);\r\n        }\r\n        let folderName =folder.name;\r\n        if (folder.name == '') {\r\n            return;\r\n        }\r\n\r\n        let document = DocumentationCache.get(folder.path);\r\n        if (!document) {\r\n            let fileAndFolderInfo: any = [];\r\n            folder.files.map(file => {\r\n                fileAndFolderInfo.push({\r\n                    name: file.name,\r\n                    path: file.path,\r\n                    fileOrFolder: 'file',\r\n                    summary: this.getFileSummary(file)\r\n                })\r\n            })\r\n            folder.folders.map((folder) => {\r\n                fileAndFolderInfo.push({\r\n                    name: folder.name,\r\n                    path: folder.path,\r\n                    fileOrFolder: 'folder',\r\n                    summary: this.getFolderSummary(folder)\r\n                })\r\n            })\r\n\r\n            let args = {\r\n                folderName,\r\n                repositoryUrl: ConfigHelper.config.repository_url,\r\n                path: folder.path.replaceAll('\\\\', '/'),\r\n                fileAndFolderInfo: JSON.stringify(fileAndFolderInfo)\r\n            }\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    name: \"README\",\r\n                    pathToFile: folder.path,\r\n                    folderPath: folder.path,\r\n                    saveToPath : folder.path,\r\n                    sidebarPosition: position,\r\n                    sidebarLabel : folderName\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private getFileSummary(file: FileStructure) {\r\n        let cache = DocumentationCache.get(file.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        if (cache.documentation.length> 350) {\r\n            return cache.documentation.substring(0, 350) + '...';\r\n        }\r\n\r\n        return cache.documentation;\r\n\r\n    }\r\n\r\n\r\n    private getFolderSummary(folder: FolderStructure) {\r\n        let cache = DocumentationCache.get(folder.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "Folders"
		}
	},
	{
		"name": "HowToBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Howto\\HowToBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Howto",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport path from \"path\";\r\n\r\nexport default class HowToBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('HowTo');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        const regex = /:::\\s*howto\\s+(.*)/;\r\n        let projectStructure = new ProjectStructure();\r\n        let files = projectStructure.getAllFiles();\r\n        for (let i = 0; i < files.length; i++) {\r\n\r\n            let content = fs.readFileSync(files[i].path).toString()\r\n            const match = content.match(regex);\r\n            if (match) {\r\n\r\n                await this.makeHowTo(files[i], content, match[1])\r\n            }\r\n        }\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private async makeHowTo(fileStructure: FileStructure, content: string, name : string) {\r\n        let document = DocumentationCache.get(path.join('howto', name))\r\n        if (document) return;\r\n\r\n        let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n        let match;\r\n        let assistantMessages : string[] = [];\r\n        while ((match = regex.exec(content)) !== null) {\r\n            let content = FileStructure.getContent(match[1]);\r\n            let assistantFiles = `This is the ref document. ${match[1]}`\r\n            if (content != '') {\r\n                assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n            }\r\n            assistantMessages.push(assistantFiles)\r\n        }\r\n\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: {fileContent: content},\r\n            name: name,\r\n            pathToFile: `howto/${name}`,\r\n            folderPath: `howto`,\r\n            saveToPath: `howto/`,\r\n            assistantMessages : assistantMessages\r\n        })\r\n    }\r\n}",
		"documentation": "# HowToBuilder.ts\n\n`HowToBuilder.ts` is a TypeScript code file that provides a class `HowToBuilder` for generating and rendering documentation for \"how-to\" guides. The class extends the `BaseBuilder` class and is responsible for extracting and formatting \"how-to\" content from the given files.\n\n## Class: HowToBuilder\n\nThe `HowToBuilder` class is responsible for generating and rendering documentation for \"how-to\" guides.\n\n### Constructor\n\nThe constructor initializes the `HowToBuilder` class with the type 'HowTo'.\n\n```typescript\nconstructor() {\n    super('HowTo');\n}\n```\n\n### Method: generate\n\nThe `generate` method is an asynchronous method that iterates through all the files in the project structure, reads their content, and checks for the presence of a \"how-to\" guide using a regular expression. If a match is found, it calls the `makeHowTo` method to create the documentation for that guide.\n\n```typescript\npublic async generate() {\n    // ...\n}\n```\n\n### Method: render\n\nThe `render` method is an asynchronous method that takes a `Document` object as a parameter and returns the documentation content as a string.\n\n```typescript\npublic async render(document: Document): Promise<string> {\n    return document.documentation;\n}\n```\n\n### Method: makeHowTo\n\nThe `makeHowTo` method is a private asynchronous method that takes a `FileStructure` object, the content of the file, and the name of the \"how-to\" guide as parameters. It checks if the documentation for the guide already exists in the cache, and if not, it extracts the referenced documents using a regular expression and generates the documentation using the `generateDocumentationAndCache` method from the `BaseBuilder` class.\n\n```typescript\nprivate async makeHowTo(fileStructure: FileStructure, content: string, name : string) {\n    // ...\n}\n```\n\n## Usage\n\nTo use the `HowToBuilder` class, you need to import it and create an instance of the class. Then, you can call the `generate` method to generate the documentation for the \"how-to\" guides in your project.\n\n```typescript\nimport HowToBuilder from \"./HowToBuilder\";\n\nconst howToBuilder = new HowToBuilder();\nawait howToBuilder.generate();\n```\n\n## Technical Concepts\n\n- **Regular Expressions**: Regular expressions are used in this code to match and extract specific patterns in the file content, such as the \"how-to\" guide and referenced documents.\n- **FileStructure**: The `FileStructure` class is used to represent the structure of a file in the project. It provides methods for getting the content of a file and other file-related operations.\n- **DocumentationCache**: The `DocumentationCache` class is used to cache the generated documentation for faster access and to avoid unnecessary regeneration of the documentation.",
		"isFolder": false,
		"updated": "2023-04-14T15:21:14.923Z",
		"sidebar_position": 0,
		"sidebar_label": "HowToBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"HowToBuilder.ts\"\r\nThe file name is: HowToBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport path from \"path\";\r\n\r\nexport default class HowToBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('HowTo');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        const regex = /:::\\s*howto\\s+(.*)/;\r\n        let projectStructure = new ProjectStructure();\r\n        let files = projectStructure.getAllFiles();\r\n        for (let i = 0; i < files.length; i++) {\r\n\r\n            let content = fs.readFileSync(files[i].path).toString()\r\n            const match = content.match(regex);\r\n            if (match) {\r\n\r\n                await this.makeHowTo(files[i], content, match[1])\r\n            }\r\n        }\r\n    }\r\n\r\n    public async render(document: Document): Promise<string> {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private async makeHowTo(fileStructure: FileStructure, content: string, name : string) {\r\n        let document = DocumentationCache.get(path.join('howto', name))\r\n        if (document) return;\r\n\r\n        let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n        let match;\r\n        let assistantMessages : string[] = [];\r\n        while ((match = regex.exec(content)) !== null) {\r\n            let content = FileStructure.getContent(match[1]);\r\n            let assistantFiles = `This is the ref document. ${match[1]}`\r\n            if (content != '') {\r\n                assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n            }\r\n            assistantMessages.push(assistantFiles)\r\n        }\r\n\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: {fileContent: content},\r\n            name: name,\r\n            pathToFile: `howto/${name}`,\r\n            folderPath: `howto`,\r\n            saveToPath: `howto/`,\r\n            assistantMessages : assistantMessages\r\n        })\r\n    }\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Howto\\HowToBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "Howto"
		}
	},
	{
		"name": "UserDefinedBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "import Document from \"../../../Document\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport fs from \"fs\";\r\nimport jsonpath from \"jsonpath\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\r\n\r\nexport default class UserDefinedBuilder extends BaseBuilder {\r\n    constructor() {\r\n        super('UserDefined');\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public async generate() {\r\n        let project_path = process.cwd();\r\n        for (let i = 0; this.config.builders && i < this.config.builders.length; i++) {\r\n            let build = this.config.builders[i];\r\n\r\n            let templatePath = build.template;\r\n            templatePath = `.code-narrator/gpt_questions/${templatePath}`;\r\n\r\n            if (!fs.existsSync(path.join(process.cwd(), `${templatePath}.liquid`))) {\r\n                console.log(path.join(process.cwd(), templatePath))\r\n                throw new Error(`Could not find ${build.template}.liquid template. You can create it at ${templatePath}.liquid`)\r\n\r\n            }\r\n            let saveToPath = build.path ?? '';\r\n            if (saveToPath == '' && build.type == 'howto') {\r\n                saveToPath = 'howto'\r\n            }\r\n\r\n\r\n            let docId = path.join(saveToPath, build.template);\r\n            let document = DocumentationCache.get(docId)\r\n            if (!document) {\r\n                docId = docId + ConfigHelper.config.document_file_extension\r\n                document = DocumentationCache.get(docId)\r\n            }\r\n            if (!this.hasTemplateChanged(document, templatePath)) continue;\r\n\r\n            let helper = new UserDefinedBuilderHelper();\r\n            helper.loadArgs(build, project_path)\r\n            let assistantMessages = await helper.getAssistantMessages(build);\r\n\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: build.args ?? {},\r\n                name: build.name,\r\n                template: templatePath,\r\n                pathToFile: path.join(saveToPath, build.template + ConfigHelper.config.document_file_extension),\r\n                folderPath: saveToPath,\r\n                saveToPath: saveToPath,\r\n                sidebarPosition: build.sidebarPosition ?? (i + 10),\r\n                sidebarLabel: build.sidebarLabel ?? build.name,\r\n                assistantMessages: assistantMessages\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    public async render(document: Document) {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private hasTemplateChanged(document: Document | undefined, templatePath: string) {\r\n        if (!document) return true;\r\n\r\n        let stats = fs.statSync(templatePath + '.liquid');\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}\r\n",
		"documentation": "# UserDefinedBuilder.ts\n\nThis is a TypeScript code file that defines a class named `UserDefinedBuilder` which extends the `BaseBuilder` class. The purpose of this class is to generate and render user-defined documentation based on templates and configurations.\n\n## Usage\n\nTo use the `UserDefinedBuilder` class, you need to import it and create an instance of the class. Then, you can call its methods to generate and render the documentation.\n\n```typescript\nimport UserDefinedBuilder from \"./UserDefinedBuilder\";\n\nconst userDefinedBuilder = new UserDefinedBuilder();\nawait userDefinedBuilder.generate();\n```\n\n## Methods\n\n### constructor()\n\nThe constructor initializes the `UserDefinedBuilder` instance and sets its type to 'UserDefined'.\n\n### extractPathFromContent(input: string): string | null\n\nThis method takes an input string and extracts the content path using a regular expression. It returns the extracted path or null if no match is found.\n\n#### Parameters\n\n- `input`: A string containing the content path.\n\n### generate(): Promise<void>\n\nThis asynchronous method generates the user-defined documentation based on the provided configuration and templates. It iterates through the builders in the configuration, checks if the template has changed, and generates the documentation using the `UserDefinedBuilderHelper` class.\n\n### render(document: Document): Promise<string>\n\nThis asynchronous method takes a `Document` object and returns its documentation as a string.\n\n#### Parameters\n\n- `document`: A `Document` object containing the documentation to be rendered.\n\n### hasTemplateChanged(document: Document | undefined, templatePath: string): boolean\n\nThis method checks if the template has changed since the last update of the document. It returns true if the template has changed or if the document is undefined, and false otherwise.\n\n#### Parameters\n\n- `document`: A `Document` object or undefined.\n- `templatePath`: A string representing the path to the template file.\n\n## Helper Classes\n\nThe `UserDefinedBuilder` class uses the following helper classes:\n\n- `UserDefinedBuilderHelper`: This class is responsible for loading arguments, getting assistant messages, and generating the documentation.\n- `ConfigHelper`: This class helps with managing the configuration settings.\n- `DocumentationCache`: This class is responsible for caching the generated documentation.\n- `FileStructure`: This class helps with managing the file structure of the project.\n- `Helper`: This class contains utility functions.\n\n## Dependencies\n\nThe `UserDefinedBuilder` class depends on the following external libraries:\n\n- `path`: A built-in Node.js module for working with file and directory paths.\n- `fs`: A built-in Node.js module for working with the file system.\n- `jsonpath`: A library for working with JSONPath expressions.",
		"isFolder": false,
		"updated": "2023-04-14T15:22:52.057Z",
		"sidebar_position": 0,
		"sidebar_label": "UserDefinedBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"UserDefinedBuilder.ts\"\r\nThe file name is: UserDefinedBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport fs from \"fs\";\r\nimport jsonpath from \"jsonpath\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\r\n\r\nexport default class UserDefinedBuilder extends BaseBuilder {\r\n    constructor() {\r\n        super('UserDefined');\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public async generate() {\r\n        let project_path = process.cwd();\r\n        for (let i = 0; this.config.builders && i < this.config.builders.length; i++) {\r\n            let build = this.config.builders[i];\r\n\r\n            let templatePath = build.template;\r\n            templatePath = `.code-narrator/gpt_questions/${templatePath}`;\r\n\r\n            if (!fs.existsSync(path.join(process.cwd(), `${templatePath}.liquid`))) {\r\n                console.log(path.join(process.cwd(), templatePath))\r\n                throw new Error(`Could not find ${build.template}.liquid template. You can create it at ${templatePath}.liquid`)\r\n\r\n            }\r\n            let saveToPath = build.path ?? '';\r\n            if (saveToPath == '' && build.type == 'howto') {\r\n                saveToPath = 'howto'\r\n            }\r\n\r\n\r\n            let docId = path.join(saveToPath, build.template);\r\n            let document = DocumentationCache.get(docId)\r\n            if (!document) {\r\n                docId = docId + ConfigHelper.config.document_file_extension\r\n                document = DocumentationCache.get(docId)\r\n            }\r\n            if (!this.hasTemplateChanged(document, templatePath)) continue;\r\n\r\n            let helper = new UserDefinedBuilderHelper();\r\n            helper.loadArgs(build, project_path)\r\n            let assistantMessages = await helper.getAssistantMessages(build);\r\n\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: build.args ?? {},\r\n                name: build.name,\r\n                template: templatePath,\r\n                pathToFile: path.join(saveToPath, build.template + ConfigHelper.config.document_file_extension),\r\n                folderPath: saveToPath,\r\n                saveToPath: saveToPath,\r\n                sidebarPosition: build.sidebarPosition ?? (i + 10),\r\n                sidebarLabel: build.sidebarLabel ?? build.name,\r\n                assistantMessages: assistantMessages\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    public async render(document: Document) {\r\n        return document.documentation;\r\n    }\r\n\r\n\r\n    private hasTemplateChanged(document: Document | undefined, templatePath: string) {\r\n        if (!document) return true;\r\n\r\n        let stats = fs.statSync(templatePath + '.liquid');\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilder.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "UserDefined"
		}
	},
	{
		"name": "UserDefinedBuilderHelper.ts",
		"path": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilderHelper.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "import FileStructure from \"../../../../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport IBuilder from \"../../../../config/IBuilder\";\r\nimport jsonpath from \"jsonpath\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport OpenAIRepository from \"../../../../repositories/OpenAIRepository\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\n\r\nexport default class UserDefinedBuilderHelper {\r\n\r\n    openAIRepository: OpenAIRepository;\r\n\r\n    constructor() {\r\n        this.openAIRepository = new OpenAIRepository();\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public loadArgs(build: IBuilder, project_path: string) {\r\n        if (build.args) {\r\n            let argKeys = Object.getOwnPropertyNames(build.args);\r\n            for (let i = 0; i < argKeys.length; i++) {\r\n                let filePath = this.extractPathFromContent(build.args[argKeys[i]])\r\n                if (filePath) {\r\n                    let content = FileStructure.getContent(path.join(project_path, filePath))\r\n                    if (content == '') {\r\n                        console.warn(`Content is empty for file ${filePath}`)\r\n                    }\r\n                    build.args[argKeys[i]] = content;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAssistantMessages(build: IBuilder) {\r\n        let assistantMessages: string[] = []\r\n        let predefinedQuestions = this.getPredefinedQuestion(build.type);\r\n        if (predefinedQuestions) assistantMessages.push(predefinedQuestions);\r\n        let files = build.files;\r\n        for (let i = 0; files && i < files.length; i++) {\r\n            let content = FileStructure.getContent(path.join(process.cwd(), files[i].path));\r\n            let extraInfo = '';\r\n            if (files[i].JSONPath && files[i].path.indexOf('.json') != -1) {\r\n                let obj = JSON.parse(content);\r\n                for (let b = 0; b < files[i].JSONPath.length; b++) {\r\n                    let result = jsonpath.query(obj, files[i].JSONPath[b]);\r\n                    for (let c = 0; c < result.length; c++) {\r\n                        extraInfo += `${files[i].JSONPath[b]}:${JSON.stringify(result[c])}\\n`;\r\n                    }\r\n                }\r\n            } else if (files[i].extract) {\r\n                let extractContent = Array.isArray(files[i].extract) ? files[i].extract.join(', ') : files[i].extract;\r\n                let question = `Extract following from file content:\r\n                     ${extractContent} \r\n                     This is the file:\r\n                     ${content}`\r\n\r\n                let result = await this.openAIRepository.queryQuestions([question], 0, ConfigHelper.config.gptModel, ['Return JSON format'])\r\n                let jsons = Helper.getJsons(result.answer);\r\n                if (jsons.length > 0) {\r\n                    extraInfo = `Content to help: ${JSON.stringify(jsons[0])}`\r\n                }\r\n            } else if (files[i].path.indexOf(ConfigHelper.config.document_file_extension) != -1) {\r\n                if (files[i].path.indexOf('*') != -1) {\r\n                    let dirFiles = this.findFiles(files[i].path);\r\n                    dirFiles.forEach(file => {\r\n                        let overview = this.extractContentBetweenHeaders(file.documentation);\r\n                        extraInfo += `This is first paragraph from file \"${path.basename(files[i].path)}\"\r\n                         ${overview}\r\n                         `\r\n                    })\r\n                } else {\r\n                    let overview = this.extractContentBetweenHeaders(content);\r\n                    extraInfo = `Here is overview for ${files[i].path}\\n${overview}`\r\n                }\r\n            } else {\r\n                extraInfo = `File Content for ${files[i].path}\\n${content}`\r\n            }\r\n            if (extraInfo) {\r\n                assistantMessages.push(extraInfo)\r\n            }\r\n\r\n        }\r\n        return assistantMessages;\r\n    }\r\n\r\n    private getPredefinedQuestion(type: string) {\r\n        if (type == 'howto') {\r\n            return `I want you to create a detailed How To guide from the user input.\r\n            It should have Title, Introduction, Step-by-Step Instructions`\r\n        } else if (type == 'readme') {\r\n            return `I want you to create a detail README file for this project. Here is a description:`\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public extractContentBetweenHeaders(markdown: string): string {\r\n        if (markdown.length < 350) return markdown;\r\n        return markdown.substring(0, 350) + \"...\";\r\n\r\n    }\r\n\r\n    public findFiles(patternString: string) {\r\n       const dir = patternString.split('/')[0];\r\n        return DocumentationCache.getByFolderPath(dir)\r\n    }\r\n\r\n}",
		"documentation": "# UserDefinedBuilderHelper.ts\n\nThe `UserDefinedBuilderHelper.ts` file is a TypeScript code file that exports a class named `UserDefinedBuilderHelper`. This class provides various utility methods to help with building user-defined content, such as extracting paths, loading arguments, and getting assistant messages.\n\n## Class: UserDefinedBuilderHelper\n\n### Constructor\n\nThe constructor initializes an instance of the `OpenAIRepository` class.\n\n### Method: extractPathFromContent(input: string): string | null\n\nThis method takes an input string and extracts the path from the content using a regular expression. It returns the extracted path as a string or null if no match is found.\n\n### Method: loadArgs(build: IBuilder, project_path: string)\n\nThis method takes an `IBuilder` object and a project path as arguments. It loads the arguments from the build object and replaces the content of the arguments with the content of the file specified by the file path.\n\n### Method: getAssistantMessages(build: IBuilder): Promise<string[]>\n\nThis method takes an `IBuilder` object as an argument and returns a promise that resolves to an array of assistant messages. It retrieves predefined questions based on the build type and processes the files in the build object to generate assistant messages.\n\n### Method: getPredefinedQuestion(type: string): string | undefined\n\nThis method takes a string representing the build type and returns a predefined question based on the type. If the type is 'howto', it returns a question for creating a detailed How To guide. If the type is 'readme', it returns a question for creating a detailed README file.\n\n### Method: extractContentBetweenHeaders(markdown: string): string\n\nThis method takes a markdown string as an argument and returns a substring of the markdown content between headers. If the markdown length is less than 350 characters, it returns the entire markdown content. Otherwise, it returns the first 350 characters followed by an ellipsis.\n\n### Method: findFiles(patternString: string): DocumentationCache[]\n\nThis method takes a pattern string as an argument and returns an array of `DocumentationCache` objects that match the specified folder path.\n\n## Usage\n\nTo use the `UserDefinedBuilderHelper` class, you can import it and create a new instance:\n\n```typescript\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\n\nconst userDefinedBuilderHelper = new UserDefinedBuilderHelper();\n```\n\nThen, you can call the various methods on the `userDefinedBuilderHelper` instance:\n\n```typescript\nconst extractedPath = userDefinedBuilderHelper.extractPathFromContent(input);\nuserDefinedBuilderHelper.loadArgs(build, project_path);\nconst assistantMessages = await userDefinedBuilderHelper.getAssistantMessages(build);\nconst predefinedQuestion = userDefinedBuilderHelper.getPredefinedQuestion(type);\nconst contentBetweenHeaders = userDefinedBuilderHelper.extractContentBetweenHeaders(markdown);\nconst foundFiles = userDefinedBuilderHelper.findFiles(patternString);\n```\n\n## Technical Concepts\n\n- `OpenAIRepository`: A class that provides methods for querying OpenAI's GPT models.\n- `IBuilder`: An interface that defines the structure of a build object.\n- `DocumentationCache`: A class that represents a cache of documentation files.",
		"isFolder": false,
		"updated": "2023-04-14T15:24:52.227Z",
		"sidebar_position": 1,
		"sidebar_label": "UserDefinedBuilderHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"UserDefinedBuilderHelper.ts\"\r\nThe file name is: UserDefinedBuilderHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport IBuilder from \"../../../../config/IBuilder\";\r\nimport jsonpath from \"jsonpath\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport OpenAIRepository from \"../../../../repositories/OpenAIRepository\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\n\r\nexport default class UserDefinedBuilderHelper {\r\n\r\n    openAIRepository: OpenAIRepository;\r\n\r\n    constructor() {\r\n        this.openAIRepository = new OpenAIRepository();\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public loadArgs(build: IBuilder, project_path: string) {\r\n        if (build.args) {\r\n            let argKeys = Object.getOwnPropertyNames(build.args);\r\n            for (let i = 0; i < argKeys.length; i++) {\r\n                let filePath = this.extractPathFromContent(build.args[argKeys[i]])\r\n                if (filePath) {\r\n                    let content = FileStructure.getContent(path.join(project_path, filePath))\r\n                    if (content == '') {\r\n                        console.warn(`Content is empty for file ${filePath}`)\r\n                    }\r\n                    build.args[argKeys[i]] = content;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAssistantMessages(build: IBuilder) {\r\n        let assistantMessages: string[] = []\r\n        let predefinedQuestions = this.getPredefinedQuestion(build.type);\r\n        if (predefinedQuestions) assistantMessages.push(predefinedQuestions);\r\n        let files = build.files;\r\n        for (let i = 0; files && i < files.length; i++) {\r\n            let content = FileStructure.getContent(path.join(process.cwd(), files[i].path));\r\n            let extraInfo = '';\r\n            if (files[i].JSONPath && files[i].path.indexOf('.json') != -1) {\r\n                let obj = JSON.parse(content);\r\n                for (let b = 0; b < files[i].JSONPath.length; b++) {\r\n                    let result = jsonpath.query(obj, files[i].JSONPath[b]);\r\n                    for (let c = 0; c < result.length; c++) {\r\n                        extraInfo += `${files[i].JSONPath[b]}:${JSON.stringify(result[c])}\\n`;\r\n                    }\r\n                }\r\n            } else if (files[i].extract) {\r\n                let extractContent = Array.isArray(files[i].extract) ? files[i].extract.join(', ') : files[i].extract;\r\n                let question = `Extract following from file content:\r\n                     ${extractContent} \r\n                     This is the file:\r\n                     ${content}`\r\n\r\n                let result = await this.openAIRepository.queryQuestions([question], 0, ConfigHelper.config.gptModel, ['Return JSON format'])\r\n                let jsons = Helper.getJsons(result.answer);\r\n                if (jsons.length > 0) {\r\n                    extraInfo = `Content to help: ${JSON.stringify(jsons[0])}`\r\n                }\r\n            } else if (files[i].path.indexOf(ConfigHelper.config.document_file_extension) != -1) {\r\n                if (files[i].path.indexOf('*') != -1) {\r\n                    let dirFiles = this.findFiles(files[i].path);\r\n                    dirFiles.forEach(file => {\r\n                        let overview = this.extractContentBetweenHeaders(file.documentation);\r\n                        extraInfo += `This is first paragraph from file \"${path.basename(files[i].path)}\"\r\n                         ${overview}\r\n                         `\r\n                    })\r\n                } else {\r\n                    let overview = this.extractContentBetweenHeaders(content);\r\n                    extraInfo = `Here is overview for ${files[i].path}\\n${overview}`\r\n                }\r\n            } else {\r\n                extraInfo = `File Content for ${files[i].path}\\n${content}`\r\n            }\r\n            if (extraInfo) {\r\n                assistantMessages.push(extraInfo)\r\n            }\r\n\r\n        }\r\n        return assistantMessages;\r\n    }\r\n\r\n    private getPredefinedQuestion(type: string) {\r\n        if (type == 'howto') {\r\n            return `I want you to create a detailed How To guide from the user input.\r\n            It should have Title, Introduction, Step-by-Step Instructions`\r\n        } else if (type == 'readme') {\r\n            return `I want you to create a detail README file for this project. Here is a description:`\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public extractContentBetweenHeaders(markdown: string): string {\r\n        if (markdown.length < 350) return markdown;\r\n        return markdown.substring(0, 350) + \"...\";\r\n\r\n    }\r\n\r\n    public findFiles(patternString: string) {\r\n       const dir = patternString.split('/')[0];\r\n        return DocumentationCache.getByFolderPath(dir)\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilderHelper.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "UserDefined"
		}
	},
	{
		"name": "BaseGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\BaseGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import Document from \"../../Document\";\r\n\r\n/*\r\nThis is the Base class for Generator plugins. Generator plugins are used to parse the documentation\r\nand modify it for the build tool you are using to build the documentation.\r\n\r\nDefault plugin with code-narrator is Docusaurus since it fails to build when a function contains\r\na Promise<> in return. This plugin clear that Promise from the function name so it can build.\r\nIt also creates sidebar information.\r\n */\r\nexport default abstract class BaseGenerator {\r\n\r\n    abstract process(document : Document) : Document;\r\n}",
		"documentation": "# BaseGenerator.ts\n\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\n\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\n\n## Usage\n\nTo use this class, you need to create a new class that extends the `BaseGenerator` class and implement the `process` method.\n\n```typescript\nimport BaseGenerator from \"./BaseGenerator\";\nimport Document from \"../../Document\";\n\nclass CustomGenerator extends BaseGenerator {\n    process(document: Document): Document {\n        // Your custom implementation here\n    }\n}\n```\n\n## Methods\n\n### process(document: Document): Document\n\nThis is an abstract method that should be implemented by the derived class. It takes a `Document` object as input and returns a modified `Document` object.\n\n#### Parameters\n\n- `document` (Document): The input `Document` object that needs to be processed.\n\n#### Returns\n\n- `Document`: The modified `Document` object after processing.\n\n## Technical Concepts\n\n### Document\n\nThe `Document` class is a custom class that represents the documentation structure. It contains information about the documentation, such as the content, metadata, and other relevant details.\n\n### Promise\n\nA `Promise` is a standard JavaScript concept that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. In this context, the `BaseGenerator` class is designed to handle cases where a function contains a `Promise<>` in its return type, which can cause issues with some build tools like Docusaurus.",
		"isFolder": false,
		"updated": "2023-04-14T15:25:58.675Z",
		"sidebar_position": 0,
		"sidebar_label": "BaseGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BaseGenerator.ts\"\r\nThe file name is: BaseGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../Document\";\r\n\r\n/*\r\nThis is the Base class for Generator plugins. Generator plugins are used to parse the documentation\r\nand modify it for the build tool you are using to build the documentation.\r\n\r\nDefault plugin with code-narrator is Docusaurus since it fails to build when a function contains\r\na Promise<> in return. This plugin clear that Promise from the function name so it can build.\r\nIt also creates sidebar information.\r\n */\r\nexport default abstract class BaseGenerator {\r\n\r\n    abstract process(document : Document) : Document;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\BaseGenerator.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "generators"
		}
	},
	{
		"name": "DocusaurusGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus\\DocusaurusGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "import BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\n\n## Usage\n\nTo use the `DocusaurusGenerator` class, you need to import it and create an instance of the class. Then, call the `process()` method with a `Document` object as its argument.\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Class Description\n\n### DocusaurusGenerator\n\nThe `DocusaurusGenerator` class extends the `BaseGenerator` class and overrides the `process()` method to process a `Document` object and generate documentation compatible with Docusaurus.\n\n#### Methods\n\n##### process(document: Document): Document\n\nThe `process()` method takes a `Document` object as its argument and processes it to generate documentation compatible with Docusaurus. It returns the processed `Document` object.\n\n###### Parameters\n\n- `document: Document`: The `Document` object to be processed.\n\n###### Technical Concepts\n\n- Docusaurus: Docusaurus is a static site generator that makes it easy to build and maintain open-source documentation websites. It supports Markdown and allows you to create custom pages with React components.\n\n## Example\n\nHere's an example of how to use the `DocusaurusGenerator` class:\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document({\n  name: 'Example',\n  sidebar_label: 'Example Label',\n  sidebar_position: 2,\n  documentation: 'This is an example documentation.',\n});\n\nconst processedDocument = generator.process(document);\nconsole.log(processedDocument.documentation);\n```\n\nThis will output the following processed documentation:\n\n```\n---\nsidebar_position: 2\nsidebar_label: Example Label\n---\n\nThis is an example documentation.\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:27:23.257Z",
		"sidebar_position": 0,
		"sidebar_label": "DocusaurusGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocusaurusGenerator.ts\"\r\nThe file name is: DocusaurusGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus\\DocusaurusGenerator.ts",
		"lastTouch": "2023-04-15T09:47:59.737Z"
	},
	{
		"name": "IProjectDocumentedSettings.ts",
		"path": "src\\model\\IProjectDocumentedSettings.ts",
		"folderPath": "src\\model",
		"fileContent": "export default interface IProjectDocumentedSettings {\r\n    project_file: string\r\n    config_file: string\r\n    entry_file: string\r\n    cli_file: string\r\n    project_path: string\r\n    source_path: string\r\n    documentation_path: string\r\n    test_path: string\r\n    exclude : string[]\r\n    readmeRoot : boolean\r\n\r\n    name: string\r\n    version: string\r\n    homepage: string\r\n    bugs: string\r\n    repository: string\r\n    language: string\r\n    framework: string\r\n    entry: string\r\n    cli: string\r\n    readme: string\r\n}",
		"documentation": "# IProjectDocumentedSettings.ts\n\nThis is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\n\n## Interface Description\n\nThe `IProjectDocumentedSettings` interface contains properties that store information about a project's configuration, file paths, and metadata. These properties are used to configure the project's documentation generation process.\n\n## Properties\n\nThe `IProjectDocumentedSettings` interface contains the following properties:\n\n- `project_file: string`: The path to the project file.\n- `config_file: string`: The path to the configuration file.\n- `entry_file: string`: The path to the entry file.\n- `cli_file: string`: The path to the CLI file.\n- `project_path: string`: The path to the project directory.\n- `source_path: string`: The path to the source code directory.\n- `documentation_path: string`: The path to the documentation directory.\n- `test_path: string`: The path to the test directory.\n- `exclude: string[]`: An array of file paths to be excluded from the documentation generation process.\n- `readmeRoot: boolean`: A flag indicating whether the README file should be placed at the root of the project.\n\n### Metadata Properties\n\nThese properties store metadata about the project:\n\n- `name: string`: The name of the project.\n- `version: string`: The version of the project.\n- `homepage: string`: The URL of the project's homepage.\n- `bugs: string`: The URL where users can report bugs.\n- `repository: string`: The URL of the project's repository.\n- `language: string`: The programming language used in the project.\n- `framework: string`: The framework used in the project.\n- `entry: string`: The entry point of the project.\n- `cli: string`: The command-line interface of the project.\n- `readme: string`: The path to the README file.\n\n## Usage\n\nTo use the `IProjectDocumentedSettings` interface, import it into your TypeScript file and create an object that implements the interface. Here's an example:\n\n```typescript\nimport IProjectDocumentedSettings from './IProjectDocumentedSettings';\n\nconst projectSettings: IProjectDocumentedSettings = {\n  project_file: 'path/to/project/file',\n  config_file: 'path/to/config/file',\n  entry_file: 'path/to/entry/file',\n  cli_file: 'path/to/cli/file',\n  project_path: 'path/to/project',\n  source_path: 'path/to/source',\n  documentation_path: 'path/to/documentation',\n  test_path: 'path/to/test',\n  exclude: ['path/to/exclude/file1', 'path/to/exclude/file2'],\n  readmeRoot: true,\n\n  name: 'My Project',\n  version: '1.0.0',\n  homepage: 'https://example.com',\n  bugs: 'https://example.com/bugs',\n  repository: 'https://github.com/user/repo',\n  language: 'TypeScript',\n  framework: 'React',\n  entry: 'src/index.ts',\n  cli: 'src/cli.ts',\n  readme: 'README.md',\n};\n```\n\nWith the `projectSettings` object, you can now access and manipulate the properties of the `IProjectDocumentedSettings` interface as needed.",
		"isFolder": false,
		"updated": "2023-04-14T15:29:30.341Z",
		"sidebar_position": 0,
		"sidebar_label": "IProjectDocumentedSettings.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"IProjectDocumentedSettings.ts\"\r\nThe file name is: IProjectDocumentedSettings.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default interface IProjectDocumentedSettings {\r\n    project_file: string\r\n    config_file: string\r\n    entry_file: string\r\n    cli_file: string\r\n    project_path: string\r\n    source_path: string\r\n    documentation_path: string\r\n    test_path: string\r\n    exclude : string[]\r\n    readmeRoot : boolean\r\n\r\n    name: string\r\n    version: string\r\n    homepage: string\r\n    bugs: string\r\n    repository: string\r\n    language: string\r\n    framework: string\r\n    entry: string\r\n    cli: string\r\n    readme: string\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\model\\IProjectDocumentedSettings.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "model"
		}
	},
	{
		"name": "OpenAIResponse.ts",
		"path": "src\\model\\OpenAIResponse.ts",
		"folderPath": "src\\model",
		"fileContent": "import {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface OpenAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}",
		"documentation": "# OpenAIResponse.ts\n\n## Overview\n\nThe `OpenAIResponse.ts` file is a TypeScript code file that defines an interface called `OpenAIResponse`. This interface is used to represent the response from the OpenAI API after processing a chat completion request. The response contains an answer and an array of request messages.\n\n## Usage\n\nTo use the `OpenAIResponse` interface in your TypeScript project, you can import it and implement it in your classes or functions that interact with the OpenAI API. Here's an example of how to use the `OpenAIResponse` interface:\n\n```typescript\nimport OpenAIResponse from \"./OpenAIResponse\";\n\nfunction processOpenAIResponse(response: OpenAIResponse) {\n  console.log(\"Answer:\", response.answer);\n  console.log(\"Request Messages:\", response.requestMessages);\n}\n```\n\n## Interface Description\n\n### OpenAIResponse\n\nThe `OpenAIResponse` interface contains two properties:\n\n#### answer: string\n\nThe `answer` property is a string that represents the answer generated by the OpenAI API after processing the chat completion request.\n\n#### requestMessages: ChatCompletionRequestMessage[]\n\nThe `requestMessages` property is an array of `ChatCompletionRequestMessage` objects. Each object in the array represents a message that was sent as part of the chat completion request to the OpenAI API.\n\n## Parameters\n\n### ChatCompletionRequestMessage\n\nThe `ChatCompletionRequestMessage` is an interface imported from the `openai` package. It represents a message object that is sent as part of the chat completion request to the OpenAI API. The interface contains the following properties:\n\n- `role`: string - The role of the message sender, either \"system\", \"user\", or \"assistant\".\n- `content`: string - The content of the message.\n\n## Technical Concepts\n\n### TypeScript Interfaces\n\nIn TypeScript, interfaces are used to define the structure of an object. They can be used to enforce a specific shape for objects, ensuring that they have the required properties with the correct types. In this code file, the `OpenAIResponse` interface is used to define the structure of the response object returned by the OpenAI API.\n\n### JSON\n\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. JSON is a text format that is completely language-independent but uses conventions that are familiar to programmers of the C family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. In this code file, JSON is not explicitly used, but the response from the OpenAI API is typically in JSON format, which is then converted to a TypeScript object implementing the `OpenAIResponse` interface.",
		"isFolder": false,
		"updated": "2023-04-14T15:31:12.924Z",
		"sidebar_position": 1,
		"sidebar_label": "OpenAIResponse.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIResponse.ts\"\r\nThe file name is: OpenAIResponse.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface OpenAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\model\\OpenAIResponse.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "model"
		}
	},
	{
		"name": "OpenAIRepository.ts",
		"path": "src\\repositories\\OpenAIRepository.ts",
		"folderPath": "src\\repositories",
		"fileContent": "import {ChatCompletionRequestMessage, Configuration, CreateCompletionResponseChoicesInner, OpenAIApi} from 'openai';\r\nimport { setTimeout } from 'timers/promises';\r\nimport {CreateChatCompletionResponseChoicesInner} from \"openai/api\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport OpenAIResponse from \"../model/OpenAIResponse\";\r\n\r\nexport default class OpenAIRepository {\r\n    openai: OpenAIApi;\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n\r\n    public async query(text : string) : Promise<OpenAIResponse> {\r\n        return this.queryQuestions([text]);\r\n    }\r\n    public async queryQuestions(questions : string[], errorCount = 0, model? : string, assistantMessages? : string[]): Promise<OpenAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            if (!model) model = config.gptModel;\r\n\r\n\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = (model.indexOf('gpt-4') != -1) ? 8192 : 4096;\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/0.80).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as OpenAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : OpenAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            if (e?.response?.data?.error && e.response.data.error.message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(e.response.data.error.message);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', e.response?.data?.error?.message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n            //console.error(e);\r\n            return  {answer:'', requestMessages: messages} as OpenAIResponse;\r\n            //throw e;\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}",
		"documentation": "# OpenAIRepository.ts\n\nThis TypeScript file defines a class called `OpenAIRepository` that provides methods to interact with the OpenAI API. The class is responsible for querying the OpenAI API and handling the responses.\n\n## Class: OpenAIRepository\n\n### Constructor\n\nThe constructor initializes the `OpenAIApi` instance with the API key from the `ConfigHelper`.\n\n### Methods\n\n#### query(text: string): Promise<OpenAIResponse>\n\nThis method takes a single question as a string and returns a Promise that resolves to an `OpenAIResponse` object. It internally calls the `queryQuestions` method with the single question.\n\nExample:\n\n```typescript\nconst openAIRepo = new OpenAIRepository();\nopenAIRepo.query(\"What is the capital of France?\").then((response) => {\n  console.log(response.answer);\n});\n```\n\n#### queryQuestions(questions: string[], errorCount = 0, model?: string, assistantMessages?: string[]): Promise<OpenAIResponse>\n\nThis method takes an array of questions, an optional error count, an optional model, and an optional array of assistant messages. It returns a Promise that resolves to an `OpenAIResponse` object.\n\nThe method constructs a series of messages, including system commands, user questions, and assistant messages, and sends them to the OpenAI API. It handles errors and retries if necessary.\n\nExample:\n\n```typescript\nconst openAIRepo = new OpenAIRepository();\nopenAIRepo\n  .queryQuestions([\"What is the capital of France?\", \"What is the capital of Germany?\"])\n  .then((response) => {\n    console.log(response.answer);\n  });\n```\n\n### Error Handling\n\nThe `queryQuestions` method handles various error scenarios, such as exceeding the quota, retrying on specific HTTP status codes, and logging errors.\n\n## Models\n\n### OpenAIResponse\n\nThis interface represents the response from the OpenAI API. It contains the following properties:\n\n- `answer`: The answer generated by the OpenAI API.\n- `requestMessages`: The array of messages sent to the OpenAI API.\n\n## Configuration and Helper Classes\n\n- `ConfigHelper`: A helper class that provides access to the configuration settings, such as the OpenAI API key and GPT model.\n- `Configuration`: A class from the `openai` package that is used to configure the OpenAI API instance.\n- `OpenAIApi`: A class from the `openai` package that provides methods to interact with the OpenAI API.\n\n## Dependencies\n\n- `openai`: The package that provides the OpenAI API client.\n- `timers/promises`: A package that provides the `setTimeout` function for promises.",
		"isFolder": false,
		"updated": "2023-04-14T15:32:49.214Z",
		"sidebar_position": 0,
		"sidebar_label": "OpenAIRepository.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIRepository.ts\"\r\nThe file name is: OpenAIRepository.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage, Configuration, CreateCompletionResponseChoicesInner, OpenAIApi} from 'openai';\r\nimport { setTimeout } from 'timers/promises';\r\nimport {CreateChatCompletionResponseChoicesInner} from \"openai/api\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport OpenAIResponse from \"../model/OpenAIResponse\";\r\n\r\nexport default class OpenAIRepository {\r\n    openai: OpenAIApi;\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n\r\n    public async query(text : string) : Promise<OpenAIResponse> {\r\n        return this.queryQuestions([text]);\r\n    }\r\n    public async queryQuestions(questions : string[], errorCount = 0, model? : string, assistantMessages? : string[]): Promise<OpenAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            if (!model) model = config.gptModel;\r\n\r\n\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = (model.indexOf('gpt-4') != -1) ? 8192 : 4096;\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/0.80).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as OpenAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : OpenAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            if (e?.response?.data?.error && e.response.data.error.message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(e.response.data.error.message);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', e.response?.data?.error?.message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n            //console.error(e);\r\n            return  {answer:'', requestMessages: messages} as OpenAIResponse;\r\n            //throw e;\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\repositories\\OpenAIRepository.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "repositories"
		}
	},
	{
		"name": "CliHelper.ts",
		"path": "src\\utils\\CliHelper.ts",
		"folderPath": "src\\utils",
		"fileContent": "import yargs from \"yargs\";\r\nimport ICodeNarratorConfig from \"../config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n\r\nexport default class CliHelper {\r\n\r\n    public async getArgv() : Promise<any> {\r\n        return yargs\r\n            .option('c', {\r\n                type: 'string',\r\n                describe: 'Path to configuration file (JSON or JavaScript)',\r\n                alias: 'config',\r\n                demandOption: false,\r\n            })\r\n            .option('i', {\r\n                type: 'array',\r\n                description: 'Only include specific files or folders in the documentation process',\r\n                alias: 'include'\r\n            }).option('g', {\r\n                type: 'string',\r\n                description: `GPT model. Default is gpt-4, if you do not have access, next best is gpt-3.5-turbo, but it isn't not so good`,\r\n                alias: 'gpt'\r\n            })\r\n            .help()\r\n            .alias('help', 'h').argv;\r\n    }\r\n\r\n    public async getConfig(argv : any) : Promise<Partial<ICodeNarratorConfig>> {\r\n        let configPath = argv.config as string;\r\n        let userConfig: Partial<ICodeNarratorConfig> = {};\r\n\r\n        if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.ts'))) {\r\n            configPath = '../../code-narrator.config.ts';\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.js'))) {\r\n            configPath = '../../code-narrator.config.js';\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.json'))) {\r\n            configPath = 'code-narrator.json';\r\n        }\r\n\r\n        if (argv.include) {\r\n            userConfig.include = argv.include as string[];\r\n        }\r\n        if (argv.gpt) {\r\n            userConfig.gptModel = argv.gpt as string;\r\n        }\r\n\r\n        if (configPath) {\r\n            if (configPath.endsWith('.js') || configPath.endsWith('.ts')) {\r\n                userConfig = await import(configPath);\r\n            } else if (configPath.endsWith('.json')) {\r\n                userConfig = JSON.parse((await fs.readFileSync(configPath)).toString());\r\n            }\r\n        }\r\n        return userConfig;\r\n    }\r\n}",
		"documentation": "# CliHelper.ts\n\nThis is a TypeScript code file that contains a class named `CliHelper`. The class is responsible for handling command line arguments and configuration for a tool called Code Narrator. The class has two main methods: `getArgv()` and `getConfig()`.\n\n## Usage\n\nTo use the `CliHelper` class, you need to import it and create an instance of the class. Then, you can call the `getArgv()` and `getConfig()` methods to retrieve command line arguments and configuration, respectively.\n\n```typescript\nimport CliHelper from './CliHelper';\n\nconst cliHelper = new CliHelper();\nconst argv = await cliHelper.getArgv();\nconst config = await cliHelper.getConfig(argv);\n```\n\n## Methods\n\n### getArgv()\n\nThis method returns a Promise that resolves to an object containing the parsed command line arguments. It uses the `yargs` library to define and parse the arguments.\n\n#### Options\n\n- `-c, --config`: Path to configuration file (JSON or JavaScript). Optional.\n- `-i, --include`: An array of specific files or folders to include in the documentation process. Optional.\n- `-g, --gpt`: GPT model. Default is `gpt-4`. If you do not have access, the next best option is `gpt-3.5-turbo`, but it is not as good. Optional.\n\n### getConfig(argv: any): Promise<Partial<ICodeNarratorConfig>>\n\nThis method takes the parsed command line arguments as input and returns a Promise that resolves to a `Partial<ICodeNarratorConfig>` object containing the user's configuration.\n\n#### Parameters\n\n- `argv`: The parsed command line arguments.\n\n#### Configuration Resolution\n\nThe method first checks for the existence of a configuration file in the current working directory. It looks for the following files in order:\n\n1. `code-narrator.config.ts`\n2. `code-narrator.config.js`\n3. `code-narrator.json`\n\nIf a configuration file is found, it is imported and merged with the command line arguments. If a configuration file is not found, the method uses the command line arguments as the configuration.\n\n## Technical Concepts\n\n### ICodeNarratorConfig\n\n`ICodeNarratorConfig` is an interface that defines the shape of the configuration object for Code Narrator. It includes properties such as `include` (an array of files or folders to include in the documentation process) and `gptModel` (the GPT model to use).\n\n### Partial<T>\n\n`Partial<T>` is a utility type provided by TypeScript that makes all properties of a type `T` optional. In this case, it is used to create a configuration object that may not have all properties defined.",
		"isFolder": false,
		"updated": "2023-04-14T15:34:30.119Z",
		"sidebar_position": 0,
		"sidebar_label": "CliHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"CliHelper.ts\"\r\nThe file name is: CliHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport yargs from \"yargs\";\r\nimport ICodeNarratorConfig from \"../config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n\r\nexport default class CliHelper {\r\n\r\n    public async getArgv() : Promise<any> {\r\n        return yargs\r\n            .option('c', {\r\n                type: 'string',\r\n                describe: 'Path to configuration file (JSON or JavaScript)',\r\n                alias: 'config',\r\n                demandOption: false,\r\n            })\r\n            .option('i', {\r\n                type: 'array',\r\n                description: 'Only include specific files or folders in the documentation process',\r\n                alias: 'include'\r\n            }).option('g', {\r\n                type: 'string',\r\n                description: `GPT model. Default is gpt-4, if you do not have access, next best is gpt-3.5-turbo, but it isn't not so good`,\r\n                alias: 'gpt'\r\n            })\r\n            .help()\r\n            .alias('help', 'h').argv;\r\n    }\r\n\r\n    public async getConfig(argv : any) : Promise<Partial<ICodeNarratorConfig>> {\r\n        let configPath = argv.config as string;\r\n        let userConfig: Partial<ICodeNarratorConfig> = {};\r\n\r\n        if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.ts'))) {\r\n            configPath = '../../code-narrator.config.ts';\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.js'))) {\r\n            configPath = '../../code-narrator.config.js';\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.json'))) {\r\n            configPath = 'code-narrator.json';\r\n        }\r\n\r\n        if (argv.include) {\r\n            userConfig.include = argv.include as string[];\r\n        }\r\n        if (argv.gpt) {\r\n            userConfig.gptModel = argv.gpt as string;\r\n        }\r\n\r\n        if (configPath) {\r\n            if (configPath.endsWith('.js') || configPath.endsWith('.ts')) {\r\n                userConfig = await import(configPath);\r\n            } else if (configPath.endsWith('.json')) {\r\n                userConfig = JSON.parse((await fs.readFileSync(configPath)).toString());\r\n            }\r\n        }\r\n        return userConfig;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\CliHelper.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "FileStructure.ts",
		"path": "src\\utils\\FileStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import path, {resolve} from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport default class FileStructure {\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    depth : number;\r\n    constructor(dir : string, entry : any, depth : number) {\r\n        this.name = entry.name;\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, resolve(dir, entry.name));\r\n        this.entry = entry;\r\n        this.depth = depth;\r\n    }\r\n\r\n    public static isCodeFile(fileName: string) {\r\n        return path.extname(fileName).indexOf('.ts') != -1;\r\n    }\r\n\r\n\r\n    static getContent(path: string) : string {\r\n        if (!fs.existsSync(path)) return '';\r\n\r\n        return fs.readFileSync(path).toString();\r\n    }\r\n}",
		"documentation": "# FileStructure.ts\n\nThis is a TypeScript code file that defines a `FileStructure` class. The class is used to represent and manipulate file structures in a project. It provides methods to check if a file is a code file and to get the content of a file.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n  - [isCodeFile](#iscodefile)\n  - [getContent](#getcontent)\n\n## Class Definition\n\nThe `FileStructure` class has the following properties:\n\n- `name`: The name of the file or directory.\n- `path`: The relative path of the file or directory from the project root.\n- `entry`: An object representing the file or directory entry.\n- `depth`: The depth of the file or directory in the file structure.\n\n## Examples\n\nHere are some examples of how to use the `FileStructure` class:\n\n```typescript\n// Create a new FileStructure instance\nconst fileStructure = new FileStructure('src', { name: 'example.ts' }, 1);\n\n// Check if a file is a code file\nconst isCodeFile = FileStructure.isCodeFile('example.ts'); // true\n\n// Get the content of a file\nconst content = FileStructure.getContent('src/example.ts');\n```\n\n## Methods\n\n### constructor\n\nThe constructor initializes a new `FileStructure` instance with the given `dir`, `entry`, and `depth`.\n\n**Parameters:**\n\n- `dir`: A string representing the directory path.\n- `entry`: An object representing the file or directory entry.\n- `depth`: A number representing the depth of the file or directory in the file structure.\n\n### isCodeFile\n\nThis static method checks if the given `fileName` is a TypeScript code file by checking its file extension.\n\n**Parameters:**\n\n- `fileName`: A string representing the name of the file.\n\n**Returns:** A boolean value indicating whether the file is a TypeScript code file.\n\n### getContent\n\nThis static method returns the content of the file at the given `path`. If the file does not exist, it returns an empty string.\n\n**Parameters:**\n\n- `path`: A string representing the path of the file.\n\n**Returns:** A string containing the content of the file.",
		"isFolder": false,
		"updated": "2023-04-14T15:35:55.227Z",
		"sidebar_position": 1,
		"sidebar_label": "FileStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FileStructure.ts\"\r\nThe file name is: FileStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport path, {resolve} from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport default class FileStructure {\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    depth : number;\r\n    constructor(dir : string, entry : any, depth : number) {\r\n        this.name = entry.name;\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, resolve(dir, entry.name));\r\n        this.entry = entry;\r\n        this.depth = depth;\r\n    }\r\n\r\n    public static isCodeFile(fileName: string) {\r\n        return path.extname(fileName).indexOf('.ts') != -1;\r\n    }\r\n\r\n\r\n    static getContent(path: string) : string {\r\n        if (!fs.existsSync(path)) return '';\r\n\r\n        return fs.readFileSync(path).toString();\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\FileStructure.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "FolderStructure.ts",
		"path": "src\\utils\\FolderStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import fs, {existsSync, readdirSync} from \"fs\";\r\nimport FileStructure from \"./FileStructure\";\r\nimport path, {resolve} from \"path\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport * as fg from 'fast-glob';\r\n\r\nexport default class FolderStructure {\r\n\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    files : FileStructure[];\r\n    folders : FolderStructure[];\r\n    depth : number;\r\n    constructor(folderPath : string, depth = 0) {\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, folderPath);\r\n\r\n        this.name = path.basename(this.path);\r\n\r\n        this.files = this.getFiles(folderPath, depth);\r\n        this.folders = this.getStructure(folderPath, ++depth);\r\n        this.depth = depth\r\n    }\r\n\r\n    public getHierarchicalTree() {\r\n        let str = ' '.repeat(this.depth) + '+' + this.path + '\\n';\r\n        for (let i=0;i<this.folders.length;i++) {\r\n            str += this.folders[i].getHierarchicalTree() + '\\n';\r\n        }\r\n        for (let i=0;i<this.files.length;i++) {\r\n            str += ' '.repeat(this.depth) + '-' + this.files[i].name + '\\n';\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static getFiles(dir : string, depth : number) {\r\n        const entries = readdirSync(dir, {withFileTypes: true});\r\n        let files :FileStructure[] = [];\r\n        for (const entry of entries) {\r\n            if (!entry.isDirectory() && FolderStructure.shouldDocument(path.join(dir, entry.name), entry.isDirectory())) {\r\n                files.push(new FileStructure(dir, entry, depth))\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n\r\n    public static exists(dir : string) : boolean {\r\n        return existsSync(dir);\r\n    }\r\n    public getFiles(dir: string, depth : number): FileStructure[] {\r\n        return FolderStructure.getFiles(dir, depth);\r\n    }\r\n\r\n    private getStructure(folderPath: string,depth : number) : FolderStructure[] {\r\n        let folders : FolderStructure[] = [];\r\n        const entries = readdirSync(folderPath, {withFileTypes: true});\r\n        for (const entry of entries) {\r\n            const res = resolve(folderPath, entry.name);\r\n            if (entry.isDirectory() && FolderStructure.shouldDocument(path.join(folderPath, entry.name), entry.isDirectory())) {\r\n                folders.push(new FolderStructure(res, depth));\r\n            }\r\n        }\r\n        return folders;\r\n    }\r\n\r\n\r\n    public static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean {\r\n        let include = ConfigHelper.config.include ?? ['*/**']\r\n\r\n        // Concatenate exclude patterns with a '!' prefix to indicate exclusion\r\n        const patterns = [\r\n            ...include,\r\n            ...ConfigHelper.config.exclude.map((pattern) => `!${pattern}`)\r\n        ];\r\n\r\n        // If the path is absolute, make it relative to the current working directory\r\n        const relativePath = path.isAbsolute(fileOrFolderPath)\r\n            ? path.relative(process.cwd(), fileOrFolderPath)\r\n            : fileOrFolderPath;\r\n\r\n        // Find all matching paths for the patterns\r\n        const allMatches = fg.sync(patterns, { onlyFiles: false });\r\n\r\n        // Filter the matches to only include paths that match the input fileOrFolderPath\r\n        const matches = allMatches.filter((match) => {\r\n            if (isDirectory) {\r\n                return path.dirname(match) === relativePath.replaceAll('\\\\', '/')\r\n            }\r\n            return path.normalize(match) === path.normalize(relativePath)\r\n        });\r\n        let isIncluded = matches.length > 0;\r\n\r\n        return isIncluded;\r\n    }\r\n    public static isAncestorOrParentPath(parentPath : string, childPath: string) {\r\n        const relativePath = path.relative(parentPath, childPath);\r\n        return (\r\n            relativePath &&\r\n            !relativePath.startsWith('..') &&\r\n            !path.isAbsolute(relativePath)\r\n        );\r\n    }\r\n\r\n    public static searchForStringInFiles(root: string, search: string): string {\r\n        const files = fs.readdirSync(root);\r\n\r\n        for (const file of files) {\r\n            const fullPath = path.join(root, file);\r\n            const stats = fs.statSync(fullPath);\r\n\r\n            if (stats.isDirectory()) {\r\n                return FolderStructure.searchForStringInFiles(fullPath, search);\r\n            } else {\r\n                if (path.extname(fullPath) === '.ts' || path.extname(fullPath) === '.js') {\r\n                    const content = fs.readFileSync(fullPath, 'utf-8');\r\n                    if (content.includes(search)) {\r\n                        console.log(`${fullPath} contains the search string '${search}'`);\r\n                        return content;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static getFoldersAndFiles(path: string) {\r\n        return fs.readdirSync(path)\r\n    }\r\n}",
		"documentation": "# FolderStructure.ts\n\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\n\n## Usage\n\nTo use the `FolderStructure` class, you need to import it and create an instance by providing the folder path and an optional depth parameter.\n\n```typescript\nimport FolderStructure from './FolderStructure';\n\nconst folderStructure = new FolderStructure('path/to/folder');\n```\n\n## Class Methods\n\n### constructor(folderPath: string, depth = 0)\n\nThe constructor initializes a new `FolderStructure` instance with the given folder path and depth. It sets the instance properties such as name, path, files, folders, and depth.\n\n### getHierarchicalTree(): string\n\nThis method returns a string representation of the folder structure's hierarchical tree. It includes the folder and file names with indentation based on their depth in the tree.\n\n### static getFiles(dir: string, depth: number): FileStructure[]\n\nThis static method returns an array of `FileStructure` instances for the files in the specified directory. It filters the files based on the `shouldDocument` method.\n\n### static exists(dir: string): boolean\n\nThis static method checks if a directory exists and returns a boolean value.\n\n### getFiles(dir: string, depth: number): FileStructure[]\n\nThis instance method is a wrapper for the static `getFiles` method.\n\n### private getStructure(folderPath: string, depth: number): FolderStructure[]\n\nThis private method returns an array of `FolderStructure` instances for the subfolders in the specified folder path. It filters the folders based on the `shouldDocument` method.\n\n### static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean\n\nThis static method checks if a file or folder should be documented based on the include and exclude patterns defined in the `ConfigHelper` configuration. It returns a boolean value.\n\n### static isAncestorOrParentPath(parentPath: string, childPath: string): boolean\n\nThis static method checks if a path is an ancestor or parent of another path and returns a boolean value.\n\n### static searchForStringInFiles(root: string, search: string): string\n\nThis static method searches for a string in the files of a specified root directory. It returns the content of the first file containing the search string or an empty string if not found.\n\n### static getFoldersAndFiles(path: string): string[]\n\nThis static method returns an array of folder and file names in the specified path.\n\n## Example\n\n```typescript\nimport FolderStructure from './FolderStructure';\n\n// Create a FolderStructure instance\nconst folderStructure = new FolderStructure('path/to/folder');\n\n// Get the hierarchical tree\nconst tree = folderStructure.getHierarchicalTree();\nconsole.log(tree);\n\n// Check if a folder exists\nconst exists = FolderStructure.exists('path/to/folder');\nconsole.log(exists);\n\n// Search for a string in files\nconst content = FolderStructure.searchForStringInFiles('path/to/folder', 'searchString');\nconsole.log(content);\n```\n\n## Note\n\nThe `FolderStructure` class depends on the `FileStructure` class, `ConfigHelper` class, and the `fast-glob` library. Make sure to import and install these dependencies before using the `FolderStructure` class.",
		"isFolder": false,
		"updated": "2023-04-14T15:38:00.047Z",
		"sidebar_position": 2,
		"sidebar_label": "FolderStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FolderStructure.ts\"\r\nThe file name is: FolderStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs, {existsSync, readdirSync} from \"fs\";\r\nimport FileStructure from \"./FileStructure\";\r\nimport path, {resolve} from \"path\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport * as fg from 'fast-glob';\r\n\r\nexport default class FolderStructure {\r\n\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    files : FileStructure[];\r\n    folders : FolderStructure[];\r\n    depth : number;\r\n    constructor(folderPath : string, depth = 0) {\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, folderPath);\r\n\r\n        this.name = path.basename(this.path);\r\n\r\n        this.files = this.getFiles(folderPath, depth);\r\n        this.folders = this.getStructure(folderPath, ++depth);\r\n        this.depth = depth\r\n    }\r\n\r\n    public getHierarchicalTree() {\r\n        let str = ' '.repeat(this.depth) + '+' + this.path + '\\n';\r\n        for (let i=0;i<this.folders.length;i++) {\r\n            str += this.folders[i].getHierarchicalTree() + '\\n';\r\n        }\r\n        for (let i=0;i<this.files.length;i++) {\r\n            str += ' '.repeat(this.depth) + '-' + this.files[i].name + '\\n';\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static getFiles(dir : string, depth : number) {\r\n        const entries = readdirSync(dir, {withFileTypes: true});\r\n        let files :FileStructure[] = [];\r\n        for (const entry of entries) {\r\n            if (!entry.isDirectory() && FolderStructure.shouldDocument(path.join(dir, entry.name), entry.isDirectory())) {\r\n                files.push(new FileStructure(dir, entry, depth))\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n\r\n    public static exists(dir : string) : boolean {\r\n        return existsSync(dir);\r\n    }\r\n    public getFiles(dir: string, depth : number): FileStructure[] {\r\n        return FolderStructure.getFiles(dir, depth);\r\n    }\r\n\r\n    private getStructure(folderPath: string,depth : number) : FolderStructure[] {\r\n        let folders : FolderStructure[] = [];\r\n        const entries = readdirSync(folderPath, {withFileTypes: true});\r\n        for (const entry of entries) {\r\n            const res = resolve(folderPath, entry.name);\r\n            if (entry.isDirectory() && FolderStructure.shouldDocument(path.join(folderPath, entry.name), entry.isDirectory())) {\r\n                folders.push(new FolderStructure(res, depth));\r\n            }\r\n        }\r\n        return folders;\r\n    }\r\n\r\n\r\n    public static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean {\r\n        let include = ConfigHelper.config.include ?? ['*/**']\r\n\r\n        // Concatenate exclude patterns with a '!' prefix to indicate exclusion\r\n        const patterns = [\r\n            ...include,\r\n            ...ConfigHelper.config.exclude.map((pattern) => `!${pattern}`)\r\n        ];\r\n\r\n        // If the path is absolute, make it relative to the current working directory\r\n        const relativePath = path.isAbsolute(fileOrFolderPath)\r\n            ? path.relative(process.cwd(), fileOrFolderPath)\r\n            : fileOrFolderPath;\r\n\r\n        // Find all matching paths for the patterns\r\n        const allMatches = fg.sync(patterns, { onlyFiles: false });\r\n\r\n        // Filter the matches to only include paths that match the input fileOrFolderPath\r\n        const matches = allMatches.filter((match) => {\r\n            if (isDirectory) {\r\n                return path.dirname(match) === relativePath.replaceAll('\\\\', '/')\r\n            }\r\n            return path.normalize(match) === path.normalize(relativePath)\r\n        });\r\n        let isIncluded = matches.length > 0;\r\n\r\n        return isIncluded;\r\n    }\r\n    public static isAncestorOrParentPath(parentPath : string, childPath: string) {\r\n        const relativePath = path.relative(parentPath, childPath);\r\n        return (\r\n            relativePath &&\r\n            !relativePath.startsWith('..') &&\r\n            !path.isAbsolute(relativePath)\r\n        );\r\n    }\r\n\r\n    public static searchForStringInFiles(root: string, search: string): string {\r\n        const files = fs.readdirSync(root);\r\n\r\n        for (const file of files) {\r\n            const fullPath = path.join(root, file);\r\n            const stats = fs.statSync(fullPath);\r\n\r\n            if (stats.isDirectory()) {\r\n                return FolderStructure.searchForStringInFiles(fullPath, search);\r\n            } else {\r\n                if (path.extname(fullPath) === '.ts' || path.extname(fullPath) === '.js') {\r\n                    const content = fs.readFileSync(fullPath, 'utf-8');\r\n                    if (content.includes(search)) {\r\n                        console.log(`${fullPath} contains the search string '${search}'`);\r\n                        return content;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static getFoldersAndFiles(path: string) {\r\n        return fs.readdirSync(path)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\FolderStructure.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "Helper.ts",
		"path": "src\\utils\\Helper.ts",
		"folderPath": "src\\utils",
		"fileContent": "const extract = require('extract-json-from-string');\r\n\r\nexport default class Helper {\r\n\r\n    public static removeExtension(fileName : string) {\r\n        if (fileName.lastIndexOf(\".\") == -1) return fileName;\r\n\r\n        let name = fileName.substring(0, fileName.lastIndexOf(\".\"));\r\n        if (name == '') return fileName;\r\n        return name;\r\n    }\r\n\r\n    static upperFirstLetter(name: string) {\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    static getJsons(content : string) : any[] {\r\n        return extract(content)\r\n    }\r\n}",
		"documentation": "# Helper.ts\n\nThe `Helper.ts` file is a TypeScript code file that contains a class named `Helper`. This class provides utility methods to perform common operations such as removing file extensions, capitalizing the first letter of a string, and extracting JSON objects from a string.\n\n## Usage Examples\n\nHere are some examples of how to use the `Helper` class:\n\n```typescript\nimport Helper from './Helper.ts';\n\n// Remove file extension\nconst fileName = 'example.txt';\nconst nameWithoutExtension = Helper.removeExtension(fileName);\nconsole.log(nameWithoutExtension); // Output: example\n\n// Capitalize the first letter of a string\nconst lowerCaseName = 'john';\nconst capitalized = Helper.upperFirstLetter(lowerCaseName);\nconsole.log(capitalized); // Output: John\n\n// Extract JSON objects from a string\nconst jsonString = '{\"key1\": \"value1\"}{\"key2\": \"value2\"}';\nconst jsonObjects = Helper.getJsons(jsonString);\nconsole.log(jsonObjects); // Output: [{ key1: 'value1' }, { key2: 'value2' }]\n```\n\n## Methods\n\n### removeExtension(fileName: string)\n\nThis method takes a `fileName` as a parameter and returns the file name without its extension.\n\n- `fileName`: A string representing the file name with its extension.\n\n### upperFirstLetter(name: string)\n\nThis method takes a `name` as a parameter and returns the same string with the first letter capitalized.\n\n- `name`: A string representing the name to be capitalized.\n\n### getJsons(content: string)\n\nThis method takes a `content` string as a parameter and returns an array of JSON objects extracted from the input string.\n\n- `content`: A string containing JSON objects.\n\n## Technical Concepts\n\nThe `Helper` class uses the `extract-json-from-string` library to extract JSON objects from a string. This library is not a standard JavaScript or TypeScript library, but it is used in the `getJsons` method to provide the functionality of extracting JSON objects from a string.",
		"isFolder": false,
		"updated": "2023-04-14T15:39:16.187Z",
		"sidebar_position": 3,
		"sidebar_label": "Helper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Helper.ts\"\r\nThe file name is: Helper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nconst extract = require('extract-json-from-string');\r\n\r\nexport default class Helper {\r\n\r\n    public static removeExtension(fileName : string) {\r\n        if (fileName.lastIndexOf(\".\") == -1) return fileName;\r\n\r\n        let name = fileName.substring(0, fileName.lastIndexOf(\".\"));\r\n        if (name == '') return fileName;\r\n        return name;\r\n    }\r\n\r\n    static upperFirstLetter(name: string) {\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    static getJsons(content : string) : any[] {\r\n        return extract(content)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\Helper.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "ProjectStructure.ts",
		"path": "src\\utils\\ProjectStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import FolderStructure from \"../utils/FolderStructure\";\r\nimport App from \"../App\";\r\nimport FileStructure from \"./FileStructure\";\r\n\r\nexport default class ProjectStructure {\r\n    folderStructure : FolderStructure;\r\n    constructor() {\r\n        let projectPath = process.cwd();\r\n        this.folderStructure = new FolderStructure(projectPath);\r\n    }\r\n    public async getStructure() {\r\n        return this.folderStructure;\r\n    }\r\n\r\n    public getAllFiles() {\r\n        let files : FileStructure[] = this.folderStructure.files;\r\n        for (let i=0;i<this.folderStructure.folders.length;i++) {\r\n            files.push(...this.getSubfiles(this.folderStructure.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n    private getSubfiles(folder : FolderStructure) {\r\n        let files : FileStructure[] = folder.files;\r\n        for (let i=0;i<folder.folders.length;i++) {\r\n            files.push(...this.getSubfiles(folder.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n}",
		"documentation": "# ProjectStructure.ts\n\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n  - [getStructure](#getstructure)\n  - [getAllFiles](#getallfiles)\n  - [getSubfiles](#getsubfiles)\n\n## Class Description\n\nThe `ProjectStructure` class has the following properties:\n\n- `folderStructure`: An instance of the `FolderStructure` class representing the project's folder structure.\n\nThe class has the following methods:\n\n- `constructor`: Initializes a new instance of the `ProjectStructure` class.\n- `getStructure`: Returns the folder structure of the project.\n- `getAllFiles`: Returns an array of all the files in the project.\n- `getSubfiles`: A private method that returns an array of all the files in a given folder.\n\n## Examples\n\n```javascript\nimport ProjectStructure from \"./ProjectStructure\";\n\n// Create a new instance of the ProjectStructure class\nconst projectStructure = new ProjectStructure();\n\n// Get the folder structure of the project\nconst folderStructure = await projectStructure.getStructure();\n\n// Get all the files in the project\nconst allFiles = projectStructure.getAllFiles();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method initializes a new instance of the `ProjectStructure` class. It sets the `folderStructure` property to a new instance of the `FolderStructure` class, using the current working directory as the project path.\n\n```javascript\nconstructor() {\n    let projectPath = process.cwd();\n    this.folderStructure = new FolderStructure(projectPath);\n}\n```\n\n### getStructure\n\nThe `getStructure` method is an asynchronous method that returns the folder structure of the project.\n\n```javascript\npublic async getStructure() {\n    return this.folderStructure;\n}\n```\n\n### getAllFiles\n\nThe `getAllFiles` method returns an array of all the files in the project. It iterates through the folders in the folder structure and calls the private `getSubfiles` method to get all the files in each folder.\n\n```javascript\npublic getAllFiles() {\n    let files : FileStructure[] = this.folderStructure.files;\n    for (let i=0;i<this.folderStructure.folders.length;i++) {\n        files.push(...this.getSubfiles(this.folderStructure.folders[i]))\n    }\n    return files;\n}\n```\n\n### getSubfiles\n\nThe `getSubfiles` method is a private method that takes a `FolderStructure` object as a parameter and returns an array of all the files in the given folder. It recursively calls itself for each subfolder in the folder structure.\n\n```javascript\nprivate getSubfiles(folder : FolderStructure) {\n    let files : FileStructure[] = folder.files;\n    for (let i=0;i<folder.folders.length;i++) {\n        files.push(...this.getSubfiles(folder.folders[i]))\n    }\n    return files;\n}\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:41:11.575Z",
		"sidebar_position": 4,
		"sidebar_label": "ProjectStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ProjectStructure.ts\"\r\nThe file name is: ProjectStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FolderStructure from \"../utils/FolderStructure\";\r\nimport App from \"../App\";\r\nimport FileStructure from \"./FileStructure\";\r\n\r\nexport default class ProjectStructure {\r\n    folderStructure : FolderStructure;\r\n    constructor() {\r\n        let projectPath = process.cwd();\r\n        this.folderStructure = new FolderStructure(projectPath);\r\n    }\r\n    public async getStructure() {\r\n        return this.folderStructure;\r\n    }\r\n\r\n    public getAllFiles() {\r\n        let files : FileStructure[] = this.folderStructure.files;\r\n        for (let i=0;i<this.folderStructure.folders.length;i++) {\r\n            files.push(...this.getSubfiles(this.folderStructure.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n    private getSubfiles(folder : FolderStructure) {\r\n        let files : FileStructure[] = folder.files;\r\n        for (let i=0;i<folder.folders.length;i++) {\r\n            files.push(...this.getSubfiles(folder.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\ProjectStructure.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "SuggestionBuilderTest.ts",
		"path": "__tests__\\logic\\SuggestionBuilderTest.ts",
		"folderPath": "__tests__\\logic",
		"fileContent": "import DocumentationBuilder from \"../../src/documentation/DocumentationBuilder\";\r\n\r\ndescribe(\"Test SuggestionBuilder\", () => {\r\n\r\n\r\n    it(\"Should create .md file with the project description, it uses package.json to get the project name, how to install, and run the module\", async () => {\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n    })\r\n\r\n})",
		"documentation": "# SuggestionBuilderTest.ts\n\nSuggestionBuilderTest.ts is a test file for the `DocumentationBuilder` class, which is responsible for generating a Markdown (.md) file containing the project description, installation instructions, and usage information. The test ensures that the `DocumentationBuilder` class functions as expected.\n\n## Table of Contents\n\n- [Description](#description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [build()](#build)\n- [Technical Concepts](#technical-concepts)\n\n## Description\n\nThe `SuggestionBuilderTest.ts` file contains a single test suite, which tests the `DocumentationBuilder` class. The test suite has one test case, which checks if the `DocumentationBuilder` can successfully create a Markdown file with the project description, installation instructions, and usage information.\n\n## Examples\n\nTo use the `DocumentationBuilder` class, you can follow the example provided in the test case:\n\n```typescript\nimport DocumentationBuilder from \"../../src/documentation/DocumentationBuilder\";\n\nlet builder = new DocumentationBuilder();\nawait builder.build();\n```\n\n## Methods\n\n### build()\n\nThe `build()` method is an asynchronous method that creates a Markdown file with the project description, installation instructions, and usage information. It uses the `package.json` file to get the project name, installation instructions, and module usage information.\n\n#### Parameters\n\nThis method does not have any parameters.\n\n## Technical Concepts\n\n- **describe**: In the test file, `describe` is a function provided by the testing framework (Jest) to group related test cases. It takes two arguments: a string describing the test suite and a callback function containing the test cases.\n- **it**: `it` is another function provided by Jest to define individual test cases. It also takes two arguments: a string describing the test case and a callback function containing the test logic.\n- **async/await**: The `async/await` syntax is used to work with promises in a more readable and concise way. In this test file, the `build()` method returns a promise, so the `await` keyword is used to wait for the promise to resolve before continuing with the test execution.",
		"isFolder": false,
		"updated": "2023-04-14T15:42:27.778Z",
		"sidebar_position": 0,
		"sidebar_label": "SuggestionBuilderTest.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "__tests__\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"SuggestionBuilderTest.ts\"\r\nThe file name is: SuggestionBuilderTest.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport DocumentationBuilder from \"../../src/documentation/DocumentationBuilder\";\r\n\r\ndescribe(\"Test SuggestionBuilder\", () => {\r\n\r\n\r\n    it(\"Should create .md file with the project description, it uses package.json to get the project name, how to install, and run the module\", async () => {\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "__tests__\\logic\\SuggestionBuilderTest.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "logic"
		}
	},
	{
		"name": "OpenAIRepositoryTest.ts",
		"path": "__tests__\\repositories\\OpenAIRepositoryTest.ts",
		"folderPath": "__tests__\\repositories",
		"fileContent": "import OpenAIRepository from \"../../src/repositories/OpenAIRepository\";\r\nimport {OpenAIApi} from \"openai\";\r\nimport {describe, expect} from '@jest/globals';\r\n\r\ndescribe('Test OpenAIRepository', () => {\r\n\r\n    it('should test queryQuestions', async () => {\r\n        let questions = ['How are you?', 'What are you doing?']\r\n\r\n        let spyOpenAIApi = jest.spyOn(OpenAIApi.prototype, 'createCompletion')\r\n            .mockImplementation(() => {\r\n                return {data : {\r\n                    choices : ['hello man', 'yes man']\r\n                    }} as any\r\n            })\r\n\r\n        let openAIRepository = new OpenAIRepository();\r\n        let answers = await openAIRepository.queryQuestions(questions)\r\n\r\n        expect(spyOpenAIApi).toBeCalledTimes(1);\r\n    })\r\n\r\n\r\n})",
		"documentation": "# OpenAIRepositoryTest.ts\n\nThe `OpenAIRepositoryTest.ts` file is a code file that contains test cases for the `OpenAIRepository` class. This class is responsible for interacting with the OpenAI API to query questions and receive answers. The test cases in this file ensure that the `OpenAIRepository` class is functioning correctly.\n\n## Table of Contents\n\n- [Examples](#examples)\n- [Methods](#methods)\n  - [queryQuestions](#queryquestions)\n- [Technical Concepts](#technical-concepts)\n\n## Examples\n\nHere are some examples of how to use the `OpenAIRepository` class:\n\n```javascript\nimport OpenAIRepository from \"../../src/repositories/OpenAIRepository\";\n\nconst openAIRepository = new OpenAIRepository();\nconst questions = ['How are you?', 'What are you doing?'];\nconst answers = await openAIRepository.queryQuestions(questions);\nconsole.log(answers);\n```\n\n## Methods\n\n### queryQuestions\n\nThe `queryQuestions` method is responsible for sending an array of questions to the OpenAI API and returning an array of answers.\n\n#### Parameters\n\n- `questions`: An array of strings containing the questions to be sent to the OpenAI API.\n\n#### Returns\n\n- An array of strings containing the answers received from the OpenAI API.\n\n## Technical Concepts\n\n### Jest\n\nJest is a JavaScript testing framework that is used in this file to create test cases for the `OpenAIRepository` class. It provides functions such as `describe`, `it`, and `expect` to create test suites, test cases, and assertions.\n\n### Mocking\n\nIn this file, the `OpenAIApi` class is mocked using Jest's `spyOn` function. This allows the test cases to simulate the behavior of the OpenAI API without actually making API calls. The `mockImplementation` function is used to define the behavior of the mocked method.\n\n## File Content\n\n```javascript\nimport OpenAIRepository from \"../../src/repositories/OpenAIRepository\";\nimport {OpenAIApi} from \"openai\";\nimport {describe, expect} from '@jest/globals';\n\ndescribe('Test OpenAIRepository', () => {\n\n    it('should test queryQuestions', async () => {\n        let questions = ['How are you?', 'What are you doing?']\n\n        let spyOpenAIApi = jest.spyOn(OpenAIApi.prototype, 'createCompletion')\n            .mockImplementation(() => {\n                return {data : {\n                    choices : ['hello man', 'yes man']\n                    }} as any\n            })\n\n        let openAIRepository = new OpenAIRepository();\n        let answers = await openAIRepository.queryQuestions(questions)\n\n        expect(spyOpenAIApi).toBeCalledTimes(1);\n    })\n\n})\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:44:06.822Z",
		"sidebar_position": 0,
		"sidebar_label": "OpenAIRepositoryTest.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "__tests__\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIRepositoryTest.ts\"\r\nThe file name is: OpenAIRepositoryTest.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport OpenAIRepository from \"../../src/repositories/OpenAIRepository\";\r\nimport {OpenAIApi} from \"openai\";\r\nimport {describe, expect} from '@jest/globals';\r\n\r\ndescribe('Test OpenAIRepository', () => {\r\n\r\n    it('should test queryQuestions', async () => {\r\n        let questions = ['How are you?', 'What are you doing?']\r\n\r\n        let spyOpenAIApi = jest.spyOn(OpenAIApi.prototype, 'createCompletion')\r\n            .mockImplementation(() => {\r\n                return {data : {\r\n                    choices : ['hello man', 'yes man']\r\n                    }} as any\r\n            })\r\n\r\n        let openAIRepository = new OpenAIRepository();\r\n        let answers = await openAIRepository.queryQuestions(questions)\r\n\r\n        expect(spyOpenAIApi).toBeCalledTimes(1);\r\n    })\r\n\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "__tests__\\repositories\\OpenAIRepositoryTest.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "repositories"
		}
	},
	{
		"name": "FolderStructureTest.ts",
		"path": "__tests__\\utils\\FolderStructureTest.ts",
		"folderPath": "__tests__\\utils",
		"fileContent": "import FolderStructure from \"../../src/utils/FolderStructure\";\r\nimport ConfigHelper from \"../../src/config/ConfigHelper\";\r\n\r\ndescribe('Test FolderStructure', () => {\r\n\r\n    it('test shouldDocument', async () => {\r\n        await ConfigHelper.load({project_file:\"package.json\"})\r\n        ConfigHelper.config.include = ['src/**/*.ts']\r\n        ConfigHelper.config.exclude = ['.env']\r\n\r\n        let pathsObject = [{\r\n            path: 'src/App.ts', isDirectory: false, expectedResult : true\r\n        },{\r\n            path: 'src/config/ConfigGenerator.ts', isDirectory: false, expectedResult : true\r\n        },{\r\n            path: 'src', isDirectory: true, expectedResult : true\r\n        },{\r\n            path: '.env', isDirectory: false, expectedResult : false\r\n        }]\r\n\r\n        for (let i=0;i<pathsObject.length;i++) {\r\n\r\n            let result = FolderStructure.shouldDocument(pathsObject[i].path, pathsObject[i].isDirectory)\r\n            expect(result).toBe(pathsObject[i].expectedResult)\r\n        }\r\n\r\n    })\r\n\r\n})",
		"documentation": "# FolderStructureTest.ts\n\nThe file `FolderStructureTest.ts` is a code file containing test cases for the `FolderStructure` class. This documentation provides a detailed description of the code, examples of how to use the class, descriptions of each method, parameters in methods, and explanations of non-standard technical concepts.\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [shouldDocument](#shoulddocument)\n- [Parameters](#parameters)\n\n## Introduction\n\nThe `FolderStructureTest.ts` file is responsible for testing the functionality of the `FolderStructure` class. The class is imported from the `../../src/utils/FolderStructure` module, and the `ConfigHelper` class is imported from the `../../src/config/ConfigHelper` module.\n\nThe main purpose of the `FolderStructure` class is to determine whether a given file or directory should be documented based on the configuration settings provided by the `ConfigHelper` class.\n\n## Examples\n\nTo use the `FolderStructure` class, you need to import it and create an instance of the class. Here's an example of how to use the `FolderStructure` class:\n\n```javascript\nimport FolderStructure from \"../../src/utils/FolderStructure\";\nimport ConfigHelper from \"../../src/config/ConfigHelper\";\n\n(async () => {\n  await ConfigHelper.load({ project_file: \"package.json\" });\n  ConfigHelper.config.include = [\"src/**/*.ts\"];\n  ConfigHelper.config.exclude = [\".env\"];\n\n  const folderStructure = new FolderStructure();\n  const shouldDocument = folderStructure.shouldDocument(\"src/App.ts\", false);\n  console.log(shouldDocument); // true\n})();\n```\n\n## Methods\n\n### shouldDocument\n\nThe `shouldDocument` method is a static method that takes a file or directory path and a boolean value indicating whether the path is a directory or not. It returns a boolean value indicating whether the file or directory should be documented based on the configuration settings provided by the `ConfigHelper` class.\n\n```javascript\nstatic shouldDocument(path: string, isDirectory: boolean): boolean;\n```\n\n## Parameters\n\nThe `shouldDocument` method accepts the following parameters:\n\n- `path` (string): The file or directory path to be checked for documentation.\n- `isDirectory` (boolean): A boolean value indicating whether the path is a directory or not.\n\n## Test Cases\n\nThe `FolderStructureTest.ts` file contains a single test suite with one test case:\n\n- `test shouldDocument`: This test case checks if the `shouldDocument` method returns the correct boolean value for different file and directory paths based on the configuration settings provided by the `ConfigHelper` class. The test case uses an array of objects containing the path, isDirectory flag, and the expected result for each test scenario. The test case iterates through the array and checks if the result of the `shouldDocument` method matches the expected result for each scenario.",
		"isFolder": false,
		"updated": "2023-04-14T15:45:49.887Z",
		"sidebar_position": 0,
		"sidebar_label": "FolderStructureTest.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "__tests__\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FolderStructureTest.ts\"\r\nThe file name is: FolderStructureTest.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FolderStructure from \"../../src/utils/FolderStructure\";\r\nimport ConfigHelper from \"../../src/config/ConfigHelper\";\r\n\r\ndescribe('Test FolderStructure', () => {\r\n\r\n    it('test shouldDocument', async () => {\r\n        await ConfigHelper.load({project_file:\"package.json\"})\r\n        ConfigHelper.config.include = ['src/**/*.ts']\r\n        ConfigHelper.config.exclude = ['.env']\r\n\r\n        let pathsObject = [{\r\n            path: 'src/App.ts', isDirectory: false, expectedResult : true\r\n        },{\r\n            path: 'src/config/ConfigGenerator.ts', isDirectory: false, expectedResult : true\r\n        },{\r\n            path: 'src', isDirectory: true, expectedResult : true\r\n        },{\r\n            path: '.env', isDirectory: false, expectedResult : false\r\n        }]\r\n\r\n        for (let i=0;i<pathsObject.length;i++) {\r\n\r\n            let result = FolderStructure.shouldDocument(pathsObject[i].path, pathsObject[i].isDirectory)\r\n            expect(result).toBe(pathsObject[i].expectedResult)\r\n        }\r\n\r\n    })\r\n\r\n})\r\n###\r\n"
			}
		],
		"id": "__tests__\\utils\\FolderStructureTest.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "README",
		"path": "src\\config",
		"folderPath": "src\\config",
		"fileContent": "",
		"documentation": "# Code Narrator Documentation\n\nThis documentation provides an in-depth explanation of the content of the `src/config` folder in the Code Narrator project. The folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\n\n## Table of Contents\n\n- [ConfigGenerator.ts](#configgeneratorts)\n- [ConfigHelper.ts](#confighelperts)\n- [DefaultSettings.ts](#defaultsettingsts)\n- [IBuilder.ts](#ibuilderts)\n- [ICodeNarratorConfig.ts](#icodenarratorconfigts)\n\n## ConfigGenerator.ts\n\nThis document provides an in-depth explanation of the `ConfigGenerator.ts` file, which is a TypeScript code file. The file contains a class named `ConfigGenerator` that is responsible for generating a configuration object for the Code Narrator project. The configuration object is based on the project's folder structure, project file, and other relevant information.\n\n[Read more about ConfigGenerator.ts](ConfigGenerator.ts)\n\n## ConfigHelper.ts\n\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\n\n[Read more about ConfigHelper.ts](ConfigHelper.ts)\n\n## DefaultSettings.ts\n\nThis is a TypeScript code file that defines the `DefaultSettings` class. The class provides default settings for the Code Narrator application, which is used to generate documentation for a project. The settings include paths, file names, plugin configurations, and other options.\n\n[Read more about DefaultSettings.ts](DefaultSettings.ts)\n\n## IBuilder.ts\n\nThis is a TypeScript interface file that defines the structure of an IBuilder object and its related types. The IBuilder interface is used to represent a builder object that can be used to create various types of files, such as 'howto', 'README', or custom files.\n\n[Read more about IBuilder.ts](IBuilder.ts)\n\n## ICodeNarratorConfig.ts\n\nThis is a TypeScript interface file that defines the structure of the `ICodeNarratorConfig` interface. The `ICodeNarratorConfig` interface is used to configure the settings for a code narration project. This file is essential for setting up and managing the project's configuration.\n\n[Read more about ICodeNarratorConfig.ts](ICodeNarratorConfig.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/ingig/code-narrator/src/config)",
		"isFolder": true,
		"updated": "2023-04-14T15:47:30.368Z",
		"sidebar_position": 30,
		"sidebar_label": "config",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/config\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ConfigGenerator.ts\",\"path\":\"src\\\\config\\\\ConfigGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigGenerator.ts\\n\\nThis document provides an in-depth explanation of the `ConfigGenerator.ts` file, which is a TypeScript code file. The file contains a class named `ConfigGenerator` that is responsible for generating a configuration object for the Code Narrator project. The configuration object is based on the project's folder structure, project file, and other relevant information.\\n\\n## Table of Contents\"},{\"name\":\"ConfigHelper.ts\",\"path\":\"src\\\\config\\\\ConfigHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigHelper.ts\\n\\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\\n\\n## Table of Contents\"},{\"name\":\"DefaultSettings.ts\",\"path\":\"src\\\\config\\\\DefaultSettings.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DefaultSettings.ts\\n\\nThis is a TypeScript code file that defines the `DefaultSettings` class. The class provides default settings for the Code Narrator application, which is used to generate documentation for a project. The settings include paths, file names, plugin configurations, and other options.\\n\\n## Usage\"},{\"name\":\"IBuilder.ts\",\"path\":\"src\\\\config\\\\IBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# IBuilder.ts\\n\\nThis is a TypeScript interface file that defines the structure of an IBuilder object and its related types. The IBuilder interface is used to represent a builder object that can be used to create various types of files, such as 'howto', 'README', or custom files.\\n\\n## Table of Contents\"},{\"name\":\"ICodeNarratorConfig.ts\",\"path\":\"src\\\\config\\\\ICodeNarratorConfig.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ICodeNarratorConfig.ts\\n\\nThis is a TypeScript interface file that defines the structure of the `ICodeNarratorConfig` interface. The `ICodeNarratorConfig` interface is used to configure the settings for a code narration project. This file is essential for setting up and managing the project's configuration.\\n\\n## Interface Description\"}]\r\n###"
			}
		],
		"id": "src\\config",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Configuration",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "",
		"documentation": "# Configuration Folder Documentation\n\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\n\n## Table of Contents\n\n- [ConfigurationBuilder.ts](#configurationbuilderts)\n\n## ConfigurationBuilder.ts\n\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that defines a class named `ConfigurationBuilder`. This class is responsible for generating and managing configuration files for an application. It extends the `BaseBuilder` class and provides methods for generating, updating, and rendering configuration files.\n\n[Read more about ConfigurationBuilder.ts](ConfigurationBuilder.ts)\n\n## Repository Link\n\nFor more information and to access the source code, visit the repository at [https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration).",
		"isFolder": true,
		"updated": "2023-04-14T15:48:05.848Z",
		"sidebar_position": 30,
		"sidebar_label": "Configuration",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ConfigurationBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Configuration\\\\ConfigurationBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigurationBuilder.ts\\n\\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that defines a class named `ConfigurationBuilder`. This class is responsible for generating and managing configuration files for an application. It extends the `BaseBuilder` class and provides methods for generating, updating, and rendering configuration files.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Files",
		"folderPath": "src\\documentation\\plugins\\builders\\Files",
		"fileContent": "",
		"documentation": "# Files and Folders Documentation\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [FilesBuilder.ts](#filesbuilder.ts)\n\n## FilesBuilder.ts\n\nThe `FilesBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating and rendering documentation for files in a project structure. It also handles querying folders, cleaning deleted files from the cache, and determining if a file should be documented.\n\n[Read more about FilesBuilder.ts](FilesBuilder.ts)\n\n## Repository Link\n\nFor more information and access to the repository, visit the following link:\n\n[https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files)",
		"isFolder": true,
		"updated": "2023-04-14T15:48:44.812Z",
		"sidebar_position": 31,
		"sidebar_label": "Files",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Files",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"FilesBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Files\\\\FilesBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FilesBuilder.ts\\n\\nThe `FilesBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating and rendering documentation for files in a project structure. It also handles querying folders, cleaning deleted files from the cache, and determining if a file should be documented.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Files",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Folders",
		"folderPath": "src\\documentation\\plugins\\builders\\Folders",
		"fileContent": "",
		"documentation": "# Documentation: FoldersBuilder\n\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\n\n## Table of Contents\n\n- [FoldersBuilder.ts](#foldersbuilderts)\n- [Repository Link](#repository-link)\n\n## FoldersBuilder.ts\n\nThe `FoldersBuilder.ts` file contains the `FoldersBuilder` class, which is responsible for generating, querying, and rendering documentation for folders and files within the project. The class extends the `BaseBuilder` class and provides methods to perform these tasks.\n\n### Summary\n\n- **File**: FoldersBuilder.ts\n- **Path**: src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts\n- **Type**: TypeScript code file\n- **Responsibilities**: Generating, querying, and rendering documentation for folders and files within the project.\n\nFor more information, please refer to the [FoldersBuilder.ts](src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts) documentation.\n\n## Repository Link\n\nFor the complete source code and additional information, visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Folders).",
		"isFolder": true,
		"updated": "2023-04-14T15:49:35.603Z",
		"sidebar_position": 32,
		"sidebar_label": "Folders",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Folders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Folders\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"FoldersBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Folders\\\\FoldersBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FoldersBuilder.ts\\n\\nThis is a TypeScript code file that defines a `FoldersBuilder` class, which is responsible for generating documentation for a folder structure in a project. The class extends the `BaseBuilder` class and provides methods to generate, query, and render documentation for folders and files within the project.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Folders",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Howto",
		"folderPath": "src\\documentation\\plugins\\builders\\Howto",
		"fileContent": "",
		"documentation": "# HowToBuilder Documentation\n\nThis folder contains the necessary files and classes for generating and rendering documentation for \"how-to\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \"how-to\" content from the given files.\n\n## Table of Contents\n\n- [HowToBuilder.ts](#howtobuilderts)\n\n## HowToBuilder.ts\n\n`HowToBuilder.ts` is a TypeScript code file that provides a class `HowToBuilder` for generating and rendering documentation for \"how-to\" guides. The class extends the `BaseBuilder` class and is responsible for extracting and formatting \"how-to\" content from the given files.\n\n### Class: HowToBuilder\n\nThe `HowToBuilder` class is responsible for handling the generation and rendering of \"how-to\" guide documentation. It extends the `BaseBuilder` class and overrides its methods to provide the necessary functionality for \"how-to\" guides.\n\nFor more information about the `HowToBuilder` class, please refer to its [documentation](HowToBuilder.ts).\n\n---\n\nFor the complete source code and additional information, please visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Howto).",
		"isFolder": true,
		"updated": "2023-04-14T15:50:21.966Z",
		"sidebar_position": 33,
		"sidebar_label": "Howto",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Howto\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"HowToBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Howto\\\\HowToBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# HowToBuilder.ts\\n\\n`HowToBuilder.ts` is a TypeScript code file that provides a class `HowToBuilder` for generating and rendering documentation for \\\"how-to\\\" guides. The class extends the `BaseBuilder` class and is responsible for extracting and formatting \\\"how-to\\\" content from the given files.\\n\\n## Class: HowToBuilder\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Howto",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\UserDefined",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "",
		"documentation": "# User-Defined Documentation Builder\n\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\n\n## UserDefinedBuilder.ts\n\n[UserDefinedBuilder.ts](UserDefinedBuilder.ts) is a TypeScript code file that defines a class named `UserDefinedBuilder` which extends the `BaseBuilder` class. The purpose of this class is to generate and render user-defined documentation based on templates and configurations.\n\n### Usage\n\nRefer to the [UserDefinedBuilder.ts documentation](UserDefinedBuilder.ts) for more information on how to use this class.\n\n## UserDefinedBuilderHelper.ts\n\n[UserDefinedBuilderHelper.ts](UserDefinedBuilderHelper.ts) is a TypeScript code file that exports a class named `UserDefinedBuilderHelper`. This class provides various utility methods to help with building user-defined content, such as extracting paths, loading arguments, and getting assistant messages.\n\n### Class: UserDefinedBuilderHelper\n\nFor more information on the `UserDefinedBuilderHelper` class and its methods, refer to the [UserDefinedBuilderHelper.ts documentation](UserDefinedBuilderHelper.ts).\n\n---\n\nFor the complete source code, visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/UserDefined).",
		"isFolder": true,
		"updated": "2023-04-14T15:51:14.269Z",
		"sidebar_position": 34,
		"sidebar_label": "UserDefined",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/UserDefined\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"UserDefinedBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\\\\UserDefinedBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# UserDefinedBuilder.ts\\n\\nThis is a TypeScript code file that defines a class named `UserDefinedBuilder` which extends the `BaseBuilder` class. The purpose of this class is to generate and render user-defined documentation based on templates and configurations.\\n\\n## Usage\"},{\"name\":\"UserDefinedBuilderHelper.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\\\\UserDefinedBuilderHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# UserDefinedBuilderHelper.ts\\n\\nThe `UserDefinedBuilderHelper.ts` file is a TypeScript code file that exports a class named `UserDefinedBuilderHelper`. This class provides various utility methods to help with building user-defined content, such as extracting paths, loading arguments, and getting assistant messages.\\n\\n## Class: UserDefinedBuilderHelper\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders",
		"folderPath": "src\\documentation\\plugins\\builders",
		"fileContent": "",
		"documentation": "```\n# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [BaseBuilder.ts](#basebuilderts)\n- [Configuration](#configuration)\n- [Files](#files)\n- [Folders](#folders)\n- [Howto](#howto)\n- [UserDefined](#userdefined)\n- [Repository Link](#repository-link)\n\n## BaseBuilder.ts\n\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a `Document` object that is later cached.\n\n[Read more about BaseBuilder.ts](BaseBuilder.ts)\n\n## Configuration\n\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\n\n[Read more about Configuration](Configuration)\n\n## Files\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n[Read more about Files](Files)\n\n## Folders\n\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\n\n[Read more about Folders](Folders)\n\n## Howto\n\nThis folder contains the necessary files and classes for generating and rendering documentation for \"how-to\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \"how-to\" content from the given files.\n\n[Read more about Howto](Howto)\n\n## UserDefined\n\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\n\n[Read more about UserDefined](UserDefined)\n\n## Repository Link\n\n[Access the repository here](https://github.com/ingig/code-narrator/src/documentation/plugins/builders)\n```",
		"isFolder": true,
		"updated": "2023-04-14T15:52:39.906Z",
		"sidebar_position": 30,
		"sidebar_label": "builders",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"BaseBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\BaseBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BaseBuilder.ts\\n\\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a `Document` object that is later cached.\\n\\n## Table of Contents\"},{\"name\":\"Configuration\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Configuration\",\"fileOrFolder\":\"folder\",\"summary\":\"# Configuration Folder Documentation\\n\\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\\n\\n## Table of Contents\"},{\"name\":\"Files\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Files\",\"fileOrFolder\":\"folder\",\"summary\":\"# Files and Folders Documentation\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"Folders\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Folders\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: FoldersBuilder\\n\\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\\n\\n## Table of Contents\"},{\"name\":\"Howto\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Howto\",\"fileOrFolder\":\"folder\",\"summary\":\"# HowToBuilder Documentation\\n\\nThis folder contains the necessary files and classes for generating and rendering documentation for \\\"how-to\\\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \\\"how-to\\\" content from the given files.\\n\\n## Table of Contents\"},{\"name\":\"UserDefined\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\",\"fileOrFolder\":\"folder\",\"summary\":\"# User-Defined Documentation Builder\\n\\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\\n\\n## UserDefinedBuilder.ts\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "",
		"documentation": "# Docusaurus Generator Documentation\n\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\n\n## Table of Contents\n\n- [DocusaurusGenerator.ts](#docusaurusgeneratorts)\n\n## DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\n\n### Usage\n\nFor more information on how to use the `DocusaurusGenerator` class, please refer to the [DocusaurusGenerator.ts documentation](DocusaurusGenerator.ts).\n\n## Repository\n\nFor more information and the source code, please visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/generators/Docusaurus).",
		"isFolder": true,
		"updated": "2023-04-14T15:53:13.043Z",
		"sidebar_position": 30,
		"sidebar_label": "Docusaurus",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/generators/Docusaurus\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"DocusaurusGenerator.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\Docusaurus\\\\DocusaurusGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocusaurusGenerator.ts\\n\\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\\n\\n## Usage\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus",
		"lastTouch": "2023-04-15T09:47:59.737Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\generators",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\n\n1. [BaseGenerator.ts](#BaseGenerator.ts)\n2. [Docusaurus](#Docusaurus)\n\n## BaseGenerator.ts\n\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\n\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\n\n### Usage\n\nFor more information on how to use the BaseGenerator.ts, please refer to the [BaseGenerator.ts documentation](BaseGenerator.ts).\n\n## Docusaurus\n\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\n\n### Table of Contents\n\nFor more information on the Docusaurus generator and its components, please refer to the [Docusaurus Generator Documentation](Docusaurus).\n\n---\n\nLink to the repository: [https://github.com/ingig/code-narrator/src/documentation/plugins/generators](https://github.com/ingig/code-narrator/src/documentation/plugins/generators)",
		"isFolder": true,
		"updated": "2023-04-14T15:54:05.711Z",
		"sidebar_position": 31,
		"sidebar_label": "generators",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/generators\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"BaseGenerator.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\BaseGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BaseGenerator.ts\\n\\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\\n\\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\\n\\n## Usage\"},{\"name\":\"Docusaurus\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\Docusaurus\",\"fileOrFolder\":\"folder\",\"summary\":\"# Docusaurus Generator Documentation\\n\\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\generators",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins",
		"folderPath": "src\\documentation\\plugins",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [GenerateOptions.ts](#GenerateOptionsts)\n- [builders](#builders)\n- [generators](#generators)\n\n## GenerateOptions.ts\n\n### Overview\n\nThe `GenerateOptions.ts` file is responsible for handling the options and configurations used during the documentation generation process. This file ensures that the correct settings are applied when generating documentation for different project structures.\n\n[Link to GenerateOptions.ts documentation](GenerateOptions.ts)\n\n## builders\n\nThe `builders` folder contains files and subfolders responsible for building and rendering the documentation content. This folder plays a crucial role in creating the final output of the documentation, which can be easily navigated and understood by users.\n\n[Link to builders documentation](builders)\n\n## generators\n\n### Overview\n\nThe `generators` folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\n\n1. [BaseGenerator.ts](#BaseGeneratorts)\n2. [Docusaurus](#Docusaurus)\n\n### BaseGenerator.ts\n\nThe `BaseGenerator.ts` file serves as the foundation for all documentation generators within the system. It provides a set of common functionalities and methods that can be extended and customized by other generator classes.\n\n[Link to BaseGenerator.ts documentation](generators/BaseGenerator.ts)\n\n### Docusaurus\n\nThe `Docusaurus` folder contains files and subfolders responsible for generating documentation using the Docusaurus framework. This folder ensures that the generated documentation is compatible with the Docusaurus format and can be easily integrated into a Docusaurus project.\n\n[Link to Docusaurus documentation](generators/Docusaurus)\n\n[Link to repository](https://github.com/ingig/code-narrator/src/documentation/plugins)",
		"isFolder": true,
		"updated": "2023-04-14T15:55:19.749Z",
		"sidebar_position": 30,
		"sidebar_label": "plugins",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"GenerateOptions.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\GenerateOptions.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# GenerateOptions.ts\\n\\n## Overview\"},{\"name\":\"builders\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"generators\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\\n\\n1. [BaseGenerator.ts](#BaseGenerator.ts)\\n2. [Docusaurus](#Docusaurus)\\n\\n## BaseGenerator.ts\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\documentation",
		"folderPath": "src\\documentation",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [Document.ts](#documentts)\n- [DocumentationBuilder.ts](#documentationbuilderts)\n- [DocumentationCache.ts](#documentationcachets)\n- [DocumentationGenerator.ts](#documentationgeneratorts)\n- [plugins](#plugins)\n\n## Document.ts\n\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\n\n[Read more about Document.ts](Document.ts)\n\n## DocumentationBuilder.ts\n\nThis is a TypeScript code file that defines a class called `DocumentationBuilder`. The purpose of this class is to generate documentation for a project using various builder plugins. The class imports necessary dependencies and manages the process of building documentation using the specified plugins.\n\n[Read more about DocumentationBuilder.ts](DocumentationBuilder.ts)\n\n## DocumentationCache.ts\n\nThis is a TypeScript code file that provides a class named `DocumentationCache`. The class is responsible for managing a cache of `Document` objects, which represent documentation files. The cache is stored in a JSON file, and the class provides methods for loading, getting, setting, and removing documents from the cache.\n\n[Read more about DocumentationCache.ts](DocumentationCache.ts)\n\n## DocumentationGenerator.ts\n\nThis is a TypeScript code file that defines a class named `DocumentationGenerator`. The purpose of this class is to generate documentation files based on the contents of a `DocumentationCache`. It supports the use of generator plugins to process the documentation before writing it to the file system.\n\n[Read more about DocumentationGenerator.ts](DocumentationGenerator.ts)\n\n## plugins\n\nThis folder contains various plugins that are used by the `DocumentationBuilder` and `DocumentationGenerator` classes to generate and render documentation for different project structures.\n\n[Read more about plugins](plugins)\n\n---\n\n[View the repository on GitHub](https://github.com/ingig/code-narrator/src/documentation)",
		"isFolder": true,
		"updated": "2023-04-14T15:56:40.249Z",
		"sidebar_position": 31,
		"sidebar_label": "documentation",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"Document.ts\",\"path\":\"src\\\\documentation\\\\Document.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Document.ts\\n\\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\\n\\n## Table of Contents\"},{\"name\":\"DocumentationBuilder.ts\",\"path\":\"src\\\\documentation\\\\DocumentationBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationBuilder.ts\\n\\nThis is a TypeScript code file that defines a class called `DocumentationBuilder`. The purpose of this class is to generate documentation for a project using various builder plugins. The class imports necessary dependencies and manages the process of building documentation using the specified plugins.\\n\\n## Table of Contents\"},{\"name\":\"DocumentationCache.ts\",\"path\":\"src\\\\documentation\\\\DocumentationCache.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationCache.ts\\n\\nThis is a TypeScript code file that provides a class named `DocumentationCache`. The class is responsible for managing a cache of `Document` objects, which represent documentation files. The cache is stored in a JSON file, and the class provides methods for loading, getting, setting, and removing documents from the cache.\\n\\n## Usage\"},{\"name\":\"DocumentationGenerator.ts\",\"path\":\"src\\\\documentation\\\\DocumentationGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationGenerator.ts\\n\\nThis is a TypeScript code file that defines a class named `DocumentationGenerator`. The purpose of this class is to generate documentation files based on the contents of a `DocumentationCache`. It supports the use of generator plugins to process the documentation before writing it to the file system.\\n\\n## Table of Contents\"},{\"name\":\"plugins\",\"path\":\"src\\\\documentation\\\\plugins\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\model",
		"folderPath": "src\\model",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\n\n## IProjectDocumentedSettings.ts\n\n[IProjectDocumentedSettings.ts](src\\model\\IProjectDocumentedSettings.ts) is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\n\n### Interface Description\n\nFor more information about the `IProjectDocumentedSettings` interface, please refer to the [IProjectDocumentedSettings.ts documentation](src\\model\\IProjectDocumentedSettings.ts).\n\n## OpenAIResponse.ts\n\n[OpenAIResponse.ts](src\\model\\OpenAIResponse.ts) is a TypeScript file that contains the definition of the `OpenAIResponse` class.\n\n### Overview\n\nFor more information about the `OpenAIResponse` class, please refer to the [OpenAIResponse.ts documentation](src\\model\\OpenAIResponse.ts).\n\n---\n\nFor the complete source code, visit the [repository](https://github.com/ingig/code-narrator/src/model).",
		"isFolder": true,
		"updated": "2023-04-14T15:57:22.054Z",
		"sidebar_position": 32,
		"sidebar_label": "model",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/model\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"IProjectDocumentedSettings.ts\",\"path\":\"src\\\\model\\\\IProjectDocumentedSettings.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# IProjectDocumentedSettings.ts\\n\\nThis is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\\n\\n## Interface Description\"},{\"name\":\"OpenAIResponse.ts\",\"path\":\"src\\\\model\\\\OpenAIResponse.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIResponse.ts\\n\\n## Overview\"}]\r\n###"
			}
		],
		"id": "src\\model",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\repositories",
		"folderPath": "src\\repositories",
		"fileContent": "",
		"documentation": "# OpenAI Repository Documentation\n\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\n\n## Table of Contents\n\n- [OpenAIRepository.ts](#openairepositoryts)\n- [Repository Link](#repository-link)\n\n## OpenAIRepository.ts\n\nThis TypeScript file defines a class called `OpenAIRepository` that provides methods to interact with the OpenAI API. The class is responsible for querying the OpenAI API and handling the responses.\n\n### Class: OpenAIRepository\n\nThe `OpenAIRepository` class contains methods for interacting with the OpenAI API, such as sending requests and processing responses. It is designed to be easily integrated into other parts of the system that require access to the OpenAI API.\n\n[OpenAIRepository.ts Documentation](OpenAIRepository.ts)\n\n## Repository Link\n\nFor more information and to access the source code, visit the repository at:\n\n[https://github.com/ingig/code-narrator/src/repositories](https://github.com/ingig/code-narrator/src/repositories)",
		"isFolder": true,
		"updated": "2023-04-14T15:58:06.557Z",
		"sidebar_position": 33,
		"sidebar_label": "repositories",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/repositories\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"OpenAIRepository.ts\",\"path\":\"src\\\\repositories\\\\OpenAIRepository.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIRepository.ts\\n\\nThis TypeScript file defines a class called `OpenAIRepository` that provides methods to interact with the OpenAI API. The class is responsible for querying the OpenAI API and handling the responses.\\n\\n## Class: OpenAIRepository\"}]\r\n###"
			}
		],
		"id": "src\\repositories",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src\\utils",
		"folderPath": "src\\utils",
		"fileContent": "",
		"documentation": "# Documentation\n\nThis documentation provides an in-depth overview of the content of the `src/utils` folder. The folder is responsible for handling various utility functions and classes used throughout the system.\n\n## Table of Contents\n\n- [CliHelper.ts](#clihelperts)\n- [FileStructure.ts](#filestructurets)\n- [FolderStructure.ts](#folderstructurets)\n- [Helper.ts](#helperts)\n- [ProjectStructure.ts](#projectstructurets)\n\n## CliHelper.ts\n\nThis is a TypeScript code file that contains a class named `CliHelper`. The class is responsible for handling command line arguments and configuration for a tool called Code Narrator. The class has two main methods: `getArgv()` and `getConfig()`.\n\n[Usage](#clihelperts)\n\n## FileStructure.ts\n\nThis is a TypeScript code file that defines a `FileStructure` class. The class is used to represent and manipulate file structures in a project. It provides methods to check if a file is a code file and to get the content of a file.\n\n[Table of Contents](#filestructurets)\n\n## FolderStructure.ts\n\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\n\n[Usage](#folderstructurets)\n\n## Helper.ts\n\nThe `Helper.ts` file is a TypeScript code file that contains a class named `Helper`. This class provides utility methods to perform common operations such as removing file extensions, capitalizing the first letter of a string, and extracting JSON objects from a string.\n\n[Usage Examples](#helperts)\n\n## ProjectStructure.ts\n\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\n\n[Table of Contents](#projectstructurets)\n\n---\n\n[Link to Repository](https://github.com/ingig/code-narrator/src/utils)",
		"isFolder": true,
		"updated": "2023-04-14T15:59:30.470Z",
		"sidebar_position": 34,
		"sidebar_label": "utils",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/utils\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"CliHelper.ts\",\"path\":\"src\\\\utils\\\\CliHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# CliHelper.ts\\n\\nThis is a TypeScript code file that contains a class named `CliHelper`. The class is responsible for handling command line arguments and configuration for a tool called Code Narrator. The class has two main methods: `getArgv()` and `getConfig()`.\\n\\n## Usage\"},{\"name\":\"FileStructure.ts\",\"path\":\"src\\\\utils\\\\FileStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FileStructure.ts\\n\\nThis is a TypeScript code file that defines a `FileStructure` class. The class is used to represent and manipulate file structures in a project. It provides methods to check if a file is a code file and to get the content of a file.\\n\\n## Table of Contents\"},{\"name\":\"FolderStructure.ts\",\"path\":\"src\\\\utils\\\\FolderStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FolderStructure.ts\\n\\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\\n\\n## Usage\"},{\"name\":\"Helper.ts\",\"path\":\"src\\\\utils\\\\Helper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Helper.ts\\n\\nThe `Helper.ts` file is a TypeScript code file that contains a class named `Helper`. This class provides utility methods to perform common operations such as removing file extensions, capitalizing the first letter of a string, and extracting JSON objects from a string.\\n\\n## Usage Examples\"},{\"name\":\"ProjectStructure.ts\",\"path\":\"src\\\\utils\\\\ProjectStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ProjectStructure.ts\\n\\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\utils",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "src",
		"folderPath": "src",
		"fileContent": "",
		"documentation": "# Code Narrator Documentation\n\nThis documentation provides an in-depth explanation of the content of the Code Narrator project. The project is responsible for generating documentation for a project using GPT. The documentation is divided into sections with clear headings and subheadings.\n\n## Table of Contents\n\n- [App.ts](#app.ts)\n- [cli.ts](#cli.ts)\n- [config](#config)\n- [documentation](#documentation)\n- [model](#model)\n- [repositories](#repositories)\n- [utils](#utils)\n- [Repository Link](#repository-link)\n\n### App.ts\n\nThe `App.ts` file is a part of the code-narrator application, which is responsible for generating documentation for a project using GPT. This file contains the main class `App` that orchestrates the process of loading configuration, caching documentation, building documentation, and generating the final documentation output.\n\n[App.ts Documentation](App.ts)\n\n### cli.ts\n\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\n\n[cli.ts Documentation](cli.ts)\n\n### config\n\nThis folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\n\n[config Folder Documentation](config)\n\n### documentation\n\nThis folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n[documentation Folder Documentation](documentation)\n\n### model\n\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\n\n[model Folder Documentation](model)\n\n### repositories\n\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\n\n[repositories Folder Documentation](repositories)\n\n### utils\n\nThis folder is responsible for handling various utility functions and classes used throughout the system.\n\n[utils Folder Documentation](utils)\n\n### Repository Link\n\n[Code Narrator Repository](https://github.com/ingig/code-narrator/src)",
		"isFolder": true,
		"updated": "2023-04-14T16:00:55.941Z",
		"sidebar_position": 30,
		"sidebar_label": "src",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"App.ts\",\"path\":\"src\\\\App.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# App.ts\\n\\nThe `App.ts` file is a part of the code-narrator application, which is responsible for generating documentation for a project using GPT. This file contains the main class `App` that orchestrates the process of loading configuration, caching documentation, building documentation, and generating the final documentation output.\\n\\n## Table of Contents\"},{\"name\":\"cli.ts\",\"path\":\"src\\\\cli.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# cli.ts\\n\\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\\n\\n## Table of Contents\"},{\"name\":\"config\",\"path\":\"src\\\\config\",\"fileOrFolder\":\"folder\",\"summary\":\"# Code Narrator Documentation\\n\\nThis documentation provides an in-depth explanation of the content of the `src/config` folder in the Code Narrator project. The folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\\n\\n## Table of Contents\"},{\"name\":\"documentation\",\"path\":\"src\\\\documentation\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"model\",\"path\":\"src\\\\model\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\\n\\n## IProjectDocumentedSettings.ts\"},{\"name\":\"repositories\",\"path\":\"src\\\\repositories\",\"fileOrFolder\":\"folder\",\"summary\":\"# OpenAI Repository Documentation\\n\\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\\n\\n## Table of Contents\"},{\"name\":\"utils\",\"path\":\"src\\\\utils\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation\\n\\nThis documentation provides an in-depth overview of the content of the `src/utils` folder. The folder is responsible for handling various utility functions and classes used throughout the system.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "__tests__\\logic",
		"folderPath": "__tests__\\logic",
		"fileContent": "",
		"documentation": "# Documentation\n\nThis folder contains the necessary files and tests for the system's functionality. The main responsibility of this folder is to ensure the proper functioning of the system.\n\n## Table of Contents\n\n- [SuggestionBuilderTest.ts](#suggestionbuildertestts)\n\n## SuggestionBuilderTest.ts\n\nSuggestionBuilderTest.ts is a test file for the `DocumentationBuilder` class, which is responsible for generating a Markdown (.md) file containing the project description, installation instructions, and usage information. The test ensures that the `DocumentationBuilder` class functions as expected.\n\n[View SuggestionBuilderTest.ts Documentation](SuggestionBuilderTest.ts)\n\n## Repository Link\n\nFor more information and to access the repository, visit the following link:\n\n[https://github.com/ingig/code-narrator/__tests__/logic](https://github.com/ingig/code-narrator/__tests__/logic)",
		"isFolder": true,
		"updated": "2023-04-14T16:01:28.645Z",
		"sidebar_position": 30,
		"sidebar_label": "logic",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "__tests__\\logic",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/__tests__/logic\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"SuggestionBuilderTest.ts\",\"path\":\"__tests__\\\\logic\\\\SuggestionBuilderTest.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# SuggestionBuilderTest.ts\\n\\nSuggestionBuilderTest.ts is a test file for the `DocumentationBuilder` class, which is responsible for generating a Markdown (.md) file containing the project description, installation instructions, and usage information. The test ensures that the `DocumentationBuilder` class functions as expected.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "__tests__\\logic",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "__tests__\\repositories",
		"folderPath": "__tests__\\repositories",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis folder contains files and subfolders responsible for various functionalities in the system. The following sections provide a high-level overview of each file and folder, along with links to their respective documentation.\n\n## OpenAIRepositoryTest.ts\n\nThe `OpenAIRepositoryTest.ts` file is a code file that contains test cases for the `OpenAIRepository` class. This class is responsible for interacting with the OpenAI API to query questions and receive answers. The test cases in this file ensure that the `OpenAIRepository` class is functioning correctly.\n\n[OpenAIRepositoryTest.ts Documentation](OpenAIRepositoryTest.ts)\n\n### Table of Contents\n\n- [OpenAIRepositoryTest.ts](#openairepositorytestts)\n\n---\n\nFor more information, visit the [repository](https://github.com/ingig/code-narrator/__tests__/repositories).",
		"isFolder": true,
		"updated": "2023-04-14T16:01:59.453Z",
		"sidebar_position": 31,
		"sidebar_label": "repositories",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "__tests__\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/__tests__/repositories\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"OpenAIRepositoryTest.ts\",\"path\":\"__tests__\\\\repositories\\\\OpenAIRepositoryTest.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIRepositoryTest.ts\\n\\nThe `OpenAIRepositoryTest.ts` file is a code file that contains test cases for the `OpenAIRepository` class. This class is responsible for interacting with the OpenAI API to query questions and receive answers. The test cases in this file ensure that the `OpenAIRepository` class is functioning correctly.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "__tests__\\repositories",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "__tests__\\utils",
		"folderPath": "__tests__\\utils",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis documentation provides an in-depth description of the content of the folder, its purpose in the system, and the files and folders it contains. The folder is divided into sections with clear headings and subheadings for easy navigation.\n\n## FolderStructureTest.ts\n\nThe file `FolderStructureTest.ts` is a code file containing test cases for the `FolderStructure` class. This documentation provides a detailed description of the code, examples of how to use the class, descriptions of each method, parameters in methods, and explanations of non-standard technical concepts.\n\n- [FolderStructureTest.ts Documentation](FolderStructureTest.ts)\n\n## Repository Link\n\nFor more information and to access the repository, please visit the following link:\n\n- [Repository URL](https://github.com/ingig/code-narrator/__tests__/utils)",
		"isFolder": true,
		"updated": "2023-04-14T16:02:29.942Z",
		"sidebar_position": 32,
		"sidebar_label": "utils",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "__tests__\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/__tests__/utils\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"FolderStructureTest.ts\",\"path\":\"__tests__\\\\utils\\\\FolderStructureTest.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FolderStructureTest.ts\\n\\nThe file `FolderStructureTest.ts` is a code file containing test cases for the `FolderStructure` class. This documentation provides a detailed description of the code, examples of how to use the class, descriptions of each method, parameters in methods, and explanations of non-standard technical concepts.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "__tests__\\utils",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "README",
		"path": "__tests__",
		"folderPath": "__tests__",
		"fileContent": "",
		"documentation": "# Documentation\n\nThis documentation provides an in-depth description of the content of the folder, its purpose in the system, and the files and folders it contains. The folder is divided into sections with clear headings and subheadings for easy navigation.\n\n## Table of Contents\n\n- [Logic](#logic)\n- [Repositories](#repositories)\n- [Utils](#utils)\n- [Link to Repository](#link-to-repository)\n\n## Logic\n\nThis folder contains the necessary files and tests for the system's functionality. The main responsibility of this folder is to ensure the proper functioning of the system.\n\n[Logic Documentation](logic)\n\n## Repositories\n\nThis folder contains files and subfolders responsible for various functionalities in the system. The following sections provide a high-level overview of each file and folder, along with links to their respective documentation.\n\n### OpenAIRepositoryTest.ts\n\n[OpenAIRepositoryTest.ts Documentation](repositories/OpenAIRepositoryTest.ts)\n\n## Utils\n\nThis documentation provides an in-depth description of the content of the folder, its purpose in the system, and the files and folders it contains. The folder is divided into sections with clear headings and subheadings for easy navigation.\n\n### FolderStructureTest.ts\n\n[FolderStructureTest.ts Documentation](utils/FolderStructureTest.ts)\n\n## Link to Repository\n\n[GitHub Repository](https://github.com/ingig/code-narrator/__tests__)",
		"isFolder": true,
		"updated": "2023-04-14T16:03:17.758Z",
		"sidebar_position": 31,
		"sidebar_label": "__tests__",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "__tests__",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/__tests__\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"logic\",\"path\":\"__tests__\\\\logic\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation\\n\\nThis folder contains the necessary files and tests for the system's functionality. The main responsibility of this folder is to ensure the proper functioning of the system.\\n\\n## Table of Contents\"},{\"name\":\"repositories\",\"path\":\"__tests__\\\\repositories\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis folder contains files and subfolders responsible for various functionalities in the system. The following sections provide a high-level overview of each file and folder, along with links to their respective documentation.\\n\\n## OpenAIRepositoryTest.ts\"},{\"name\":\"utils\",\"path\":\"__tests__\\\\utils\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth description of the content of the folder, its purpose in the system, and the files and folders it contains. The folder is divided into sections with clear headings and subheadings for easy navigation.\\n\\n## FolderStructureTest.ts\"}]\r\n###"
			}
		],
		"id": "__tests__",
		"lastTouch": "2023-04-15T19:05:58.262Z"
	},
	{
		"name": "Prerequisites",
		"path": "prerequisites.md",
		"folderPath": "",
		"fileContent": "",
		"documentation": "Prerequisites for the code-narrator project:\n\n1. Knowledge of JavaScript and TypeScript.\n2. Familiarity with Node.js and npm (Node Package Manager).\n3. Basic understanding of OpenAI API.\n\nRequired software and tools:\n\n1. Node.js (version 14 or higher) - Download and install from [Node.js official website](https://nodejs.org/).\n2. npm (version 6 or higher) - It comes bundled with Node.js.\n\nTo work with or understand the project, you should have the following dependencies installed:\n\n1. Install the code-narrator package using `npm i code-narrator -D`.\n2. Install other required dependencies by running `npm install` in the project directory.\n\nThe project uses the following main dependencies:\n\n- axios: ^0.26.1\n- dotenv: ^16.0.3\n- fast-glob: ^3.2.12\n- form-data: ^4.0.0\n- fs-extra: ^11.1.1\n- jsonpath: ^1.1.1\n- liquidjs: ^10.7.0\n- openai: ^3.1.0\n- yargs: ^17.7.1\n\nAnd the following development dependencies:\n\n- @babel/preset-typescript: ^7.21.0\n- @jest/globals: ^29.5.0\n- @types/jest: ^29.4.0\n- @types/node: ^18.11.19\n- gulp: ^4.0.2\n- gulp-copy: ^4.0.1\n- gulp-typescript: ^6.0.0-alpha.1\n- jest: ^29.4.2\n- ts-jest: ^29.0.5\n- ts-node: ^10.9.1\n- typescript: ^4.9.5\n\n:::note\nMake sure to have a valid OpenAI API key and set it in the `.env` file as `OPENAI_API_KEY=your_api_key`. Replace `your_api_key` with your actual API key.\n:::",
		"isFolder": false,
		"updated": "2023-04-14T16:04:32.711Z",
		"sidebar_position": 10,
		"sidebar_label": "Prerequisites",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Provide information on Prerequisites for a project called code-narrator.\r\nList any required software, tools, or knowledge needed to work with or understand the project.\r\n\r\nThis is the project file\r\n###\r\n\r\n###"
			},
			{
				"role": "assistant",
				"content": "File Content for package.json\n{\n  \"name\": \"code-narrator\",\n  \"version\": \"1.0.6\",\n  \"description\": \"Uses OpenAI to generate documentation on code and tests. It is self documenting tool and should be validation of the documentation working, similar to a compiler compiling it self. Use code-narrator.config.ts file to set the configuration for your project, such as project path, doc, documentation type and more. The package can be install using 'npm i code-narrator -D'\",\n  \"keywords\": [\n    \"documentation\",\n    \"openai\",\n    \"autodoc\"\n  ],\n  \"homepage\": \"https://github.com/ingig/code-narrator\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ingig/code-narrator/issues\"\n  },\n  \"repository\": {\n    \"url\": \"https://github.com/ingig/code-narrator\"\n  },\n  \"bin\": {\n    \"code-narrator-cli\": \"./dist/src/cli.js\"\n  },\n  \"readme\": \"./docs/ReadMe.md\",\n  \"scripts\": {\n    \"compile\": \"tsc\",\n    \"build\": \"npm run compile && gulp\",\n    \"start\": \"npx ts-node .\\\\src\\\\cli.ts\"\n  },\n  \"author\": \"Ingi Gauti Ragnarsson @ingig\",\n  \"license\": \"ISC\",\n  \"main\": \"./dist/src/App.js\",\n  \"types\": \"./dist/App.d.ts\",\n  \"files\": [\n    \"./dist\"\n  ],\n  \"dependencies\": {\n    \"@types/jsonpath\": \"^0.2.0\",\n    \"@types/multimatch\": \"^4.0.0\",\n    \"asynckit\": \"^0.4.0\",\n    \"axios\": \"^0.26.1\",\n    \"combined-stream\": \"^1.0.8\",\n    \"delayed-stream\": \"^1.0.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"extract-json-from-string\": \"^1.0.1\",\n    \"fast-glob\": \"^3.2.12\",\n    \"follow-redirects\": \"^1.15.2\",\n    \"form-data\": \"^4.0.0\",\n    \"fs-extra\": \"^11.1.1\",\n    \"gulp-sourcemaps\": \"^3.0.0\",\n    \"ignore\": \"^5.2.4\",\n    \"jsonpath\": \"^1.1.1\",\n    \"liquidjs\": \"^10.7.0\",\n    \"mime-db\": \"^1.52.0\",\n    \"mime-types\": \"^2.1.35\",\n    \"multimatch\": \"^6.0.0\",\n    \"openai\": \"^3.1.0\",\n    \"yargs\": \"^17.7.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-typescript\": \"^7.21.0\",\n    \"@jest/globals\": \"^29.5.0\",\n    \"@types/jest\": \"^29.4.0\",\n    \"@types/node\": \"^18.11.19\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-copy\": \"^4.0.1\",\n    \"gulp-typescript\": \"^6.0.0-alpha.1\",\n    \"jest\": \"^29.4.2\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.5\"\n  }\n}\n"
			}
		],
		"id": "prerequisites.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "ReadMe",
		"path": "README.md",
		"folderPath": "",
		"fileContent": "",
		"documentation": "# Code Narrator\n\n## Description\n\nCode Narrator is a self-documenting tool that uses OpenAI to generate documentation on code and tests. It serves as a validation of the documentation working, similar to a compiler compiling itself. Use the `code-narrator.config.ts` file to set the configuration for your project, such as project path, doc, documentation type, and more.\n\n## Getting Started\n\n1. Install the npm package:\n\n```bash\nnpm i code-narrator -D\n```\n\n2. Run the tool with npx:\n\n```bash\nnpx code-narrator\n```\n\n## Configuration\n\nConfiguration is optional and will be generated on the first run. You can modify the `code-narrator.config.ts` file to customize the settings for your project.\n\n## HowTo Docs\n\nFor more detailed instructions, refer to the [HowTo docs](howto/README.md).\n\n## API Information\n\nFor information about the API, refer to the [API docs](src/README.md).\n\n## Reporting Bugs\n\nTo report bugs, please visit the [issues page](https://github.com/ingig/code-narrator/issues).\n\n## Repository and Homepage\n\n- Repository: [https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n- Homepage: [https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n\n## Versioning\n\nThis project uses [SemVer](http://semver.org/) for versioning.\n\n## Authors\n\n- [Author Name](mailto:author@example.com)\n\n## License\n\nThis project is licensed under the ISC License.",
		"isFolder": false,
		"updated": "2023-04-14T16:05:32.752Z",
		"sidebar_position": 11,
		"sidebar_label": "ReadMe",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a \"ReadMe\" guide for the project, named \"code-narrator\".\r\nInclude the following:\r\nTitle, Description,\r\nGetting Started by installing npm package, how to run it with npx\r\nConfiguration is optional and will be generated on first run\r\nHowTo docs (located at howto/README.md),\r\nAPI information (located at src/README.md)\r\nReporting bugs, repository and homepage\r\nVersioning\r\nAuthors\r\nLicense\r\n\r\nThis is the entry file:\r\n###\r\n#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "$.name:\"code-narrator\"\n$.description:\"Uses OpenAI to generate documentation on code and tests. It is self documenting tool and should be validation of the documentation working, similar to a compiler compiling it self. Use code-narrator.config.ts file to set the configuration for your project, such as project path, doc, documentation type and more. The package can be install using 'npm i code-narrator -D'\"\n$.version:\"1.0.6\"\n$.homepage:\"https://github.com/ingig/code-narrator\"\n$.bugs:{\"url\":\"https://github.com/ingig/code-narrator/issues\"}\n$.repository:{\"url\":\"https://github.com/ingig/code-narrator\"}\n$.license:\"ISC\"\n"
			}
		],
		"id": "README.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "How to create HowTo",
		"path": "howto\\howto_create_howto.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Create a How-To Guide for the CLI\n\n## Introduction\n\nCreating a How-To guide for the CLI involves adding a new entry in the `code-narrator.config.js` file and providing the necessary information for the guide. This includes the type, template, name, and any relevant files or JSON paths.\n\n## Step-by-Step Instructions\n\n1. Open the `code-narrator.config.js` file in your project.\n\n2. Locate the `builders` array in the configuration object.\n\n3. Add a new object to the `builders` array with the following properties:\n\n   - `type`: Set this to \"howto\".\n   - `template`: Provide a unique name for the template, e.g., \"howto_cli_guide\".\n   - `name`: Give a descriptive name for the guide, e.g., \"CLI Guide\".\n   - `files`: (Optional) Add an array of objects with `path` and `JSONPath` properties if you want to include specific files or JSON paths in the guide.\n\n4. Save the `code-narrator.config.js` file.\n\n5. Create a new file in the `.code-narrator/gpt_questions` directory with the same name as the `template` property in the configuration object, e.g., \"howto_cli_guide.md\".\n\n6. Write the content of the How-To guide in the newly created file using Markdown syntax.\n\n7. Save the file.\n\nHere's an example of a new How-To guide entry in the `code-narrator.config.js` file:\n\n```javascript\n{\n    type: \"howto\",\n    template: \"howto_cli_guide\",\n    name: \"CLI Guide\",\n    files: [\n        {\n            path: \"src/cli.ts\"\n        },\n        {\n            path:\"package.json\",\n            JSONPath: [\"$.repository\"]\n        }\n    ]\n}\n```\n\nAfter following these steps, the new How-To guide for the CLI will be included in the generated documentation.",
		"isFolder": false,
		"updated": "2023-04-14T16:06:43.875Z",
		"sidebar_position": 12,
		"sidebar_label": "How to create HowTo",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "There 2 ways to create a how to guide\r\n\r\n1. Use \"::: howto title\" (without quotes) in your code file and write your description, this will dynamicly include your code file in the query\r\n2. create howto in config file, and point to a template in .code-narrator/gpt_questions\r\n\r\ngive example how a user would add a new how to,\r\nfor example how would one go by creating how to for the CLI"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "File Content for code-narrator.config.js\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot:true,\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"__tests__/**/**\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    builders: [\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n        {\r\n            type: \"README\",\r\n            template:\"README\",\r\n            name: \"ReadMe\",\r\n            args : {\r\n                entryFileContent:\"content(./src/cli.ts)\"\r\n            },\r\n            files : [\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath:[\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_howto\",\r\n            name: \"How to create HowTo\",\r\n            files: [\r\n                {\r\n                    path: \"code-narrator.config.js\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_use_cli\",\r\n            name: \"Use CLI\",\r\n            files: [\r\n                {\r\n                    path: \"src/cli.ts\"\r\n                },\r\n                {\r\n                    path:\"package.json\",\r\n                    JSONPath: [\"$.repository\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_content_to_long\",\r\n            name: \"Content to long\",\r\n        },\r\n        {\r\n            type: \"howto\",\r\n            template: \"howto_create_custom_builder\",\r\n            name: \"Create your own custom builder\",\r\n            files : [\r\n                {\r\n                    path: 'code-narrator.config.js',\r\n                    extract : 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                },\r\n                {\r\n                    path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                    extract: 'how code parses content(...) and extract()'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type:\"README\",\r\n            template:\"overview_readme\",\r\n            name:\"README\",\r\n            path:\"howto\",\r\n            files : [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nmodule.exports = config;"
			}
		],
		"id": "howto\\howto_create_howto.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "Use CLI",
		"path": "howto\\howto_use_cli.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Use Code-Narrator CLI\n\n## Introduction\n\nCode-Narrator is a CLI tool that helps you run the main app using npx. It allows you to use an optional config file, which Code-Narrator can generate for you if not provided. This guide will walk you through the installation and usage of Code-Narrator.\n\n## Step-by-Step Instructions\n\n1. **Install Code-Narrator**: To install Code-Narrator, open your terminal and run the following command:\n\n```bash\nnpm install code-narrator -D\n```\n\n2. **Run Code-Narrator**: To run Code-Narrator, use the following command in your terminal:\n\n```bash\nnpx code-narrator\n```\n\nYou can also provide optional parameters when running the command.\n\n3. **Understand the CLI**: The `src/cli.ts` file contains the main logic for the CLI. It imports the necessary modules, sets up the command-line arguments, and runs the main app. Here's a brief overview of the file content:\n\n```typescript\n#!/usr/bin/env node\n\nimport App from \"./App\";\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\nimport fs from \"fs\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport * as process from \"process\";\nimport CliHelper from \"./utils/CliHelper\";\n\n(async () => {\n\n    let cliHelper = new CliHelper()\n    const argv = await cliHelper.getArgv();\n    let userConfig = await cliHelper.getConfig(argv);\n\n    console.log('Starting code-narrator')\n\n    let app = new App();\n    await app.run(userConfig);\n\n})().catch((e: any) => {\n    console.error(e);\n});\n```\n\n4. **Repository**: The Code-Narrator repository can be found on GitHub at the following URL:\n\n[https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n\nNow you know how to install and use Code-Narrator CLI. Enjoy using this tool to run the main app with ease!",
		"isFolder": false,
		"updated": "2023-04-14T16:07:58.934Z",
		"sidebar_position": 13,
		"sidebar_label": "Use CLI",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "This is a cli that you can run the main app using npx\r\nconfig file is optional, code-narrator will generate for you\r\ninstall using npm install code-narrator -D\r\nto run use npx code-narrator, with optional parameters\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "File Content for src/cli.ts\n#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});"
			},
			{
				"role": "assistant",
				"content": "$.repository:{\"url\":\"https://github.com/ingig/code-narrator\"}\n"
			}
		],
		"id": "howto\\howto_use_cli.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "Content to long",
		"path": "howto\\howto_content_to_long.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Edit Long Content in Code Narrator\n\n## Introduction\n\nWhen using Code Narrator, you may encounter a situation where the content is too long, and the generated documentation is not satisfactory. In such cases, you can manually edit the content to improve the documentation. This guide will walk you through the process of editing long content in Code Narrator using ChatGPT.\n\n## Step-by-Step Instructions\n\n### Step 1: Open the cache.json file\n\nLocate the `.code-narrator/cache.json` file in your project directory and open it with a text editor.\n\n### Step 2: Find the file and copy the requestMessages content\n\nSearch for the file with the long content in the `cache.json` file. Once you find it, copy the content of the `requestMessages` property.\n\n### Step 3: Use ChatGPT to generate documentation\n\nGo to ChatGPT and paste the copied content from the `requestMessages` property into the input field. ChatGPT will generate the documentation for you. If the generated content is incomplete, you can ask ChatGPT to continue generating the documentation.\n\n### Step 4: Copy the generated documentation\n\nOnce you are satisfied with the generated documentation from ChatGPT, copy it to your clipboard.\n\n### Step 5: Update the .md file\n\nNavigate to the `docs` folder in your project directory and locate the corresponding `.md` file. Open the file with a text editor and replace the existing content with the documentation you copied from ChatGPT.\n\n## Conclusion\n\nBy following these steps, you can successfully edit long content in Code Narrator and improve the quality of your documentation. Remember to save your changes in both the `cache.json` and `.md` files to ensure your updates are properly reflected.",
		"isFolder": false,
		"updated": "2023-04-14T16:09:01.021Z",
		"sidebar_position": 14,
		"sidebar_label": "Content to long",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Title of md file: Content to long\r\nWhen code-narrator writes to console that content is to long\r\nthen you will probably not get good documentation.\r\nYou then need to edit it your self. Here is how you do it\r\n1. Open the .code-narrator/cache.json\r\n2. Find the file and copy the content of the requestMessages property\r\n3. Go to ChatGPT and paste inn the question\r\n4. ChatGPT will generate the documentation, if it stops ask it to continue\r\n5. Copy the documentation into you .md file located in docs"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			}
		],
		"id": "howto\\howto_content_to_long.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "Create your own custom builder",
		"path": "howto\\howto_create_custom_builder.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Create a Custom Builder Using the Config File\n\n## Introduction\n\nIn this guide, we will walk you through the process of creating a custom builder using the config file in a project that uses the Code Narrator system. The Code Narrator system uses the Liquid template engine for template files. We will also provide examples of using args and files properties in the config and explain the difference between the type property, as well as how content() and extract() functions work.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n1. A project set up with a Code Narrator config file in the root folder.\n2. A `.liquid` file added to the `.code-narrator/gpt_questions` directory.\n\n## Step-by-Step Instructions\n\n### Step 1: Add a Custom Builder to the Config File\n\nOpen the `code-narrator.config.js` file in your project's root folder and add a new builder object to the `builders` array. The builder object should have the following properties:\n\n- `name`: A unique name for your custom builder.\n- `template`: The name of the Liquid template file you created in the `.code-narrator/gpt_questions` directory.\n- `args`: An object containing any arguments you want to pass to the template.\n- `files`: An array of file objects that specify the files you want to include in the builder.\n- `type`: Set this property to \"Custom\" for a custom builder.\n\nHere's an example of a custom builder configuration:\n\n```javascript\n{\n  \"name\": \"MyCustomBuilder\",\n  \"template\": \"my_custom_builder_template\",\n  \"args\": {\n    \"entryFileContent\": \"content(./dist/src/cli.js)\",\n    \"configFile\": \"content(code-narrator.config.js)\"\n  },\n  \"files\": [\n    {\n      \"path\": \"package.json\",\n      \"jsonPaths\": [\"$.dependencies\", \"$.devDependencies\", \"$.engine\"]\n    }\n  ],\n  \"type\": \"Custom\"\n}\n```\n\n### Step 2: Use Args and Files Properties in the Config\n\nIn the `args` property, you can pass any data you want to use in your Liquid template. For example, you can use the `content()` function to read the content of a file:\n\n```javascript\n\"args\": {\n  \"entryFileContent\": \"content(./dist/src/cli.js)\"\n}\n```\n\nIn the `files` property, you can specify the files you want to include in the builder. You can also use the `JSONPath` property to extract specific data from JSON files:\n\n```javascript\n\"files\": [\n  {\n    \"path\": \"package.json\",\n    \"jsonPaths\": [\"$.dependencies\", \"$.devDependencies\", \"$.engine\"]\n  }\n]\n```\n\n### Step 3: Understand the Difference Between the Type Property\n\nThe `type` property in the builder configuration determines the type of builder you are creating. For a custom builder, set the `type` property to \"Custom\". Other possible values for the `type` property include \"README\", \"howto\", etc., depending on the type of documentation you want to generate.\n\n### Step 4: Learn How Content() and Extract() Functions Work\n\nThe `content()` function is used to read the content of a file and pass it as an argument to the template. For example:\n\n```javascript\n\"args\": {\n  \"entryFileContent\": \"content(./dist/src/cli.js)\"\n}\n```\n\nThe `extract()` function is used to extract specific data from a file. For example, you can use it to extract the `builders` array from the `code-narrator.config.js` file:\n\n```javascript\n\"files\": [\n  {\n    \"path\": \"code-narrator.config.js\",\n    \"extract\": \"builders\"\n  }\n]\n```\n\nNow you know how to create a custom builder using the config file in a Code Narrator project. You can use this knowledge to create custom documentation builders tailored to your specific needs.",
		"isFolder": false,
		"updated": "2023-04-14T16:13:06.178Z",
		"sidebar_position": 15,
		"sidebar_label": "Create your own custom builder",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give example howto create a custom builder using the config file by adding to builder config\r\nAssume the user has already set up his project and has a code-narrator config file in his root folder\r\nThe system uses Liquid template engine for template files\r\nuser MUST add .liquid file to .code-narrator/gpt_questions\r\nGive examples of using args and files properties in config\r\nExplain difference between the type property\r\nExplain how content(), and extract works"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help: {\"builders\":[{\"name\":\"Prerequisites\",\"template\":\"prerequisites\",\"args\":{\"entryFileContent\":\"content(./dist/src/cli.js)\",\"configFile\":\"content(code-narrator.config.js)\"},\"files\":[{\"path\":\"package.json\",\"jsonPaths\":[\"$.dependencies\",\"$.devDependencies\",\"$.engine\"]}],\"type\":\"Custom\"},{\"type\":\"README\",\"template\":\"README\",\"name\":\"ReadMe\",\"args\":{\"entryFileContent\":\"content(./src/cli.ts)\"},\"files\":[{\"path\":\"package.json\",\"JSONPath\":[\"$.name\",\"$.description\",\"$.version\",\"$.homepage\",\"$.bugs\",\"$.repository\",\"$.license\"]}]},{\"type\":\"howto\",\"template\":\"howto_create_howto\",\"name\":\"How to create HowTo\",\"files\":[{\"path\":\"code-narrator.config.js\"}]},{\"type\":\"howto\",\"template\":\"howto_use_cli\",\"name\":\"Use CLI\",\"files\":[{\"path\":\"src/cli.ts\"},{\"path\":\"package.json\",\"JSONPath\":[\"$.repository\"]}]},{\"type\":\"howto\",\"template\":\"howto_content_to_long\",\"name\":\"Content to long\"},{\"type\":\"howto\",\"template\":\"howto_create_custom_builder\",\"name\":\"Create your own custom builder\",\"files\":[{\"path\":\"code-narrator.config.js\",\"extract\":\"builders\"},{\"path\":\"src/documentation/builders/UserDefinedBuilderHelper.ts\",\"extract\":\"how code parses content(...) and extract()\"}]},{\"type\":\"README\",\"template\":\"overview_readme\",\"name\":\"README\",\"path\":\"howto\",\"files\":[{\"path\":\"howto/*.md\"}]}]}"
			}
		],
		"id": "howto\\howto_create_custom_builder.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "README",
		"path": "howto\\overview_readme.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# Overview of Files in the Directory\n\nThis is an overview of the files located in the directory. Each file provides a guide or tutorial on various aspects of using the CLI, editing content, and creating custom builders.\n\n## 1. [How to Create a How-To Guide for the CLI](How_to_Create_a_How-To_Guide_for_the_CLI.md)\n\nThis file provides a step-by-step guide on creating a How-To guide for the CLI, including adding a new entry in the `code-narrator.config.js` file and providing the necessary information.\n\n## 2. [How to Use Code-Narrator CLI](How_to_Use_Code-Narrator_CLI.md)\n\nThis file walks you through the installation and usage of the Code-Narrator CLI tool, which helps you run the main app using npx and allows you to use an optional config file.\n\n## 3. [How to Edit Long Content in Code Narrator](How_to_Edit_Long_Content_in_Code_Narrator.md)\n\nThis guide explains the process of manually editing long content in Code Narrator to improve the generated documentation when the content is too long and unsatisfactory.\n\n## 4. [How to Create a Custom Builder Using the Config File](How_to_Create_a_Custom_Builder_Using_the_Config_File.md)\n\nIn this file, you'll learn how to create a custom builder using the config file in a project that uses the Code Narrator system, as well as examples of using args and the Liquid template engine for template files.",
		"isFolder": false,
		"updated": "2023-04-14T16:14:00.522Z",
		"sidebar_position": 16,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give title and short description that this is an overview file for files located in directory\r\nGive short description of each file that is provided\r\nAdd link to each file, link should be the filename\r\n\r\n"
			},
			{
				"role": "assistant",
				"content": "This is first paragraph from file \"*.md\"\n                         # How to Create a How-To Guide for the CLI\n\n## Introduction\n\nCreating a How-To guide for the CLI involves adding a new entry in the `code-narrator.config.js` file and providing the necessary information for the guide. This includes the type, template, name, and any relevant files or JSON paths.\n\n## Step-by-Step Instructions\n\n1. Open the `code-narra...\n                         This is first paragraph from file \"*.md\"\n                         # How to Use Code-Narrator CLI\n\n## Introduction\n\nCode-Narrator is a CLI tool that helps you run the main app using npx. It allows you to use an optional config file, which Code-Narrator can generate for you if not provided. This guide will walk you through the installation and usage of Code-Narrator.\n\n## Step-by-Step Instructions\n\n1. **Install Code...\n                         This is first paragraph from file \"*.md\"\n                         # How to Edit Long Content in Code Narrator\n\n## Introduction\n\nWhen using Code Narrator, you may encounter a situation where the content is too long, and the generated documentation is not satisfactory. In such cases, you can manually edit the content to improve the documentation. This guide will walk you through the process of editing long content ...\n                         This is first paragraph from file \"*.md\"\n                         # How to Create a Custom Builder Using the Config File\n\n## Introduction\n\nIn this guide, we will walk you through the process of creating a custom builder using the config file in a project that uses the Code Narrator system. The Code Narrator system uses the Liquid template engine for template files. We will also provide examples of using args and ...\n                         "
			}
		],
		"id": "howto\\overview_readme.md",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "JenkyllGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus\\JenkyllGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "import BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nexport default class JenkyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = path.basename(document.folderPath)\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\nparent: ${parent}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# JenkyllGenerator.ts\n\nThe `JenkyllGenerator.ts` file is a TypeScript code file that defines a class named `JenkyllGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a given `Document` object to generate a Jekyll-compatible documentation file.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [process](#process)\n- [Technical Concepts](#technical-concepts)\n\n## Usage\n\nTo use the `JenkyllGenerator` class, you need to import it and create an instance of the class. Then, you can call the `process` method with a `Document` object as its argument.\n\n```typescript\nimport JenkyllGenerator from \"./JenkyllGenerator\";\nimport Document from \"../../../Document\";\n\nconst generator = new JenkyllGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Methods\n\n### process\n\nThe `process` method takes a `Document` object as its input and processes it to generate a Jekyll-compatible documentation file. It returns the processed `Document` object.\n\n```typescript\npublic process(document: Document): Document\n```\n\n#### Parameters\n\n- `document` (Document): The `Document` object to be processed.\n\n## Technical Concepts\n\n- **Jekyll**: Jekyll is a static site generator that takes Markdown files and other content, and transforms them into a complete static website. It is widely used for creating documentation websites and blogs.\n\n- **Front Matter**: In Jekyll, the front matter is a block of YAML code at the beginning of a file that contains metadata about the file. The front matter is used to configure how Jekyll processes the file and generates the static site. In the `JenkyllGenerator` class, the front matter is generated and added to the `Document` object's `documentation` property.\n\n- **ConfigHelper**: The `ConfigHelper` class is used to manage the configuration settings for the application. In the `JenkyllGenerator` class, the `ConfigHelper` is used to set the `rootFileName` property to `'index'`.",
		"isFolder": false,
		"updated": "2023-04-15T09:50:57.770Z",
		"sidebar_position": 1,
		"sidebar_label": "JenkyllGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"JenkyllGenerator.ts\"\r\nThe file name is: JenkyllGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nexport default class JenkyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = path.basename(document.folderPath)\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\nparent: ${parent}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus\\JenkyllGenerator.ts",
		"lastTouch": "2023-04-15T09:50:57.771Z"
	},
	{
		"name": "DocusaurusGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\DocusaurusGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class called `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with the Docusaurus static site generator.\n\n## Usage\n\nTo use the `DocusaurusGenerator` class, you need to import it and create an instance of the class. Then, you can call the `process()` method on the instance, passing a `Document` object as an argument.\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Class Methods\n\n### process(document: Document)\n\nThe `process()` method takes a `Document` object as its argument and processes it to generate documentation compatible with Docusaurus. It returns the processed `Document` object.\n\n#### Parameters\n\n- `document: Document` - The `Document` object to be processed.\n\n#### Technical Concepts\n\nThe `process()` method performs the following operations on the `Document` object:\n\n1. Removes any occurrences of `: Promise<[a-zA-Z]*>` and `: Partial<[a-zA-Z]*>` from the `documentation` property of the `Document` object. This is because Docusaurus does not support these types in its headers.\n\n2. Sets the `sidebar_label` and `sidebar_position` properties of the `Document` object. If these properties are not already set, it assigns default values.\n\n3. Prepends the `documentation` property of the `Document` object with the `sidebar_position` and `sidebar_label` properties in the Docusaurus frontmatter format.\n\n## Example\n\nHere's an example of how the `DocusaurusGenerator` class can be used to process a `Document` object:\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document({\n  name: 'Example Document',\n  documentation: 'This is an example document.',\n  sidebar_label: 'Example',\n  sidebar_position: 2,\n});\n\nconst processedDocument = generator.process(document);\n\nconsole.log(processedDocument.documentation);\n```\n\nThis will output the following processed documentation:\n\n```\n---\nsidebar_position: 2\nsidebar_label: Example\n---\n\nThis is an example document.\n```",
		"isFolder": false,
		"updated": "2023-04-15T18:05:20.943Z",
		"sidebar_position": 1,
		"sidebar_label": "DocusaurusGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocusaurusGenerator.ts\"\r\nThe file name is: DocusaurusGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\DocusaurusGenerator.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "generators"
		}
	},
	{
		"name": "JekyllGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\JekyllGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\n\r\nexport default class JekyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = '';\r\n        let has_children = '';\r\n        if (document.name != 'README') {\r\n            let folderDocument = DocumentationCache.getFolderByFolderPath(document.folderPath);\r\n            if (folderDocument) {\r\n                parent = `parent: ${folderDocument.path}`\r\n            }\r\n        } else if (document.name == 'README' && document.path != '.') {\r\n            has_children = 'has_children:true'\r\n        }\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\n${parent}\r\n${has_children}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# JekyllGenerator.ts\n\nThis file contains the `JekyllGenerator` class, which is responsible for processing documents and generating the appropriate Jekyll front matter for each document. The class extends the `BaseGenerator` class and overrides the `process` method.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [process](#process)\n- [Technical Concepts](#technical-concepts)\n  - [Jekyll Front Matter](#jekyll-front-matter)\n\n## Usage\n\nTo use the `JekyllGenerator` class, you need to import it and create an instance of the class. Then, you can call the `process` method on the instance, passing in a `Document` object.\n\n```typescript\nimport JekyllGenerator from \"./JekyllGenerator\";\nimport Document from \"../../Document\";\n\nconst generator = new JekyllGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Methods\n\n### process\n\nThe `process` method takes a `Document` object as its input and generates the Jekyll front matter for the document. It returns the modified `Document` object with the front matter added to its `documentation` property.\n\n#### Parameters\n\n- `document` (`Document`): The document to be processed.\n\n#### Example\n\n```typescript\nconst generator = new JekyllGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Technical Concepts\n\n### Jekyll Front Matter\n\nJekyll front matter is a block of YAML code at the beginning of a Markdown file that contains metadata about the file. It is used by Jekyll to generate the site structure and navigation. In this class, the front matter is generated based on the document's properties, such as its `sidebar_label`, `sidebar_position`, and `folderPath`. The generated front matter includes the following properties:\n\n- `nav_order`: The position of the document in the sidebar navigation.\n- `title`: The title of the document, which is displayed in the sidebar navigation.\n- `parent`: The path of the parent document, if the document is a child of another document.\n- `has_children`: A boolean indicating whether the document has child documents.\n\nHere's an example of the generated front matter:\n\n```yaml\n---\nnav_order: 1\ntitle: Introduction\nparent: getting-started\nhas_children: true\n---\n```",
		"isFolder": false,
		"updated": "2023-04-15T18:06:23.068Z",
		"sidebar_position": 2,
		"sidebar_label": "JekyllGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"JekyllGenerator.ts\"\r\nThe file name is: JekyllGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\n\r\nexport default class JekyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = '';\r\n        let has_children = '';\r\n        if (document.name != 'README') {\r\n            let folderDocument = DocumentationCache.getFolderByFolderPath(document.folderPath);\r\n            if (folderDocument) {\r\n                parent = `parent: ${folderDocument.path}`\r\n            }\r\n        } else if (document.name == 'README' && document.path != '.') {\r\n            has_children = 'has_children:true'\r\n        }\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\n${parent}\r\n${has_children}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\JekyllGenerator.ts",
		"lastTouch": "2023-04-15T19:05:58.262Z",
		"data": {
			"parent": "generators"
		}
	}
]